{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/blank/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/fonts/chinese-zodiac.eot","path":"fonts/chinese-zodiac.eot","modified":1,"renderable":1},{"_id":"themes/blank/source/fonts/chinese-zodiac.woff2","path":"fonts/chinese-zodiac.woff2","modified":1,"renderable":1},{"_id":"themes/blank/source/fonts/chinese-zodiac.woff","path":"fonts/chinese-zodiac.woff","modified":1,"renderable":1},{"_id":"themes/blank/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/blank/source/img/alipay.svg","path":"img/alipay.svg","modified":1,"renderable":1},{"_id":"themes/blank/source/img/icp.png","path":"img/icp.png","modified":1,"renderable":1},{"_id":"themes/blank/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/blank/source/img/wechat.jpg","path":"img/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/blank/source/img/paypal.svg","path":"img/paypal.svg","modified":1,"renderable":1},{"_id":"themes/blank/source/img/wechat.svg","path":"img/wechat.svg","modified":1,"renderable":1},{"_id":"themes/blank/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/blank/source/js/firework.js","path":"js/firework.js","modified":1,"renderable":1},{"_id":"themes/blank/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/blank/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/blank/source/js/todark.js","path":"js/todark.js","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/dark.styl","path":"css/partial/dark.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/fonts.styl","path":"css/partial/fonts.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/header.styl","path":"css/partial/header.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight.styl","path":"css/partial/highlight.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/local-search.styl","path":"css/partial/local-search.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/recent-posts.styl","path":"css/partial/recent-posts.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/post.styl","path":"css/partial/post.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/media.styl","path":"css/partial/media.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/reward.styl","path":"css/partial/reward.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/tag_plugin/note.styl","path":"css/partial/tag_plugin/note.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/tag_plugin/tags.styl","path":"css/partial/tag_plugin/tags.styl","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/a11y-light.css","path":"css/partial/highlight/a11y-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/a11y-dark.css","path":"css/partial/highlight/a11y-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/agate.css","path":"css/partial/highlight/agate.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/arta.css","path":"css/partial/highlight/arta.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/arduino-light.css","path":"css/partial/highlight/arduino-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/an-old-hope.css","path":"css/partial/highlight/an-old-hope.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/ascetic.css","path":"css/partial/highlight/ascetic.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-cave-dark.css","path":"css/partial/highlight/atelier-cave-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-cave-light.css","path":"css/partial/highlight/atelier-cave-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-dune-dark.css","path":"css/partial/highlight/atelier-dune-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-estuary-dark.css","path":"css/partial/highlight/atelier-estuary-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-estuary-light.css","path":"css/partial/highlight/atelier-estuary-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-forest-dark.css","path":"css/partial/highlight/atelier-forest-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-forest-light.css","path":"css/partial/highlight/atelier-forest-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-heath-dark.css","path":"css/partial/highlight/atelier-heath-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-heath-light.css","path":"css/partial/highlight/atelier-heath-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-lakeside-dark.css","path":"css/partial/highlight/atelier-lakeside-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/androidstudio.css","path":"css/partial/highlight/androidstudio.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-dune-light.css","path":"css/partial/highlight/atelier-dune-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-lakeside-light.css","path":"css/partial/highlight/atelier-lakeside-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-savanna-light.css","path":"css/partial/highlight/atelier-savanna-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-savanna-dark.css","path":"css/partial/highlight/atelier-savanna-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-plateau-light.css","path":"css/partial/highlight/atelier-plateau-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-seaside-dark.css","path":"css/partial/highlight/atelier-seaside-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-seaside-light.css","path":"css/partial/highlight/atelier-seaside-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-sulphurpool-light.css","path":"css/partial/highlight/atelier-sulphurpool-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atom-one-dark-reasonable.css","path":"css/partial/highlight/atom-one-dark-reasonable.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atom-one-dark.css","path":"css/partial/highlight/atom-one-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atom-one-light.css","path":"css/partial/highlight/atom-one-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/brown-paper.css","path":"css/partial/highlight/brown-paper.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/codepen-embed.css","path":"css/partial/highlight/codepen-embed.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/color-brewer.css","path":"css/partial/highlight/color-brewer.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-plateau-dark.css","path":"css/partial/highlight/atelier-plateau-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/atelier-sulphurpool-dark.css","path":"css/partial/highlight/atelier-sulphurpool-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/darcula.css","path":"css/partial/highlight/darcula.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/dark.css","path":"css/partial/highlight/dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/docco.css","path":"css/partial/highlight/docco.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/far.css","path":"css/partial/highlight/far.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/foundation.css","path":"css/partial/highlight/foundation.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/github-gist.css","path":"css/partial/highlight/github-gist.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/github.css","path":"css/partial/highlight/github.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/gml.css","path":"css/partial/highlight/gml.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/dracula.css","path":"css/partial/highlight/dracula.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/googlecode.css","path":"css/partial/highlight/googlecode.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/gradient-dark.css","path":"css/partial/highlight/gradient-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/gruvbox-dark.css","path":"css/partial/highlight/gruvbox-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/grayscale.css","path":"css/partial/highlight/grayscale.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/hopscotch.css","path":"css/partial/highlight/hopscotch.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/hybrid.css","path":"css/partial/highlight/hybrid.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/default.css","path":"css/partial/highlight/default.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/gruvbox-light.css","path":"css/partial/highlight/gruvbox-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/isbl-editor-light.css","path":"css/partial/highlight/isbl-editor-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/isbl-editor-dark.css","path":"css/partial/highlight/isbl-editor-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/kimbie.dark.css","path":"css/partial/highlight/kimbie.dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/kimbie.light.css","path":"css/partial/highlight/kimbie.light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/lightfair.css","path":"css/partial/highlight/lightfair.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/lioshi.css","path":"css/partial/highlight/lioshi.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/magula.css","path":"css/partial/highlight/magula.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/mono-blue.css","path":"css/partial/highlight/mono-blue.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/monokai-sublime.css","path":"css/partial/highlight/monokai-sublime.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/monokai.css","path":"css/partial/highlight/monokai.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/night-owl.css","path":"css/partial/highlight/night-owl.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/nnfx-dark.css","path":"css/partial/highlight/nnfx-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/nnfx.css","path":"css/partial/highlight/nnfx.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/nord.css","path":"css/partial/highlight/nord.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/obsidian.css","path":"css/partial/highlight/obsidian.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/ocean.css","path":"css/partial/highlight/ocean.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/paraiso-light.css","path":"css/partial/highlight/paraiso-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/pojoaque.css","path":"css/partial/highlight/pojoaque.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/purebasic.css","path":"css/partial/highlight/purebasic.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/qtcreator_dark.css","path":"css/partial/highlight/qtcreator_dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/qtcreator_light.css","path":"css/partial/highlight/qtcreator_light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/railscasts.css","path":"css/partial/highlight/railscasts.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/rainbow.css","path":"css/partial/highlight/rainbow.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/routeros.css","path":"css/partial/highlight/routeros.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/school-book.css","path":"css/partial/highlight/school-book.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/shades-of-purple.css","path":"css/partial/highlight/shades-of-purple.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/solarized-dark.css","path":"css/partial/highlight/solarized-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/solarized-light.css","path":"css/partial/highlight/solarized-light.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/srcery.css","path":"css/partial/highlight/srcery.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/sunburst.css","path":"css/partial/highlight/sunburst.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night-blue.css","path":"css/partial/highlight/tomorrow-night-blue.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night-bright.css","path":"css/partial/highlight/tomorrow-night-bright.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night-eighties.css","path":"css/partial/highlight/tomorrow-night-eighties.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/ir-black.css","path":"css/partial/highlight/ir-black.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night.css","path":"css/partial/highlight/tomorrow-night.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/tomorrow.css","path":"css/partial/highlight/tomorrow.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/idea.css","path":"css/partial/highlight/idea.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/vs.css","path":"css/partial/highlight/vs.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/vs2015.css","path":"css/partial/highlight/vs2015.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/paraiso-dark.css","path":"css/partial/highlight/paraiso-dark.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/xt256.css","path":"css/partial/highlight/xt256.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/xcode.css","path":"css/partial/highlight/xcode.css","modified":1,"renderable":1},{"_id":"themes/blank/source/css/partial/highlight/zenburn.css","path":"css/partial/highlight/zenburn.css","modified":1,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/banner/ideal.jpeg","path":"images/banner/ideal.jpeg","modified":1,"renderable":0}],"Cache":[{"_id":"source/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713107315208},{"_id":"source/.DS_Store","hash":"b7a2cb857d639d3588e5ac7260553fbb4db7deba","modified":1713261533510},{"_id":"source/images/.DS_Store","hash":"c8ec68e2af460d60d63d9df28d828de8825cd511","modified":1713108938542},{"_id":"source/categories/index.md","hash":"c02256d882627aea3f8f4bbd14376747c001b222","modified":1713100238332},{"_id":"source/about/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1713107074519},{"_id":"source/tags/index.md","hash":"e9062fc1214c22cf54e9dd1d6747d1232d0af151","modified":1713100413922},{"_id":"source/_posts/.DS_Store","hash":"3d9d1caeff23680fcc29362af4e2b1875ccbba7c","modified":1680855977575},{"_id":"source/CNAME","hash":"28acc25df7fc2b3fc373486a0e9476e8b85a94b6","modified":1713261373981},{"_id":"source/archives/index.md","hash":"dd6e4ac3503caf932b7dc15d430e9c0ba1d65cd8","modified":1713100359376},{"_id":"source/_posts/Solidity/remix使用.md","hash":"7edd8ad187b436cea6f52d30565d85d3b89ba724","modified":1713108668780},{"_id":"source/_posts/天文学/夜观星空—特伦斯·迪金森.md","hash":"115d637d39cb802185ba3d879440a8da6c96ee2e","modified":1713208356230},{"_id":"source/_posts/技术栈/Git教程.md","hash":"26fa5ac60cdc9df2130df0b4d5bdb94a4710cd4a","modified":1713197711246},{"_id":"source/_posts/Solidity/remix本地安装.md","hash":"ba6e74c73f2878409d5b9546c81e80f9fc2a76bb","modified":1713108665378},{"_id":"source/_posts/Vim&&Neovim/Vim极简命令手册.md","hash":"71a5fec470bc43bed9a0cd9367c864ca4e53863f","modified":1713197246025},{"_id":"source/_posts/算法/二分查找.md","hash":"cd8667ea9400409e31ffe4626fbc0987b480f61a","modified":1713108654047},{"_id":"source/_posts/影音/河西走廊.md","hash":"9dd4876a0a6d791cd92b9bf074fa0acee047200c","modified":1713210525687},{"_id":"source/_posts/Solidity/极简Solidity语法总结.md","hash":"995a82963224f4f5cb7ba46aae3447c3250a4097","modified":1713108661264},{"_id":"source/_posts/诗/我心中有.md","hash":"97d0234c6beb78866966834b3497d1354a90b780","modified":1713108760330},{"_id":"source/_posts/Solidity/NFT合约开发.md","hash":"8eca73b25d47a83a5865da416bc51411c1cbbe14","modified":1713299574404},{"_id":"source/_posts/算法/一道题理解动态规划、BFS、DFS.md","hash":"8222963c795c94e4611f212d239bb877290d885c","modified":1713109521290},{"_id":"source/_posts/诗/秋水.md","hash":"57e3c322fadcc09022118f523292ea1ada2a359d","modified":1713108770776},{"_id":"source/_posts/诗/理想.md","hash":"c0e18dc868eeb5973e1493cc6ae8503c18da88d7","modified":1713108779028},{"_id":"source/_posts/诗/宝贝，来春天玩.md","hash":"79b201cd14986a878247e43247bf50a2d2298089","modified":1713108784228},{"_id":"source/_posts/诗/镜子.md","hash":"c46cc3a71c031e9af5c4954d6b17bd687881edc9","modified":1713108781571},{"_id":"source/_posts/诗/霉变.md","hash":"bf0ae139b786b92682eb8cb7d570f286434519ac","modified":1713315371744},{"_id":"source/_posts/诗/站在阳光里.md","hash":"d2dd90a7e81709ad6cce6622d322b04e24ad47b2","modified":1713109845837},{"_id":"source/_posts/408/众元教育网课 7天快速通过计算机网络期末考试.md","hash":"b4e7a7f8c7bc385f02437b26f915b7e74e253733","modified":1713210032262},{"_id":"source/_posts/算法/状态转移方程中的状态究竟是指什么？.md","hash":"3c18fd99f5a6dc339d04681f6d1a882ffc486eff","modified":1713268830483},{"_id":"source/_posts/杂集/我这辈子见过最好的学习方法  CLT认知负荷理论  汤质看本质.md","hash":"19c08500a2aa18aad16d384c06c2cc80992618bc","modified":1713206752979},{"_id":"source/_posts/杂集/为什么伟大不能被计划——肯尼斯·斯坦利,乔尔·雷曼.md","hash":"a2e8b012a42ef6df1cba4af79bbffacc6b0139db","modified":1713206758256},{"_id":"source/_posts/随记/理想是一种咖啡.md","hash":"d74594c38428db84fb797b2f9615fd2ef0d7d318","modified":1713260581686},{"_id":"source/_posts/杂集/创意写作.md","hash":"736b3ca579c09ac630960b6274571d9150d4d3cc","modified":1713208905475},{"_id":"source/_posts/杂集/特价机票研究.md","hash":"772d350cd6a18c28d2c40e0fb2b92b968e7b8e70","modified":1713210913905},{"_id":"source/_posts/诗/野人.md","hash":"3404b7a8585c044a4ad5fc1c0263e2b373c87fd5","modified":1713108757345},{"_id":"source/_posts/杂集/新诗研究.md","hash":"0714aeae07cf4893c508b4cff58093e14a2f256b","modified":1713211634336},{"_id":"source/_posts/杂集/观赏植物学.md","hash":"3223adde97d525c19d9a6d55e3796e7bbcf032eb","modified":1713209663573},{"_id":"themes/blank/LICENSE","hash":"ffc740e08b340f792a5351f7d64123aace8d8b13","modified":1713061651304},{"_id":"themes/blank/_config.yml","hash":"7eed53699c99eae3ee02154b7d161ae608fc8be1","modified":1713198547205},{"_id":"themes/blank/languages/en.yml","hash":"949c2bda437f26a957ec526d4d74d8db73a5fe60","modified":1713061651304},{"_id":"themes/blank/scripts/404.js","hash":"2b30494185c0768482e47647e60a3f83dd8c3ae3","modified":1713061651311},{"_id":"themes/blank/README.md","hash":"2e404ed0707518d41045586c343f480a99090986","modified":1713061651304},{"_id":"themes/blank/scripts/mermaid.js","hash":"0162c140308a133d1a86891294ee408c900d34f5","modified":1713061651311},{"_id":"themes/blank/scripts/wordcount.js","hash":"34f51b1aeb20a92949c7c3d807bf1df52c7f00ca","modified":1713061651312},{"_id":"themes/blank/scripts/year.js","hash":"73952155c35577f50bf68f87a775d853ef3d0357","modified":1713061651312},{"_id":"themes/blank/scripts/post_lazyload.js","hash":"f5396ef6338c1a9da2688693ec752e10a561585b","modified":1713061651311},{"_id":"themes/blank/scripts/replace_config.js","hash":"4dae5f5b193c0a7a29ff653fefc9001fbaab06a1","modified":1713061651311},{"_id":"themes/blank/layout/404.ejs","hash":"9b6689ffd094b87776b70664d7f84836ad99233a","modified":1713061651304},{"_id":"themes/blank/layout/archive.ejs","hash":"e670f5e7570f6b203d2f93ee6fdcad70b2f3b7c9","modified":1713061651305},{"_id":"themes/blank/layout/category.ejs","hash":"32c5ad6b49f7e99005b63c70e220c9fc41c74500","modified":1713061651305},{"_id":"themes/blank/.DS_Store","hash":"1d07d1bd1557fd5d9cc9b1992f188a1a0ad557d2","modified":1713198516903},{"_id":"themes/blank/layout/index.ejs","hash":"4ad3a549b6b113498140b833b1d35b02b1f1b057","modified":1713061651305},{"_id":"themes/blank/layout/layout.ejs","hash":"e2328ce467e413835842097502ab195dc864d4bd","modified":1713061651305},{"_id":"themes/blank/layout/page.ejs","hash":"0d82d52501a5918dbd19b8c2a22ab1599c709050","modified":1713061651305},{"_id":"themes/blank/languages/zh-CN.yml","hash":"9880b0373228e984d4a1c3a2339d6415a40351cd","modified":1713197304798},{"_id":"themes/blank/scripts/tags/checkbox.js","hash":"4a80223ccd8a163edc189e71a0a6a31cb6564273","modified":1713061651311},{"_id":"themes/blank/scripts/tags/btns.js","hash":"7cc242903125f1d783d8ef51e63b4fb773c883e0","modified":1713061651311},{"_id":"themes/blank/scripts/tags/note.js","hash":"f224f2982511f57b826c1bab221d8eccca6dca13","modified":1713061651312},{"_id":"themes/blank/scripts/tags/tabs.js","hash":"5c1f1fa64831243f329a1b0a591b8cb5c622332b","modified":1713061651312},{"_id":"themes/blank/scripts/.DS_Store","hash":"9aab46deaee281e103ce06646ffad95cdf65d472","modified":1713182276118},{"_id":"themes/blank/layout/tag.ejs","hash":"cc4df43f5b2af885f56500b6a6d1c9ba38f88398","modified":1713061651311},{"_id":"themes/blank/layout/post.ejs","hash":"d187423c20692fd9b92bff33a81c2f5baf030496","modified":1713061651311},{"_id":"themes/blank/source/.DS_Store","hash":"9cc6634e287098d232ff93c55a6243a6fc89e276","modified":1713261066260},{"_id":"themes/blank/layout/partial/archive.ejs","hash":"2cb68a61a26dd94d47da507e03e074644c17224c","modified":1713061651309},{"_id":"themes/blank/layout/partial/gotop.ejs","hash":"b29065b60b54a4a573931c1a84a1e4d20b20feff","modified":1713061651310},{"_id":"themes/blank/layout/partial/head.ejs","hash":"5099071dc0977a8e8a4892404a447128cea5f610","modified":1713061651310},{"_id":"themes/blank/layout/partial/header.ejs","hash":"8be653b5c0b7dae8717a208c43a3a8809648dfa6","modified":1713061651310},{"_id":"themes/blank/layout/partial/link.ejs","hash":"01158f9f9782b479c5a56d3f79d57c093d5398a3","modified":1713061651310},{"_id":"themes/blank/layout/partial/article.ejs","hash":"b8fb7b5fca6265c71b30aacbece1f350a2b5a8b6","modified":1713061651310},{"_id":"themes/blank/layout/partial/page.ejs","hash":"c08f6ee15dc3cc1a877bfdd8c45d74e945920aec","modified":1713061651310},{"_id":"themes/blank/scripts/tags/folding.js","hash":"54b958ba3b564ff53e7cc71b7c5bc9093b1ddd23","modified":1713061651312},{"_id":"themes/blank/layout/.DS_Store","hash":"ec366021f0dfde3d454debd9aaf27caefedfd228","modified":1713098461923},{"_id":"themes/blank/layout/partial/recent-posts.ejs","hash":"139e6b323c27cdec301eeb7791b0cba8aa7bb34d","modified":1713061651311},{"_id":"themes/blank/layout/partial/post-meta.ejs","hash":"3d4507c6f5b49f416cb97de40fc45be1fbdaa979","modified":1713061651310},{"_id":"themes/blank/layout/partial/script.ejs","hash":"c0054e3c76e2359838012c2ff09b329ed1f7d9b5","modified":1713061651311},{"_id":"themes/blank/layout/partial/tags.ejs","hash":"2c09a9f37b6ea91d5b957f34582b11ac0022181d","modified":1713061651311},{"_id":"themes/blank/layout/partial/categories.ejs","hash":"561dd42a65fad7ba164c44e6502d791549017442","modified":1713061651310},{"_id":"themes/blank/layout/partial/footer.ejs","hash":"27bd152ad9721d3bc04ca357f05fb5811146d10a","modified":1713102900222},{"_id":"themes/blank/layout/partial/mobile-header.ejs","hash":"93e710d424d462aa1ee7c3ba758442359fae5d08","modified":1713061651310},{"_id":"themes/blank/source/css/var.styl","hash":"fc8f1b82475de1b95735785933fec0aaf9c1b171","modified":1713061651322},{"_id":"themes/blank/source/css/style.styl","hash":"62017026d0b20c36c018191b7f046e92d3ede8cc","modified":1713061651322},{"_id":"themes/blank/source/fonts/chinese-zodiac.woff2","hash":"96af181d987ecc97bf9f1fe12df883102bdc18a4","modified":1713061651322},{"_id":"themes/blank/source/fonts/chinese-zodiac.eot","hash":"e3ea84e00f4fae1bbf157650ed09000299ea8c7b","modified":1713061651322},{"_id":"themes/blank/source/fonts/chinese-zodiac.woff","hash":"bf8137ae4b8a1e11bc5480ba5af2d44244d13f99","modified":1713061651322},{"_id":"themes/blank/layout/partial/paginator.ejs","hash":"aeee068731a3de9240beb01d3ea76607231d9b2c","modified":1713061651310},{"_id":"themes/blank/source/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1713061651325},{"_id":"themes/blank/source/img/paypal.svg","hash":"eba1b04aea730018660587feaf8c8757176555d4","modified":1713061651326},{"_id":"themes/blank/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1713109365029},{"_id":"themes/blank/source/js/firework.js","hash":"e9f29679ebb2f581ccadd39ef18c89cfc44e0710","modified":1713061651328},{"_id":"themes/blank/source/js/local-search.js","hash":"7235f78007bde4ddc94911596128346364eefe3b","modified":1713061651328},{"_id":"themes/blank/source/img/wechat.svg","hash":"5dfce94fa9238127ce7ef7fc2b1ff81fa26f98f4","modified":1713061651327},{"_id":"themes/blank/source/img/loading.gif","hash":"dabf141cac0a42a8dbfb8844e9a8fb1d1f3fceab","modified":1713061651325},{"_id":"themes/blank/source/js/script.js","hash":"7bdd6dcc73e8d756961a1dfc6d80700a7112c45a","modified":1713061651328},{"_id":"themes/blank/source/js/todark.js","hash":"09d8e17071e73aeeff1957827c46e39c1fb050f5","modified":1713061651328},{"_id":"themes/blank/layout/partial/_comment/valine.ejs","hash":"d74f8813629a7c7c3cdd48a6f6570542c970d4e1","modified":1713187900243},{"_id":"themes/blank/layout/partial/_comment/waline.ejs","hash":"86abd0f3fc12cb91af645c74ffdc92c3e20f34b7","modified":1713198124242},{"_id":"themes/blank/layout/partial/_comment/index.ejs","hash":"0f6d395e9c1654edb6fe41a91bbeb2cd4aaf0341","modified":1713061651305},{"_id":"themes/blank/source/img/favicon.png","hash":"e7b85c747928f7fcb4b6097d4fd2b8f209b4ab18","modified":1680700515632},{"_id":"themes/blank/layout/partial/_maths/mathjax.ejs","hash":"2bcb061fa112497f70ff98954924b0d04de9f52d","modified":1713061651308},{"_id":"themes/blank/layout/partial/_maths/mermaid.ejs","hash":"1357fabee7b597a21e5877ff784857a884886427","modified":1713061651308},{"_id":"themes/blank/layout/partial/_search/local-searchjs.ejs","hash":"295b30c57bcd405beb39330129f8bd13e894c32c","modified":1713061651309},{"_id":"themes/blank/layout/partial/_search/local-search.ejs","hash":"7b9ab110dd86c6dfcf645a2e296768c1435568ef","modified":1713061651309},{"_id":"themes/blank/layout/partial/_modify/sharejs.ejs","hash":"f0388e6efd40f0f6b22ec397c42214759f02b6e8","modified":1713061651309},{"_id":"themes/blank/layout/partial/_modify/copy.ejs","hash":"b35853f2c57319edc5f67bb6704544d4b4269caa","modified":1713061651309},{"_id":"themes/blank/layout/partial/_modify/audio.ejs","hash":"98a6b81a72001b7c45b2d5f69b6a9ba6ff092d3b","modified":1713061651308},{"_id":"themes/blank/layout/partial/_modify/lazyload.ejs","hash":"be747a27dd365d749edb164ae9db7648da3e79cb","modified":1713061651309},{"_id":"themes/blank/layout/partial/_modify/fancybox.ejs","hash":"df28aabdae7f5c30471db8f8c9f839f532566744","modified":1713061651309},{"_id":"themes/blank/layout/partial/_third-party/baidu-push.ejs","hash":"58343235ba5893c2478a2f3716581d1a6d454f83","modified":1713061651309},{"_id":"themes/blank/source/css/partial/header.styl","hash":"68dd7a4e8110f9d999b2d77d19a1a9e4aae3e4ac","modified":1713061651312},{"_id":"themes/blank/layout/partial/_third-party/baidu-analytics.ejs","hash":"4a19ff02003f649a50629c9fa678b722210c74a8","modified":1713061651309},{"_id":"themes/blank/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1713061651325},{"_id":"themes/blank/source/css/partial/dark.styl","hash":"c824c4403ec02b18defed07a4aafbda920cfeb07","modified":1713061651312},{"_id":"themes/blank/source/css/partial/highlight.styl","hash":"5cf7f8db67dbccb503f2f17a1dc22445d5f73813","modified":1713061651312},{"_id":"themes/blank/source/css/partial/fonts.styl","hash":"aa3f6cb0fa0faa55bd3e5e53097b10a0c6378366","modified":1713061651312},{"_id":"themes/blank/source/css/partial/local-search.styl","hash":"097b55f097a47e2630268f7e2c591d8a83ea43a4","modified":1713061651320},{"_id":"themes/blank/source/css/partial/recent-posts.styl","hash":"850fb1484e2de2912b823bea438ba8cc779f27b4","modified":1713061651321},{"_id":"themes/blank/layout/partial/_third-party/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1713061651309},{"_id":"themes/blank/source/css/partial/reward.styl","hash":"531c3d80f7a2c4e5083fdf784c97c79b725640f0","modified":1713061651321},{"_id":"themes/blank/source/css/partial/media.styl","hash":"2eaf285db15d3e613a897cd264fe11b80fbe4e3b","modified":1713061651320},{"_id":"themes/blank/layout/partial/_modify/rewards/rewardjs.ejs","hash":"e18706b6a897022490d76a1332ef5d4ae83ade4e","modified":1713061651309},{"_id":"themes/blank/layout/partial/_modify/rewards/reward.ejs","hash":"339ee4c92303bd8a83f57712799914be27e08848","modified":1713061651309},{"_id":"themes/blank/source/css/partial/tag_plugin/note.styl","hash":"445644a11a5360cd6106519920084bf478ece88e","modified":1713061651321},{"_id":"themes/blank/source/css/partial/highlight/a11y-light.css","hash":"6b964117406a7ddab93d598e14441eb9f1f6929a","modified":1713061651313},{"_id":"themes/blank/source/css/partial/highlight/a11y-dark.css","hash":"367b81c201179eb6b9e8448be7d9afe900324d0e","modified":1713061651312},{"_id":"themes/blank/source/css/partial/highlight/agate.css","hash":"2c53b6f63569eb43a3d3c32b0d2920389e9ec397","modified":1713061651313},{"_id":"themes/blank/source/css/partial/highlight/an-old-hope.css","hash":"b77c50f80832cd26919775863cc49e694e84b888","modified":1713061651313},{"_id":"themes/blank/source/css/partial/highlight/arduino-light.css","hash":"a6b27a3e53fe933317531b6bba1ec0887508f0b6","modified":1713061651313},{"_id":"themes/blank/source/css/partial/highlight/ascetic.css","hash":"5e2ac91bc9c3852359ccf4ce7eefdea012a903ab","modified":1713061651313},{"_id":"themes/blank/source/css/partial/highlight/arta.css","hash":"4dea73980726ac09d27927b8d38f6196644b6821","modified":1713061651313},{"_id":"themes/blank/source/css/partial/highlight/atelier-cave-light.css","hash":"135f95e783576f0d4721702c2af6b2c03204efc4","modified":1713061651313},{"_id":"themes/blank/source/css/partial/highlight/atelier-dune-dark.css","hash":"4bae8ae51072e23b81ee860671ac28a951620c57","modified":1713061651313},{"_id":"themes/blank/source/css/partial/highlight/atelier-cave-dark.css","hash":"9fb89fd8a8109a7c7c2450b1ebc55f5cee9d4a59","modified":1713061651313},{"_id":"themes/blank/source/css/partial/post.styl","hash":"36f3cf7feccedb17b86e0af730af1a711b0d0fb9","modified":1713061651321},{"_id":"themes/blank/source/css/partial/highlight/atelier-estuary-light.css","hash":"594a205e0c988db4ca461131573525185208587f","modified":1713061651313},{"_id":"themes/blank/source/css/partial/tag_plugin/tags.styl","hash":"6c8a2057a036e9fe2bf730d008de15d7fa11548e","modified":1713061651321},{"_id":"themes/blank/source/css/partial/highlight/atelier-forest-dark.css","hash":"931630149abdee4fdcc8469705af6a4205fe7fbf","modified":1713061651314},{"_id":"themes/blank/source/css/partial/highlight/atelier-heath-light.css","hash":"fb2f704e83309a0886a933b2f9c1efe25078f67e","modified":1713061651314},{"_id":"themes/blank/source/css/partial/highlight/atelier-estuary-dark.css","hash":"d9f91f0f440a838cc189eca4fe90dae85f1da6a0","modified":1713061651313},{"_id":"themes/blank/source/css/partial/highlight/atelier-heath-dark.css","hash":"0d079c2ab3a7c308186923a205a31fcfab3a7ce4","modified":1713061651314},{"_id":"themes/blank/source/css/partial/highlight/atelier-forest-light.css","hash":"c47a06662c4bba5b24d5982bf9280b0c65d7b8f0","modified":1713061651314},{"_id":"themes/blank/source/css/partial/highlight/androidstudio.css","hash":"4cf3233b038bbd5083471904025eb4446c08e983","modified":1713061651313},{"_id":"themes/blank/source/css/partial/highlight/atelier-dune-light.css","hash":"c9c95f9665bf6bc52fed3a2141fbe600fc6a25f8","modified":1713061651313},{"_id":"themes/blank/source/css/partial/highlight/atelier-lakeside-dark.css","hash":"8de3d9a1e817bdeb73c0234bf6672b4b381af8ac","modified":1713061651314},{"_id":"themes/blank/source/css/partial/highlight/atelier-savanna-light.css","hash":"42438235ccf575c31c80710b5fd2dff2973159c2","modified":1713061651314},{"_id":"themes/blank/source/css/partial/highlight/atelier-savanna-dark.css","hash":"62ae162ac812e39b3c739d7d9e8d06c10883d8a9","modified":1713061651314},{"_id":"themes/blank/source/css/partial/highlight/atelier-lakeside-light.css","hash":"3340cb6b25a35adfe377e7f24b8ee6729b8aaaf1","modified":1713061651314},{"_id":"themes/blank/source/css/partial/highlight/atom-one-dark.css","hash":"6d02e151baa92610cb313e54241178464a2f69be","modified":1713061651315},{"_id":"themes/blank/source/css/partial/highlight/atelier-seaside-dark.css","hash":"ef85351aaffa777ad7c4f2ecc107e429abe6de6a","modified":1713061651314},{"_id":"themes/blank/source/css/partial/highlight/atelier-plateau-light.css","hash":"e7d8ba7ba12a5ed46353e647a6f9eec54e039cf0","modified":1713061651314},{"_id":"themes/blank/source/css/partial/highlight/atelier-seaside-light.css","hash":"5f7d74ade8accb86da766ecc8616b29b2c365c8a","modified":1713061651314},{"_id":"themes/blank/source/css/partial/highlight/atom-one-dark-reasonable.css","hash":"95edd5336a61bf3676cbae6c918cf939379720cd","modified":1713061651315},{"_id":"themes/blank/source/css/partial/highlight/atelier-sulphurpool-light.css","hash":"04061783a48ee2f07225b7d46209a1fc222ca6d4","modified":1713061651315},{"_id":"themes/blank/source/css/partial/highlight/atom-one-light.css","hash":"c394de897c2807066e334b6b01e77d3a11a7217c","modified":1713061651315},{"_id":"themes/blank/source/css/partial/highlight/codepen-embed.css","hash":"c6bc815b975213b5ea318097e985dadd69bee815","modified":1713061651315},{"_id":"themes/blank/source/css/partial/highlight/brown-paper.css","hash":"2a17689adfeee7cf84362855c02a200be2d7456d","modified":1713061651315},{"_id":"themes/blank/source/css/partial/highlight/darcula.css","hash":"e1eb3d715fff66e16e045dadfe185c168413962f","modified":1713061651315},{"_id":"themes/blank/source/css/partial/highlight/atelier-sulphurpool-dark.css","hash":"aad41fad6f7e1c9624f31f17dbcad6f8c3489a78","modified":1713061651315},{"_id":"themes/blank/source/css/partial/highlight/color-brewer.css","hash":"bfe58ef6622dd52d03530eb1a39a754e9b819fa9","modified":1713061651315},{"_id":"themes/blank/source/css/partial/highlight/atelier-plateau-dark.css","hash":"9f941857191f79cec8bc2899181ce0aadfdcf3dd","modified":1713061651314},{"_id":"themes/blank/source/css/partial/highlight/dark.css","hash":"d64ff770effb3a4e7ac0e90874cca3c01d64d73f","modified":1713061651315},{"_id":"themes/blank/source/css/partial/highlight/github-gist.css","hash":"7a725cdf0a5a7fe6a4c89dfed0dd39eaee66cf28","modified":1713061651316},{"_id":"themes/blank/source/css/partial/highlight/docco.css","hash":"028e4784745ad867cb9d0cd217a4d136fcdc753b","modified":1713061651315},{"_id":"themes/blank/source/css/partial/highlight/far.css","hash":"a35ee476520d0ccb73b0db2f4fb1ef78eed128bc","modified":1713061651316},{"_id":"themes/blank/source/css/partial/highlight/github.css","hash":"b809480f9810347dfab9f59e5c2130ee79e38447","modified":1713061651316},{"_id":"themes/blank/source/css/partial/highlight/foundation.css","hash":"642fe4ccbb66961ae8c1b42a7b27c777a4e0e97e","modified":1713061651316},{"_id":"themes/blank/source/css/partial/highlight/dracula.css","hash":"c1f03c28c6c1175e1ab9ab791732496706781ad5","modified":1713061651316},{"_id":"themes/blank/source/css/partial/highlight/gml.css","hash":"c5b0d8ccb337a7083dbfefd16c156e5ea8865a09","modified":1713061651316},{"_id":"themes/blank/source/css/partial/highlight/gradient-dark.css","hash":"8f52973d429abfb6c40877e33bbcd4d376d75c8d","modified":1713061651316},{"_id":"themes/blank/source/css/partial/highlight/gruvbox-dark.css","hash":"8efce969f84bce90b94b2b314fb53ffd1e4c7b7f","modified":1713061651316},{"_id":"themes/blank/source/css/partial/highlight/grayscale.css","hash":"eeadee4c164d031af437a4efa328a46005295069","modified":1713061651316},{"_id":"themes/blank/source/css/partial/highlight/hopscotch.css","hash":"bb42de173ac5d1fa98a58a6106d492e5246bf37e","modified":1713061651316},{"_id":"themes/blank/source/css/partial/highlight/googlecode.css","hash":"d4249c5c0cb209198b1ae39070d4ac0494bd75d3","modified":1713061651316},{"_id":"themes/blank/source/css/partial/highlight/default.css","hash":"5e21e8bdb737a7aa21abaa308723f3b48d193f0f","modified":1713061651315},{"_id":"themes/blank/source/css/partial/highlight/hybrid.css","hash":"eda993d88b47ec034a4f6aed869659b1ea867026","modified":1713061651316},{"_id":"themes/blank/source/css/partial/highlight/kimbie.dark.css","hash":"2463bb13e10c97b94a639f7044b04d6b391a64bc","modified":1713061651317},{"_id":"themes/blank/source/css/partial/highlight/isbl-editor-dark.css","hash":"1fe15d663c00100aaf908f6188d2893a15524b86","modified":1713061651317},{"_id":"themes/blank/source/css/partial/highlight/gruvbox-light.css","hash":"6e7b8002c973f285c1e1aac467935c3c436eebef","modified":1713061651316},{"_id":"themes/blank/source/css/partial/highlight/lioshi.css","hash":"709ad976d4b7382c422e7bca97abfc31b04681ca","modified":1713061651317},{"_id":"themes/blank/source/css/partial/highlight/lightfair.css","hash":"eaebc4f9cfdadd9acb0751d0a47188da8ad1ac4d","modified":1713061651317},{"_id":"themes/blank/source/css/partial/highlight/kimbie.light.css","hash":"1a76eadba3c337fd4ccf6aa3b433c1b7668a6310","modified":1713061651317},{"_id":"themes/blank/source/css/partial/highlight/isbl-editor-light.css","hash":"0db445b5c066fc3d6f352d709f7d90bd3d7ba4f6","modified":1713061651317},{"_id":"themes/blank/source/css/partial/highlight/mono-blue.css","hash":"e973d7daa3c1b74af50c67f0b97785ae5685d439","modified":1713061651317},{"_id":"themes/blank/source/css/partial/highlight/monokai-sublime.css","hash":"6e2bad0d17a40791131d1c5e750301daed1835c5","modified":1713061651317},{"_id":"themes/blank/source/css/partial/highlight/magula.css","hash":"495d8f104ab5df5d0dcf65f53048d653d9dfadd8","modified":1713061651317},{"_id":"themes/blank/source/css/partial/highlight/monokai.css","hash":"936b3ae6c4c4950fea3198155b30b57a19b5c055","modified":1713061651317},{"_id":"themes/blank/source/css/partial/highlight/night-owl.css","hash":"1f0b40ea850d6859217a6b0d7f1ef34a30247179","modified":1713061651317},{"_id":"themes/blank/source/css/partial/highlight/nnfx.css","hash":"c5af08d34fc8ca4c67a11f331d695ad17583c033","modified":1713061651318},{"_id":"themes/blank/source/css/partial/highlight/nnfx-dark.css","hash":"588aae57cb53e3fb14c3083124b6926f145750a6","modified":1713061651318},{"_id":"themes/blank/source/css/partial/highlight/ocean.css","hash":"b00ee1c8c10e9ba41c4e486385c32a93c4797ea2","modified":1713061651318},{"_id":"themes/blank/source/css/partial/highlight/obsidian.css","hash":"2c0a9736f49e437632fd4a227905d9ed717580c1","modified":1713061651318},{"_id":"themes/blank/source/css/partial/highlight/nord.css","hash":"6a530eb93c40437100aa7439fd24e49c02df47d0","modified":1713061651318},{"_id":"themes/blank/source/css/partial/highlight/paraiso-light.css","hash":"04eb75b6505d05177417eb106e9a011b0aaad433","modified":1713061651318},{"_id":"themes/blank/source/css/partial/highlight/pojoaque.css","hash":"74122ef5f293a8090501f557cc0ef746a6baa650","modified":1713061651318},{"_id":"themes/blank/source/css/partial/highlight/purebasic.css","hash":"e0c272f695a8f2c5602a29fdda8886e74678cbdc","modified":1713061651319},{"_id":"themes/blank/source/css/partial/highlight/qtcreator_dark.css","hash":"6e218a94e5faad66c32027091538a136a0e288b5","modified":1713061651319},{"_id":"themes/blank/source/css/partial/highlight/rainbow.css","hash":"b4d98e83c87685c2c265c1fae28977f110447ec2","modified":1713061651319},{"_id":"themes/blank/source/css/partial/highlight/school-book.css","hash":"9714b72124d6938bbe618bf9b53dd9efed7d99f4","modified":1713061651319},{"_id":"themes/blank/source/css/partial/highlight/routeros.css","hash":"40c1ea8a64e8116fd198ba838f42e4b55523be22","modified":1713061651319},{"_id":"themes/blank/source/css/partial/highlight/railscasts.css","hash":"d234cb0568e7978c91b87dbf0fef95b236e1c7a5","modified":1713061651319},{"_id":"themes/blank/source/css/partial/highlight/qtcreator_light.css","hash":"2f1992092014efa68e89f348f5941f30f497ca60","modified":1713061651319},{"_id":"themes/blank/source/css/partial/highlight/sunburst.css","hash":"bf7115046b33b271912c1c39a78fd0390066e400","modified":1713061651320},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night-blue.css","hash":"43ab7bc48046b19ba1f4d8eaa687010993f875e0","modified":1713061651320},{"_id":"themes/blank/source/css/partial/highlight/shades-of-purple.css","hash":"bf790e81c1b8afacf5e4e5a5255293f74509aec0","modified":1713061651319},{"_id":"themes/blank/source/css/partial/highlight/solarized-light.css","hash":"aeced4941ebbf08aca54217ab23bed26688541c0","modified":1713061651319},{"_id":"themes/blank/source/css/partial/highlight/solarized-dark.css","hash":"ab2bc774a8e87a9ffe44dda605ac199d5886eb3f","modified":1713061651319},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night-eighties.css","hash":"8837ee6872ebd55426709ec09d853b0d9085d1e8","modified":1713061651320},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night-bright.css","hash":"e5f1bfe6a4687a0550c5e9e8e6dee84783a4704d","modified":1713061651320},{"_id":"themes/blank/source/css/partial/highlight/srcery.css","hash":"478313579d78c3b80e6a8c91b82037885bd145df","modified":1713061651319},{"_id":"themes/blank/source/css/partial/highlight/ir-black.css","hash":"390ed2b3efbac173d11951045bd90b9a044ea820","modified":1713061651317},{"_id":"themes/blank/source/css/partial/highlight/vs.css","hash":"f85a1da5246d6aadd3913e47c307c20022480226","modified":1713061651320},{"_id":"themes/blank/source/css/partial/highlight/tomorrow.css","hash":"899dfaf57008e078e28983a36c8cd4a4bbdff877","modified":1713061651320},{"_id":"themes/blank/source/css/partial/highlight/tomorrow-night.css","hash":"271b0b04244e1413ce2cd4ea490f8977829f4bfd","modified":1713061651320},{"_id":"themes/blank/source/css/partial/highlight/vs2015.css","hash":"e534297cb05adb51668933f9a3076f2489111e20","modified":1713061651320},{"_id":"themes/blank/source/css/partial/highlight/idea.css","hash":"b30e1d3146011d366e9b9b6e23c37a517e49dade","modified":1713061651317},{"_id":"themes/blank/source/css/partial/highlight/paraiso-dark.css","hash":"1cbd1d197fe2590e3961f5d69702831b3f94bea4","modified":1713061651318},{"_id":"themes/blank/source/css/partial/highlight/zenburn.css","hash":"161020d112780b3f5243ba8fc4e4599d88769fe4","modified":1713061651320},{"_id":"themes/blank/source/css/partial/highlight/xcode.css","hash":"09c36aa7f35c5959c2c1418deee2053b7dbf24d4","modified":1713061651320},{"_id":"themes/blank/source/css/partial/highlight/xt256.css","hash":"868a0c5befc4ee888692c65734f0326d14841fab","modified":1713061651320},{"_id":"themes/blank/source/img/wechat.jpg","hash":"4cd2f1b5c12750f66f32a1bf150dc755beb0ff58","modified":1713061651327},{"_id":"themes/blank/source/img/alipay.jpg","hash":"432585449232dd4fd89a5e4761332747ba5ecc73","modified":1713061651325},{"_id":"source/images/banner/ideal.jpeg","hash":"ba39422e2e97479b9d1e556ab448183327022278","modified":1680696827302},{"_id":"public/categories/index.html","hash":"0f514fa3766bd1d52020f971443d2fe230aae8c7","modified":1713316919067},{"_id":"public/404.html","hash":"0a464323194c3a14c38a6188a5e485b48b82bc5d","modified":1713316919067},{"_id":"public/tags/index.html","hash":"20a88916307024eadba564f885d5c86bd124c2c8","modified":1713316919067},{"_id":"public/2023/08/08/算法/状态转移方程中的状态究竟是指什么？/index.html","hash":"e8ac4023d0c5d41d46fa4fb56cc16a9b8f5cb8c9","modified":1713316919067},{"_id":"public/archives/index.html","hash":"a18b70ba1a872dc81e02e5471bf24ae921eecf86","modified":1713316919067},{"_id":"public/2023/04/27/随记/理想是一种咖啡/index.html","hash":"ffb995c2bddd826cac181fad4be499ce474fbbe4","modified":1713316919067},{"_id":"public/about/index.html","hash":"d42123d3fab00e483d3fdfb708a5c28302b69af6","modified":1713316919067},{"_id":"public/2023/04/17/诗/霉变/index.html","hash":"a8b85b517764612b738b899479a292c2cf6ef0bc","modified":1713316919067},{"_id":"public/2023/04/16/杂集/新诗研究/index.html","hash":"fa55a94ee2de3377e6323da2a8fcd4f2ca7454d1","modified":1713316919067},{"_id":"public/2023/04/16/杂集/特价机票研究/index.html","hash":"721826339a568ead4b68f369c2905e74e575cfb0","modified":1713316919067},{"_id":"public/2023/04/16/杂集/创意写作/index.html","hash":"27310c271c6fa3f9cccdad7a54f977eaa9f3948b","modified":1713316919067},{"_id":"public/2023/04/06/Vim&&Neovim/Vim极简命令手册/index.html","hash":"d9846cdf51fc0d0ee8c267486ee26825ed1caf39","modified":1713316919067},{"_id":"public/2023/04/06/诗/宝贝，来春天玩/index.html","hash":"5fbd2c03f8abc4521b24f8e09e0ea888399c9dd7","modified":1713316919067},{"_id":"public/2023/04/06/诗/我心中有/index.html","hash":"68bfca97ce963a2b7c52ef24a46ed145fbfca570","modified":1713316919067},{"_id":"public/2023/04/06/诗/站在阳光里/index.html","hash":"e645509b59d007d1e308a69212a041cd37ff36ec","modified":1713316919067},{"_id":"public/2023/04/06/诗/秋水/index.html","hash":"4a23308ab1dc4ad2f911d01d714054c93127200f","modified":1713316919067},{"_id":"public/2023/04/06/诗/镜子/index.html","hash":"b5996c70b9d7d13374d5dc99ca6ca3e602b79e9a","modified":1713316919067},{"_id":"public/2023/04/06/诗/野人/index.html","hash":"6a83e8c59f1d6b559671db34045de977c237cd60","modified":1713316919067},{"_id":"public/2023/04/06/诗/理想/index.html","hash":"1822aaf5755e98e02b9fc122443c247256df1b7c","modified":1713316919067},{"_id":"public/2023/04/06/Solidity/remix使用/index.html","hash":"f68b6fc458846399f62098b1c986cdf70c62f807","modified":1713316919067},{"_id":"public/2023/04/06/Solidity/remix本地安装/index.html","hash":"aef1935b4dc438ebdf63b497a433aee54a184539","modified":1713316919067},{"_id":"public/archives/page/2/index.html","hash":"8145e263ad25ffcfa70580727ed41ad2f6b98c3d","modified":1713316919067},{"_id":"public/archives/page/3/index.html","hash":"3f19ab24cdd7213c7c4abbf06b537fcaaa09da56","modified":1713316919067},{"_id":"public/archives/2023/index.html","hash":"375d0b49e24b3626f3f0bcc27074c026073d03a9","modified":1713316919067},{"_id":"public/archives/2023/page/2/index.html","hash":"e8a21e2b0d74c74a9456346159d36318e0b7ac99","modified":1713316919067},{"_id":"public/archives/2023/page/3/index.html","hash":"8562a5a8a8403efd6ba3c9a9009139764182570c","modified":1713316919067},{"_id":"public/archives/2023/04/index.html","hash":"fb5119a4de6c539251223bfa9f1e005ab41e935d","modified":1713316919067},{"_id":"public/archives/2023/04/page/2/index.html","hash":"bfef41af267809b59d5f97f1f3821190766ed62d","modified":1713316919067},{"_id":"public/archives/2023/04/page/3/index.html","hash":"372262b1d2bf913e36328e36b2b95d658eb5bf88","modified":1713316919067},{"_id":"public/archives/2023/08/index.html","hash":"8b42e8a692984d7d35578707cbcd7fbe9daf722f","modified":1713316919067},{"_id":"public/archives/2024/index.html","hash":"40d1a8fcf995de1d58007a091e384241e102b1a4","modified":1713316919067},{"_id":"public/archives/2024/04/index.html","hash":"ebc9ad49d4b8527a7dae6fe4f0c49cbb4b6366d9","modified":1713316919067},{"_id":"public/categories/Solidity/index.html","hash":"3637fe57e6de7efb5c2b1a4de938f1799449c75d","modified":1713316919067},{"_id":"public/categories/天文学/index.html","hash":"0ac5989914865a4f07adacf28d8fbc561f7768b8","modified":1713316919067},{"_id":"public/categories/Vim-NeoVim/index.html","hash":"00d724020a7c238d349fba48b3780a487f92a292","modified":1713316919067},{"_id":"public/categories/技术栈/index.html","hash":"04c0e8499c83dd88a08f0ab6e67710e47c488130","modified":1713316919067},{"_id":"public/categories/影音/index.html","hash":"0f0025a7de21cb7d86f42ab3d1d823b6f0350328","modified":1713316919067},{"_id":"public/categories/算法/index.html","hash":"11ddae73bee511e6fb6a80c8f113096623acda1b","modified":1713316919067},{"_id":"public/categories/诗/index.html","hash":"421dab7aab40f323cc025c9404e4dd9a695c5d0c","modified":1713316919067},{"_id":"public/categories/408/index.html","hash":"d75d21734f0fb24a4cd057defc2436dfc988c580","modified":1713316919067},{"_id":"public/categories/随记/index.html","hash":"fd35e193de21845b77a2c8521bfad46a066454ec","modified":1713316919067},{"_id":"public/categories/杂集/index.html","hash":"b21dc90faa4d2d4ba7f60e77db8c0240aad8e1c5","modified":1713316919067},{"_id":"public/2024/04/15/技术栈/Git教程/index.html","hash":"fef67045383a4879db04aa5e543444a8fc3c5b9a","modified":1713316919067},{"_id":"public/2023/04/17/Solidity/NFT合约开发/index.html","hash":"a1af1ee7873594880139e4506e27f35c65684cdd","modified":1713316919067},{"_id":"public/2023/04/16/408/众元教育网课 7天快速通过计算机网络期末考试/index.html","hash":"185b722422a7bce4ea350b3242910c841f111fe4","modified":1713316919067},{"_id":"public/2023/04/16/影音/河西走廊/index.html","hash":"e64bc05ae773928ddeea015b7e6968af5bfef117","modified":1713316919067},{"_id":"public/2023/04/16/天文学/夜观星空—特伦斯·迪金森/index.html","hash":"1a68d635a3418e52c380efde51bade0245b6cf11","modified":1713316919067},{"_id":"public/2023/04/16/杂集/观赏植物学/index.html","hash":"2ee03c719b324d85481e0535d4821098a9d45b53","modified":1713316919067},{"_id":"public/2023/04/16/杂集/为什么伟大不能被计划——肯尼斯·斯坦利,乔尔·雷曼/index.html","hash":"22d91f04bb577b6491190e2f9fc67171c46bdffe","modified":1713316919067},{"_id":"public/2023/04/16/杂集/我这辈子见过最好的学习方法  CLT认知负荷理论  汤质看本质/index.html","hash":"1cac5ea7163734f524ea2cf8a9dce68d50997f32","modified":1713316919067},{"_id":"public/2023/04/06/算法/一道题理解动态规划、BFS、DFS/index.html","hash":"f4013806af37ec28192f01828b4a145f54f809f4","modified":1713316919067},{"_id":"public/2023/04/06/算法/二分查找/index.html","hash":"ad789189ae63d3392f059306645edcedfff1f5f2","modified":1713316919067},{"_id":"public/2023/04/06/Solidity/极简Solidity语法总结/index.html","hash":"8613d9f46decdca7f4ba6304204c62d39ef7fd13","modified":1713316919067},{"_id":"public/index.html","hash":"76db70be40fb890b9f60d41ba89473b07ad35c71","modified":1713316919067},{"_id":"public/page/3/index.html","hash":"c8620c618b503a6cbcc995875994bb237fc7441e","modified":1713316919067},{"_id":"public/page/2/index.html","hash":"9477e4b84bc7fd05fbbda19d16c8de3328fcae36","modified":1713316919067},{"_id":"public/fonts/chinese-zodiac.woff2","hash":"96af181d987ecc97bf9f1fe12df883102bdc18a4","modified":1713316919067},{"_id":"public/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1713316919067},{"_id":"public/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1713316919067},{"_id":"public/img/loading.gif","hash":"dabf141cac0a42a8dbfb8844e9a8fb1d1f3fceab","modified":1713316919067},{"_id":"public/img/wechat.svg","hash":"5dfce94fa9238127ce7ef7fc2b1ff81fa26f98f4","modified":1713316919067},{"_id":"public/fonts/chinese-zodiac.woff","hash":"bf8137ae4b8a1e11bc5480ba5af2d44244d13f99","modified":1713316919067},{"_id":"public/CNAME","hash":"28acc25df7fc2b3fc373486a0e9476e8b85a94b6","modified":1713316919067},{"_id":"public/fonts/chinese-zodiac.eot","hash":"e3ea84e00f4fae1bbf157650ed09000299ea8c7b","modified":1713316919067},{"_id":"public/img/favicon.png","hash":"e7b85c747928f7fcb4b6097d4fd2b8f209b4ab18","modified":1713316919067},{"_id":"public/img/paypal.svg","hash":"eba1b04aea730018660587feaf8c8757176555d4","modified":1713316919067},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713316919067},{"_id":"public/js/firework.js","hash":"e9f29679ebb2f581ccadd39ef18c89cfc44e0710","modified":1713316919067},{"_id":"public/css/partial/dark.css","hash":"c217e67aebe0eb5b3e39c893a41822630343af6d","modified":1713316919067},{"_id":"public/js/local-search.js","hash":"7235f78007bde4ddc94911596128346364eefe3b","modified":1713316919067},{"_id":"public/js/todark.js","hash":"09d8e17071e73aeeff1957827c46e39c1fb050f5","modified":1713316919067},{"_id":"public/css/partial/header.css","hash":"84e3557546f3d654a11bde08f83c0ca59feac9d2","modified":1713316919067},{"_id":"public/css/partial/local-search.css","hash":"a7a352b4086aef84a7db40032db0e25017d51c67","modified":1713316919067},{"_id":"public/css/partial/highlight.css","hash":"8b41ab31476e1cf2ca195733d0cfb7316708be53","modified":1713316919067},{"_id":"public/css/partial/recent-posts.css","hash":"06471b0f4d18c702eb3a149ba9add2cf40ec069f","modified":1713316919067},{"_id":"public/css/partial/post.css","hash":"ef9c5e4eee46cc0582f2e5e7592f787ab92e8d84","modified":1713316919067},{"_id":"public/css/partial/media.css","hash":"61f59c34250aa5e3a76cb3d23d521ec688398214","modified":1713316919067},{"_id":"public/css/partial/reward.css","hash":"844196795eb7251f53b120b406dbd411b592800d","modified":1713316919067},{"_id":"public/css/partial/highlight/a11y-light.css","hash":"6b964117406a7ddab93d598e14441eb9f1f6929a","modified":1713316919067},{"_id":"public/css/partial/fonts.css","hash":"2718dc708c8a838af3c649e9737289467a1439d1","modified":1713316919067},{"_id":"public/css/partial/tag_plugin/tags.css","hash":"60995fb4af0be08a146d153862a90a3758cbfd7f","modified":1713316919067},{"_id":"public/css/partial/highlight/a11y-dark.css","hash":"367b81c201179eb6b9e8448be7d9afe900324d0e","modified":1713316919067},{"_id":"public/css/partial/highlight/agate.css","hash":"2c53b6f63569eb43a3d3c32b0d2920389e9ec397","modified":1713316919067},{"_id":"public/css/partial/tag_plugin/note.css","hash":"5029617b4fddf2c3e88686d15be13e3b5b283e9e","modified":1713316919067},{"_id":"public/js/script.js","hash":"7bdd6dcc73e8d756961a1dfc6d80700a7112c45a","modified":1713316919067},{"_id":"public/css/partial/highlight/arta.css","hash":"4dea73980726ac09d27927b8d38f6196644b6821","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-estuary-light.css","hash":"594a205e0c988db4ca461131573525185208587f","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-cave-light.css","hash":"135f95e783576f0d4721702c2af6b2c03204efc4","modified":1713316919067},{"_id":"public/css/partial/highlight/an-old-hope.css","hash":"b77c50f80832cd26919775863cc49e694e84b888","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-heath-dark.css","hash":"0d079c2ab3a7c308186923a205a31fcfab3a7ce4","modified":1713316919067},{"_id":"public/css/partial/highlight/arduino-light.css","hash":"a6b27a3e53fe933317531b6bba1ec0887508f0b6","modified":1713316919067},{"_id":"public/css/partial/highlight/ascetic.css","hash":"5e2ac91bc9c3852359ccf4ce7eefdea012a903ab","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-estuary-dark.css","hash":"d9f91f0f440a838cc189eca4fe90dae85f1da6a0","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-forest-light.css","hash":"c47a06662c4bba5b24d5982bf9280b0c65d7b8f0","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-lakeside-dark.css","hash":"8de3d9a1e817bdeb73c0234bf6672b4b381af8ac","modified":1713316919067},{"_id":"public/css/partial/highlight/androidstudio.css","hash":"4cf3233b038bbd5083471904025eb4446c08e983","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-dune-dark.css","hash":"4bae8ae51072e23b81ee860671ac28a951620c57","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-forest-dark.css","hash":"931630149abdee4fdcc8469705af6a4205fe7fbf","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-cave-dark.css","hash":"9fb89fd8a8109a7c7c2450b1ebc55f5cee9d4a59","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-dune-light.css","hash":"c9c95f9665bf6bc52fed3a2141fbe600fc6a25f8","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-lakeside-light.css","hash":"3340cb6b25a35adfe377e7f24b8ee6729b8aaaf1","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-savanna-light.css","hash":"42438235ccf575c31c80710b5fd2dff2973159c2","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-heath-light.css","hash":"fb2f704e83309a0886a933b2f9c1efe25078f67e","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-seaside-dark.css","hash":"ef85351aaffa777ad7c4f2ecc107e429abe6de6a","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-sulphurpool-light.css","hash":"04061783a48ee2f07225b7d46209a1fc222ca6d4","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-savanna-dark.css","hash":"62ae162ac812e39b3c739d7d9e8d06c10883d8a9","modified":1713316919067},{"_id":"public/css/partial/highlight/atom-one-dark-reasonable.css","hash":"95edd5336a61bf3676cbae6c918cf939379720cd","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-seaside-light.css","hash":"5f7d74ade8accb86da766ecc8616b29b2c365c8a","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-plateau-light.css","hash":"e7d8ba7ba12a5ed46353e647a6f9eec54e039cf0","modified":1713316919067},{"_id":"public/css/partial/highlight/atom-one-light.css","hash":"c394de897c2807066e334b6b01e77d3a11a7217c","modified":1713316919067},{"_id":"public/css/partial/highlight/codepen-embed.css","hash":"c6bc815b975213b5ea318097e985dadd69bee815","modified":1713316919067},{"_id":"public/css/partial/highlight/atom-one-dark.css","hash":"6d02e151baa92610cb313e54241178464a2f69be","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-sulphurpool-dark.css","hash":"aad41fad6f7e1c9624f31f17dbcad6f8c3489a78","modified":1713316919067},{"_id":"public/css/partial/highlight/docco.css","hash":"028e4784745ad867cb9d0cd217a4d136fcdc753b","modified":1713316919067},{"_id":"public/css/partial/highlight/dark.css","hash":"d64ff770effb3a4e7ac0e90874cca3c01d64d73f","modified":1713316919067},{"_id":"public/css/partial/highlight/brown-paper.css","hash":"2a17689adfeee7cf84362855c02a200be2d7456d","modified":1713316919067},{"_id":"public/css/partial/highlight/atelier-plateau-dark.css","hash":"9f941857191f79cec8bc2899181ce0aadfdcf3dd","modified":1713316919067},{"_id":"public/css/partial/highlight/far.css","hash":"a35ee476520d0ccb73b0db2f4fb1ef78eed128bc","modified":1713316919067},{"_id":"public/css/partial/highlight/darcula.css","hash":"e1eb3d715fff66e16e045dadfe185c168413962f","modified":1713316919067},{"_id":"public/css/partial/highlight/foundation.css","hash":"642fe4ccbb66961ae8c1b42a7b27c777a4e0e97e","modified":1713316919067},{"_id":"public/css/partial/highlight/color-brewer.css","hash":"bfe58ef6622dd52d03530eb1a39a754e9b819fa9","modified":1713316919067},{"_id":"public/css/partial/highlight/github.css","hash":"b809480f9810347dfab9f59e5c2130ee79e38447","modified":1713316919067},{"_id":"public/css/partial/highlight/gml.css","hash":"c5b0d8ccb337a7083dbfefd16c156e5ea8865a09","modified":1713316919067},{"_id":"public/css/partial/highlight/github-gist.css","hash":"7a725cdf0a5a7fe6a4c89dfed0dd39eaee66cf28","modified":1713316919067},{"_id":"public/css/partial/highlight/grayscale.css","hash":"eeadee4c164d031af437a4efa328a46005295069","modified":1713316919067},{"_id":"public/css/partial/highlight/googlecode.css","hash":"d4249c5c0cb209198b1ae39070d4ac0494bd75d3","modified":1713316919067},{"_id":"public/css/partial/highlight/dracula.css","hash":"c1f03c28c6c1175e1ab9ab791732496706781ad5","modified":1713316919067},{"_id":"public/css/partial/highlight/gradient-dark.css","hash":"8f52973d429abfb6c40877e33bbcd4d376d75c8d","modified":1713316919067},{"_id":"public/css/partial/highlight/gruvbox-dark.css","hash":"8efce969f84bce90b94b2b314fb53ffd1e4c7b7f","modified":1713316919067},{"_id":"public/css/partial/highlight/default.css","hash":"5e21e8bdb737a7aa21abaa308723f3b48d193f0f","modified":1713316919067},{"_id":"public/css/partial/highlight/gruvbox-light.css","hash":"6e7b8002c973f285c1e1aac467935c3c436eebef","modified":1713316919067},{"_id":"public/css/partial/highlight/isbl-editor-light.css","hash":"0db445b5c066fc3d6f352d709f7d90bd3d7ba4f6","modified":1713316919067},{"_id":"public/css/partial/highlight/hybrid.css","hash":"eda993d88b47ec034a4f6aed869659b1ea867026","modified":1713316919067},{"_id":"public/css/partial/highlight/lioshi.css","hash":"709ad976d4b7382c422e7bca97abfc31b04681ca","modified":1713316919067},{"_id":"public/css/partial/highlight/monokai.css","hash":"936b3ae6c4c4950fea3198155b30b57a19b5c055","modified":1713316919067},{"_id":"public/css/partial/highlight/mono-blue.css","hash":"e973d7daa3c1b74af50c67f0b97785ae5685d439","modified":1713316919067},{"_id":"public/css/partial/highlight/lightfair.css","hash":"eaebc4f9cfdadd9acb0751d0a47188da8ad1ac4d","modified":1713316919067},{"_id":"public/css/partial/highlight/isbl-editor-dark.css","hash":"1fe15d663c00100aaf908f6188d2893a15524b86","modified":1713316919067},{"_id":"public/css/partial/highlight/hopscotch.css","hash":"bb42de173ac5d1fa98a58a6106d492e5246bf37e","modified":1713316919067},{"_id":"public/css/partial/highlight/kimbie.light.css","hash":"1a76eadba3c337fd4ccf6aa3b433c1b7668a6310","modified":1713316919067},{"_id":"public/css/partial/highlight/nnfx.css","hash":"c5af08d34fc8ca4c67a11f331d695ad17583c033","modified":1713316919067},{"_id":"public/css/partial/highlight/night-owl.css","hash":"1f0b40ea850d6859217a6b0d7f1ef34a30247179","modified":1713316919067},{"_id":"public/css/partial/highlight/monokai-sublime.css","hash":"6e2bad0d17a40791131d1c5e750301daed1835c5","modified":1713316919067},{"_id":"public/css/partial/highlight/magula.css","hash":"495d8f104ab5df5d0dcf65f53048d653d9dfadd8","modified":1713316919067},{"_id":"public/css/partial/highlight/kimbie.dark.css","hash":"2463bb13e10c97b94a639f7044b04d6b391a64bc","modified":1713316919067},{"_id":"public/css/partial/highlight/nnfx-dark.css","hash":"588aae57cb53e3fb14c3083124b6926f145750a6","modified":1713316919067},{"_id":"public/css/partial/highlight/obsidian.css","hash":"2c0a9736f49e437632fd4a227905d9ed717580c1","modified":1713316919067},{"_id":"public/css/partial/highlight/paraiso-light.css","hash":"04eb75b6505d05177417eb106e9a011b0aaad433","modified":1713316919067},{"_id":"public/css/partial/highlight/pojoaque.css","hash":"74122ef5f293a8090501f557cc0ef746a6baa650","modified":1713316919067},{"_id":"public/css/partial/highlight/ocean.css","hash":"b00ee1c8c10e9ba41c4e486385c32a93c4797ea2","modified":1713316919067},{"_id":"public/css/partial/highlight/purebasic.css","hash":"e0c272f695a8f2c5602a29fdda8886e74678cbdc","modified":1713316919067},{"_id":"public/css/partial/highlight/nord.css","hash":"6a530eb93c40437100aa7439fd24e49c02df47d0","modified":1713316919067},{"_id":"public/css/partial/highlight/qtcreator_dark.css","hash":"6e218a94e5faad66c32027091538a136a0e288b5","modified":1713316919067},{"_id":"public/css/partial/highlight/rainbow.css","hash":"b4d98e83c87685c2c265c1fae28977f110447ec2","modified":1713316919067},{"_id":"public/css/partial/highlight/routeros.css","hash":"40c1ea8a64e8116fd198ba838f42e4b55523be22","modified":1713316919067},{"_id":"public/css/partial/highlight/shades-of-purple.css","hash":"bf790e81c1b8afacf5e4e5a5255293f74509aec0","modified":1713316919067},{"_id":"public/css/partial/highlight/school-book.css","hash":"9714b72124d6938bbe618bf9b53dd9efed7d99f4","modified":1713316919067},{"_id":"public/css/partial/highlight/qtcreator_light.css","hash":"2f1992092014efa68e89f348f5941f30f497ca60","modified":1713316919067},{"_id":"public/css/partial/highlight/solarized-light.css","hash":"aeced4941ebbf08aca54217ab23bed26688541c0","modified":1713316919067},{"_id":"public/css/partial/highlight/solarized-dark.css","hash":"ab2bc774a8e87a9ffe44dda605ac199d5886eb3f","modified":1713316919067},{"_id":"public/css/partial/highlight/sunburst.css","hash":"bf7115046b33b271912c1c39a78fd0390066e400","modified":1713316919067},{"_id":"public/css/partial/highlight/srcery.css","hash":"478313579d78c3b80e6a8c91b82037885bd145df","modified":1713316919067},{"_id":"public/css/partial/highlight/tomorrow-night-blue.css","hash":"43ab7bc48046b19ba1f4d8eaa687010993f875e0","modified":1713316919067},{"_id":"public/css/partial/highlight/tomorrow-night.css","hash":"271b0b04244e1413ce2cd4ea490f8977829f4bfd","modified":1713316919067},{"_id":"public/css/partial/highlight/railscasts.css","hash":"d234cb0568e7978c91b87dbf0fef95b236e1c7a5","modified":1713316919067},{"_id":"public/css/partial/highlight/tomorrow.css","hash":"899dfaf57008e078e28983a36c8cd4a4bbdff877","modified":1713316919067},{"_id":"public/css/partial/highlight/tomorrow-night-bright.css","hash":"e5f1bfe6a4687a0550c5e9e8e6dee84783a4704d","modified":1713316919067},{"_id":"public/css/partial/highlight/vs.css","hash":"f85a1da5246d6aadd3913e47c307c20022480226","modified":1713316919067},{"_id":"public/css/partial/highlight/tomorrow-night-eighties.css","hash":"8837ee6872ebd55426709ec09d853b0d9085d1e8","modified":1713316919067},{"_id":"public/css/partial/highlight/idea.css","hash":"b30e1d3146011d366e9b9b6e23c37a517e49dade","modified":1713316919067},{"_id":"public/css/partial/highlight/xt256.css","hash":"868a0c5befc4ee888692c65734f0326d14841fab","modified":1713316919067},{"_id":"public/css/partial/highlight/xcode.css","hash":"09c36aa7f35c5959c2c1418deee2053b7dbf24d4","modified":1713316919067},{"_id":"public/css/partial/highlight/ir-black.css","hash":"390ed2b3efbac173d11951045bd90b9a044ea820","modified":1713316919067},{"_id":"public/css/partial/highlight/zenburn.css","hash":"161020d112780b3f5243ba8fc4e4599d88769fe4","modified":1713316919067},{"_id":"public/css/partial/highlight/vs2015.css","hash":"e534297cb05adb51668933f9a3076f2489111e20","modified":1713316919067},{"_id":"public/css/partial/highlight/paraiso-dark.css","hash":"1cbd1d197fe2590e3961f5d69702831b3f94bea4","modified":1713316919067},{"_id":"public/css/style.css","hash":"f470a3c5e6911958243d3fd44807766c59dfa1d4","modified":1713316919067},{"_id":"public/img/wechat.jpg","hash":"4cd2f1b5c12750f66f32a1bf150dc755beb0ff58","modified":1713316919067},{"_id":"public/img/alipay.jpg","hash":"432585449232dd4fd89a5e4761332747ba5ecc73","modified":1713316919067},{"_id":"public/images/banner/ideal.jpeg","hash":"ba39422e2e97479b9d1e556ab448183327022278","modified":1713316919067}],"Category":[{"name":"Solidity","_id":"clv34nnr70006hk8z71y38ryj"},{"name":"天文学","_id":"clv34nnr8000ahk8zgf98fhib"},{"name":"Vim&NeoVim","_id":"clv34nnra000ihk8zfi9p1zji"},{"name":"技术栈","_id":"clv34nnrb000mhk8zfotieabl"},{"name":"影音","_id":"clv34nnrb000shk8zarsy4uxw"},{"name":"算法","_id":"clv34nnrc000whk8z2bt19rfr"},{"name":"诗","_id":"clv34nnrd0014hk8z0yg9bbrk"},{"name":"408","_id":"clv34nnrf001lhk8z8u15bcqz"},{"name":"随记","_id":"clv34nnrf001rhk8z4xzq1tg4"},{"name":"杂集","_id":"clv34nnrf001thk8zhsw3gvtm"}],"Data":[],"Page":[{"title":"分类","date":"2024-04-14T13:09:39.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2024-04-14 21:09:39\ntype: 'categories'\ncomments: false\n---\n","updated":"2024-04-14T13:10:38.332Z","path":"categories/index.html","layout":"page","_id":"clv34nnr30000hk8zcapk4ysx","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"about/index.html","raw":"","date":"2024-04-14T15:08:35.208Z","updated":"2024-04-14T15:08:35.208Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"clv34nnr50002hk8zba5lajl3","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2024-04-14T13:12:11.000Z","title":"归档","type":"archives","comments":0,"_content":"","source":"archives/index.md","raw":"---\ndate: 2024-04-14 21:12:11\ntitle: 归档\ntype: 'archives'\ncomments: false\n---\n","updated":"2024-04-14T13:12:39.376Z","path":"archives/index.html","layout":"page","_id":"clv34nnr60004hk8z6e6r9ij1","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2024-04-14T13:13:10.000Z","title":"标签","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ndate: 2024-04-14 21:13:10\ntitle: 标签\ntype: 'tags'\ncomments: false\n---\n","updated":"2024-04-14T13:13:33.922Z","path":"tags/index.html","layout":"page","_id":"clv34nnr70007hk8z4dttbefx","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"remix使用","date":"2023-04-06T12:10:38.000Z","auto_excerpt":"true","_content":"## **左侧栏**\n\n文件夹：\n\n1. contracts：放智能合约\n2. scripts：运行智能合约的脚本\n3. tests：跑智能合约单元测试用\n\nSOLIDITY COMPILER：编译器\n\n1. COMPILER选项：选择编译器版本\n2. LANGUAGE选项：选择计算机语言\n3. EVM VERSION选项：运行环境的选择，有许多版本，每个都行，随便选，一般选default默认版本\n4. Auto compile勾选：自动编译，修改代码之后会对新的代码自动进行编译\n5. Enable optimization勾选：优化代码，一般不用改，默认200，但是如果智能合约使用的人很多建议改大一点到1000以上，太小的话gas会很高\n6. Hide warnings勾选：是否隐藏警告，不用管\n7. Compile按钮：编译。在文件中选一个智能合约文件，然后点这个按钮可以对它编译\n\nDEPLOY&RUN TRANSACTIONS：智能合约所部署的环境的相关\n\n1. ENVIRONMENT选项：有很多环境可选，JavaScrupt VM是JS虚拟机，运行在本机内存，而Injected Web3就是运行在以太坊测试网，Web3 Provider是本地或者其他网络\n2. ACCOUNT选项：账户选项，默认会生成十几个账户，每个账户10个以太坊\n3. GAS LIMIT填空栏：气体限制选择，不知道有啥用\n4. Deplay按钮：部署合约的按钮，在部署之前，在按钮上面的CONTRACT上选择需要部署的合约，部署成功之后终端里会有一些信息\n","source":"_posts/Solidity/remix使用.md","raw":"---\ntitle: remix使用\ndate: 2023-04-06 20:10:38\ntags: \ncategories:\n  - - Solidity\nauto_excerpt: \"true\"\n---\n## **左侧栏**\n\n文件夹：\n\n1. contracts：放智能合约\n2. scripts：运行智能合约的脚本\n3. tests：跑智能合约单元测试用\n\nSOLIDITY COMPILER：编译器\n\n1. COMPILER选项：选择编译器版本\n2. LANGUAGE选项：选择计算机语言\n3. EVM VERSION选项：运行环境的选择，有许多版本，每个都行，随便选，一般选default默认版本\n4. Auto compile勾选：自动编译，修改代码之后会对新的代码自动进行编译\n5. Enable optimization勾选：优化代码，一般不用改，默认200，但是如果智能合约使用的人很多建议改大一点到1000以上，太小的话gas会很高\n6. Hide warnings勾选：是否隐藏警告，不用管\n7. Compile按钮：编译。在文件中选一个智能合约文件，然后点这个按钮可以对它编译\n\nDEPLOY&RUN TRANSACTIONS：智能合约所部署的环境的相关\n\n1. ENVIRONMENT选项：有很多环境可选，JavaScrupt VM是JS虚拟机，运行在本机内存，而Injected Web3就是运行在以太坊测试网，Web3 Provider是本地或者其他网络\n2. ACCOUNT选项：账户选项，默认会生成十几个账户，每个账户10个以太坊\n3. GAS LIMIT填空栏：气体限制选择，不知道有啥用\n4. Deplay按钮：部署合约的按钮，在部署之前，在按钮上面的CONTRACT上选择需要部署的合约，部署成功之后终端里会有一些信息\n","slug":"Solidity/remix使用","published":1,"updated":"2024-04-14T15:31:08.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnr40001hk8zd0qu281o","content":"<h2 id=\"左侧栏\"><a href=\"#左侧栏\" class=\"headerlink\" title=\"左侧栏\"></a><strong>左侧栏</strong></h2><p>文件夹：</p>\n<ol>\n<li>contracts：放智能合约</li>\n<li>scripts：运行智能合约的脚本</li>\n<li>tests：跑智能合约单元测试用</li>\n</ol>\n<p>SOLIDITY COMPILER：编译器</p>\n<ol>\n<li>COMPILER选项：选择编译器版本</li>\n<li>LANGUAGE选项：选择计算机语言</li>\n<li>EVM VERSION选项：运行环境的选择，有许多版本，每个都行，随便选，一般选default默认版本</li>\n<li>Auto compile勾选：自动编译，修改代码之后会对新的代码自动进行编译</li>\n<li>Enable optimization勾选：优化代码，一般不用改，默认200，但是如果智能合约使用的人很多建议改大一点到1000以上，太小的话gas会很高</li>\n<li>Hide warnings勾选：是否隐藏警告，不用管</li>\n<li>Compile按钮：编译。在文件中选一个智能合约文件，然后点这个按钮可以对它编译</li>\n</ol>\n<p>DEPLOY&amp;RUN TRANSACTIONS：智能合约所部署的环境的相关</p>\n<ol>\n<li>ENVIRONMENT选项：有很多环境可选，JavaScrupt VM是JS虚拟机，运行在本机内存，而Injected Web3就是运行在以太坊测试网，Web3 Provider是本地或者其他网络</li>\n<li>ACCOUNT选项：账户选项，默认会生成十几个账户，每个账户10个以太坊</li>\n<li>GAS LIMIT填空栏：气体限制选择，不知道有啥用</li>\n<li>Deplay按钮：部署合约的按钮，在部署之前，在按钮上面的CONTRACT上选择需要部署的合约，部署成功之后终端里会有一些信息</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"左侧栏\"><a href=\"#左侧栏\" class=\"headerlink\" title=\"左侧栏\"></a><strong>左侧栏</strong></h2><p>文件夹：</p>\n<ol>\n<li>contracts：放智能合约</li>\n<li>scripts：运行智能合约的脚本</li>\n<li>tests：跑智能合约单元测试用</li>\n</ol>\n<p>SOLIDITY COMPILER：编译器</p>\n<ol>\n<li>COMPILER选项：选择编译器版本</li>\n<li>LANGUAGE选项：选择计算机语言</li>\n<li>EVM VERSION选项：运行环境的选择，有许多版本，每个都行，随便选，一般选default默认版本</li>\n<li>Auto compile勾选：自动编译，修改代码之后会对新的代码自动进行编译</li>\n<li>Enable optimization勾选：优化代码，一般不用改，默认200，但是如果智能合约使用的人很多建议改大一点到1000以上，太小的话gas会很高</li>\n<li>Hide warnings勾选：是否隐藏警告，不用管</li>\n<li>Compile按钮：编译。在文件中选一个智能合约文件，然后点这个按钮可以对它编译</li>\n</ol>\n<p>DEPLOY&amp;RUN TRANSACTIONS：智能合约所部署的环境的相关</p>\n<ol>\n<li>ENVIRONMENT选项：有很多环境可选，JavaScrupt VM是JS虚拟机，运行在本机内存，而Injected Web3就是运行在以太坊测试网，Web3 Provider是本地或者其他网络</li>\n<li>ACCOUNT选项：账户选项，默认会生成十几个账户，每个账户10个以太坊</li>\n<li>GAS LIMIT填空栏：气体限制选择，不知道有啥用</li>\n<li>Deplay按钮：部署合约的按钮，在部署之前，在按钮上面的CONTRACT上选择需要部署的合约，部署成功之后终端里会有一些信息</li>\n</ol>\n"},{"title":"夜观星空—特伦斯·迪金森","date":"2023-04-15T18:46:46.000Z","auto_excerpt":"true","_content":"\n  ## 前言和概述\n\n 本文是《夜观星空》的读书笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n书评：\n这篇笔记笔记比较早，大概是六七年前（大约17到19年）完成的，那时候的读书笔记还很稚嫩，不成体统。\n\n具体到本书，本质上是一本畅销书，回顾再看盛名难副。不过，好在天文爱好者算是一个经验爱好，因此作者传授了一些有用的经验，比如如何用手掌估算天球的角距，如何确定望远镜中一颗具体的恒星，等等，也因此，本书不用全部读完，最后，本书附赠的插图颇精美。\n\n总之，比硬把书名水成一本书的《为什么伟大不能被计划》干一点。\n\n\n---\n\n**第1章 发现宇宙**\n\n\n***\n\n**第2章 宇宙的层次**\n\n\n***\n\n**第3章 后院天文学**\n\n<u>天空中的运动：</u>\n\n1. 因为周日运动也就是地球自转，恒星每晚绕地轴旋转，方向可描述为自东向西，【东西方向并不大概而模糊，而是非常清晰以地轴建立的坐标系，原理是地球绕地轴逆时针旋转=地球上的小人自西向东移动=星空自动向西移动】，太阳视作大恒星。\n\n1. 因为周年运动也就是地球公转，春夏秋冬的星空不一样，模型上，地球绕太阳做椭圆运动，椭圆长轴为上下方向且太阳在上面的焦点位置，地球的运动方向逆时针，其中，地球在右上左下时的位置，分别对应春夏秋冬。\n\n![7641124deaa5057430ca13c4c575c98e.png](https://i.ibb.co/nBrxQXb/IMG-1.png)\n\n1. 如果愿意花时间其实是可以观测到邻近季节的部分【具体原理可以按上面写的模型推演一下目视由自转而产生的变化情况】。\n\n<u>天空中的路标——北斗七星：</u>\n\n1. 北斗星命名：从勺柄依次是摇光，开阳，玉衡，天权，天玑，天璇，天枢。\n\n1. 对中北半球观测者北斗七星全年可见。\n\n2. 勺子指北原理：天璇向天枢方向永北。\n\n![dfb1fcc739e6d24494bb633d0639931e.png](https://i.ibb.co/Zz57hfp/IMG-2.png)\n\n3. 北斗七星的互相指向：\n\n1. 天璇->天枢=北极星。\n\n2. 玑->天权=织女星。\n\n3. 天权-天玑>=轩辕十四。\n\n4. 天权->天璇=北河二。\n\n5. 天权->天枢=五车二。\n\n6. 玉衡->北极星=仙后座。\n\n![b4c4505357ddeed50346c8914baf2031.png](https://i.ibb.co/j60ykWT/IMG-3.png)\n\n<u>测量星空：</u>\n\n1. 北斗七星角度数据：![52d6477e6d721ff86e63467a5c0cb08a.png](https://i.ibb.co/71KHC51/IMG-4.png)\n\n<u>恒星亮度：</u>\n\n1. 最亮的恒星是天狼星-1等。\n\n2. 行星中，木星-3等，金星-4等，火星+2~-3等。\n\n<u>星座和星星的名字：</u>\n\n1. 星座名称大部分源自古希腊，少部分源自17~18世纪【大航海需要】，国际天文学联合会1930年规定全天88星座，四分之一的南天星座中北纬永不可见。\n\n2. 星座源自黄道十二宫，以春分为始分别是双鱼，白羊，金牛，双子，巨蟹，狮子，室女，天秤，天蝎，人马，摩羯，宝瓶【鱼羊牛，子蟹狮，女秤蝎，马摩瓶】。\n\n***\n\n**第4章 北半球星空**\n\n<u>全天星图：</u>\n\n1. 星图一般最多3-4等，5-6等加进来就会很复杂。\n\n<u>黄道和黄道星座：</u>\n\n1. 太阳系行星的共面性是保持50亿年前太阳系前身的圆盘云团形状所致。\n\n2. 占星术说的xx座实际上应该说是xx宫，因为大多数黄道星座在公元前2600年前由游牧民族精心挑选出来描述星空位置，那时候的黄道星座大概与黄道星宫重合，现在由于地轴变化，星座相对星宫已经整体移动了。\n\n***\n\n**第5章 观星器材**\n\n<u>双筒望远镜：</u>\n\n1. 规格是放大倍率×主镜直径，直径单位是毫米。\n\n2. 双筒的极限大概是九等星。\n\n<u>天文望远镜：</u>\n\n1. 30倍看土星环。\n\n<u>天文望远镜的类型：</u>\n\n1. 四类主要业余天文望远镜：折射式，牛反式，施密特-卡塞格林式，马克苏托夫-卡塞格林式。\n\n1. 折射式：折射式是小型的，分为消色差和复消色差两种，消色差型的缺陷是口径如果大于100毫米月球边缘会紫。\n\n2. 牛反式：牛反式的优点是目镜位置开在望远镜身上所以不用昂头，牛反更容易制造所以同样成本可以做得更大。\n\n3. 施密特-卡塞格林式：结合了折射和牛反的特点，结构紧凑可以小型化。\n\n4. 马克苏托夫-卡塞格林式：是施密特-卡塞格林式的近亲，但未普及，可以做得很便携。\n\n1. 焦比=主透镜焦距/主透镜直径，也就是那个f/几的参数。\n\n2. 焦比小的望远镜用在器材摄影时比焦比大的亮成像亮度高。\n\n3. 视宁度是指图像保持稳定不变的程度，主要受大气湍流影响，而湍流受风，大气的温差，当地地形，望远镜周围气流的影响。\n\n4. 对望远镜而言，放大能力受集光能力和分辨能力两者综合影响，其中分辨能力受光和光学系统影响。\n\n<u>附件：</u>\n\n1. 天文望远镜的可选附件有：太阳滤光片【削弱太阳】，正像棱镜【把上下甚至加上左右颠倒的图像正过来，双筒中会封装这个东西】，目镜滤光片【有很多种，比如月球滤光片可以削弱月球】，星云滤光片【可削弱城市照明，看星云舒服】，缩焦器【施密特-卡塞格林式的配件，增大视场】，防露罩【两种卡塞格林式的前透镜都会产生露水，防露罩分加长镜筒的治标方法和加电热丝的治本方法】，相机的相关装备。\n\n<u>目镜：</u>\n\n1. 目镜是可以换的。\n\n1. 惠更斯目镜和冉斯登目镜便宜又垃圾。\n\n2. 凯尔纳目镜综合及格，价格适中，视场较小。\n\n3. RKE目镜为凯尔纳目镜的改良，图像更好，视场增大。\n\n2. 无畸变目镜可稍增大视场，消除几乎所有光学色差。\n\n3. 普勒斯尔目镜吊打以上四种，比无畸变目镜的视场大，成像还非常锐利。\n\n4. 尔弗利目镜五片镜片，广泛用于军事光学系统，今天被大视场目镜取代。\n\n5. 大视场目镜六到七片镜片，昂贵但牛逼。\n\n6. 纳格勒目镜是一个叫纳格勒的系列，至今仍是最好的中高倍率目镜之一。\n\n7. 超广角目镜类似纳格勒目镜，价格昂贵【200美刀+】，超大视场，成像锐利，人们形容像从宇宙飞船舷窗观察，缺点是重，很难调整望远镜整体平衡。\n\n8. 巴罗透镜是在望远镜的两端都加装透镜以提升目镜放大倍率。\n\n1. 目镜放大率=望远镜焦距/目镜焦距。\n\n2. 目视间隙这个参数主要是戴眼镜的人受影响。\n\n3. 目镜可以转售，所有望远镜可以通用，是长期资产，多投入绝对没错。\n\n***\n\n**第6章 探索深空**\n\n<u>双星：</u>\n\n1. 银河系中有50%~80%的星系为聚星系统【大于两颗恒星】。\n\n2. 双星系统两颗恒星的角距，大概相当于月球环形山的角距那么大。\n\n3. 肉眼裸视的角距分辨极限是6\\`。\n\n4. 双星其实只是指两个恒星靠得很近，细分上，纯粹巧合重合在一起叫光学双星，靠引力实打实在一起应该叫双星系统。\n\n5. 人肉眼的星等精确度可以到0.1星等。\n\n<u>夜视能力：</u>\n\n1. 黑暗天空可见约3000恒星，光照一般的郊区可见约200恒星。\n\n<u>变星：</u>\n\n1. 变星是因为恒星本身处于不稳定状态所致。\n\n2. 肉眼有十几个变星可见，天望有几千个变星可见。\n\n3. 变星太多天文台没时间管，有变形观测者群体，向相关协会报告亮度估计，协会负责公布观测结果和转发给大型天文台。\n\n4. 变星分食双星【两星交替互挡】，长周期变星【其实是红巨星，亮度变化大，周期不均匀但长，大概是星期为单位吧】，不规则变星【亮暗起来没规则】，新星【白矮星吸同伴，表面爆炸所致，这个过程会反复】，超新星【大质量恒星热核聚变缺乏燃料停止，恒星坍缩势能转化的热量炸掉星球】。\n\n<u>星团：</u>\n\n1. 靠引力维系的几十到几千个恒星组成的团。\n\n<u>星云：</u>\n\n1. 银河系的旋臂之间是气体和尘埃，称星云。\n\n2. 大部分星云是黑色，挡住了非常多的星光，星云被恒星照亮的时候会很壮观。\n\n3. 星云是恒星诞生之前的形态。\n\n<u>球状星团：</u>\n\n1. 大型的星团，像银河系的卫星一样，几百万恒星。\n\n<u>星系：</u>\n\n1. 星系分椭圆星系和旋涡星系，前者球形，后者银河系状。\n\n<u>天体的名称：</u>\n\n1. 最开始是拜尔用小写希腊字母为星座的恒星编号，后来弗拉姆斯蒂德用数字对星座中的恒星标号，但并没有取代拜尔系统只是更全，弗拉姆斯蒂德系统没概括的就用天文台对恒星的位置描述，这个位置怎么描述具体不太清楚。\n\n2. 深空天体最早是梅西耶星云星团表，总数109。\n\n***\n\n**第7章 行星**\n\n<u>城市天文学：</u>\n\n1. 八大行星除了地球本身，只有天王星和海外星肉眼不能看。\n\n2. 水星难看，轨道太靠近太阳每年只有几个礼拜的日落日出能看。金星一年有几个月会在日落日出能看。\n\n3. 水星和金星因为比地球更靠近太阳，所以活动范围在黄道上表现为绕太阳的圈。\n\n4. 行星的亮度受和地球的相对距离影响，对火星而言，距离地球会变化四倍，所以亮度也会变化很大。\n\n5. 火星的铁锈色是火星上淡红色的沙漠。\n\n6. 木星亮度非常稳定，因为公转周期长，在每个黄道星座中停留约一年，因此一般整晚可见，土星同理，每个黄道星座停留约两年。\n\n7. 星星会闪是因为大气湍流，而行星视面积大不太受影响。\n\n8. 城市观测其实由于城市热量，如果大气平静的话，视宁度将极端稳定，因此可说更好。\n\n<u>水星：</u>\n\n1. 水星有盈亏和月球盈亏不太一样，作为行星水星永远被照亮一半，而如果日水地成直线，由于太阳做了水星的背景，那么水星将给我们看到整个暗面，因此全亏，之后模型就自己想象吧。\n\n<u>小行星带：</u>\n\n1. 小行星带在火星和木星之间，虽然已定轨1.4W颗但其实相互间隔很大。\n\n2. 小行星质量排名：谷神星【一颗顶全体小行星带总和的三分之一】，智神星，灶神星，健神星。\n\n3. 只有灶神星能勉强肉眼直视到。\n\n4. 有两种形成模型，第一是此处有一颗形成过程被中断的行星，第二是其实已形成，但之后解体了，一般认为第一种可能性比较大，且这个中断因素主要是木星的引力干扰。\n\n<u>木星：</u>\n\n1. 木星转速太快，整个星球都椭掉，上下压缩7%。\n\n<u>土星：</u>\n\n1. 土星环的宽度是地月距离的三分之二，厚度不足1km，元素主要是冰和石，颗粒大小从沙子到房子，但角速度非常统一极少碰撞。\n\n<u>带外行星和矮行星：</u>\n\n1. 天王星也有暗环。\n\n***\n\n**第8章 月球和太阳**\n\n观测太阳\n\n1. 太阳的强磁场在变化，集中冲出的地方会让物质流动受限因而温度较低产生黑子，普通黑子有地球那么大，大黑子有几十个地球那么大，生命从几天到几个月不等。\n\n2. 黑子周=11年，太阳黑子遵循这个变化周期，且是上升4年下降7年【上升斜率比下降斜率大】，机制未知，最近的极小在2008年。\n\n月径幻觉\n\n1. 月径幻觉就是月球在地平线上比在头顶大。\n\n2. 这个问题现在还没有准确解释，可能是遥远地平线和直视或仰视有别两个因素结合产生的心理现象。\n\n***\n\n**第9章 日食和月食**\n\n<u>月食：</u>\n\n1. 铁锈色月食是因为地球影子受当时地球大气成分影响。\n\n***\n\n**第10章 彗星、流星和极光**\n\n<u>著名的和非著名的彗星</u>\n\n1. 彗星是天王星和海王星形成时遗留的巨型冰山，总数几十亿颗，在冥王星轨道外绕太阳公转周期几百或几千年，极少数受海王星或其他莫名天体引力影响走上太阳系的较内轨道。\n\n2. 彗星接近太阳的时候会疯狂蒸发形成几个地球大的气团，太阳光压+太阳风会把气团吹出两条彗尾，白色成分是尘埃，蓝色的成分是等离子体，彗尾整体长度几百万到上亿km但总物质不到上海市下两厘米雪，整体几近真空。\n\n3. 彗星的核心很小，包裹核心的叫彗发【意思是头发】。\n\n3. 著名彗星：\n\n1. 哈雷彗星76年周期每个人基本都能看一次，下一次2061年。\n\n2. 舒梅克-列维9号彗星在1993年被木星俘获碎成21块撞上去了。\n\n3. 百武彗星1996年靠近距离成为非常亮的彗星。\n\n4. 海尔-波普彗星1997年是二十世纪最后一颗。\n\n5. 威斯特彗星1976年比海尔-波普彗星还亮但是只出现几天且只能在破晓时看而不为人知。\n\n6. 科胡特克彗星在1974年由于实际亮度不到预测的十分之一而臭名昭著，1982年的奥斯汀彗星也是同理。\n\n7. 1970年的贝内特彗星，1965年的池谷-关氏彗星，1957年的姆尔特斯和阿连德-罗兰彗星，也因为亮很出名。\n\n<u>流星</u>\n\n1. 流星小到可怜，如果在手里一巴掌能抓几千个，1秒内蒸发。\n\n2. 地球每天落下至少400吨宇宙物质，小的是尘埃飘到地面，大的是流星燃烧殆尽，更大的是陨星砸到地上。\n\n3. 流星不是流星体，流星体是指太空中还没落下来的存在，流星已经落下来烧了。\n\n4. 流星雨是大群流星物质，已知的可预测流星雨是因为那都是彗星碎片，这些碎片是彗星蒸发过程中抛出的密度较大的冰【蒸发过程有些大冰偶尔抛出来怎么了，想象一下你煮汤的锅】，大流星雨一分钟一颗但大多没这水平。\n\n5. 流星峰值时间永远在1点到黎明，因为此刻观察者会被地球自转转到面朝公转轨道的方向上令流星迎面扑来。\n\n6. 每年的主要可预测流星雨和日期：\n\n1. 象限仪座：1月3日极大，小时流量10~50。\n\n2. 天琴座：4月21日，5~25。\n\n3. 宝瓶座η：5月4日，5~20。\n\n4. 宝瓶座δ南：7月27日~7月29日，10~20。\n\n4. 英仙座：8月12日，30~70。\n\n5. 猎户座：10月20日，10~30。\n\n6. 狮子座：11月16日，10~20。\n\n7. 双子座：12月13日，30~80。\n\n<u>极光</u>\n\n1. 太阳风被地磁偏转，沿磁力线汇聚到高纬度，进入大气层轰击大气元素。\n\n2. 氧元素绿或红色，氮元素蓝色。\n\n3. 很明显如果太阳活动剧烈则极光会增多，比如黑子多的年份。\n\n4. 极光可以听见声音，噼啪或嘶嘶，报告虽多但存疑。\n\n***\n\n**第11章 天文摄影**\n\nnull\n\n***\n\n**第12章 南半球星空**\n\nnull\n\n***\n\n**第13章 资源**\n\nnull","source":"_posts/天文学/夜观星空—特伦斯·迪金森.md","raw":"---\ntitle: 夜观星空—特伦斯·迪金森\ndate: 2023-04-16 02:46:46\ntags: \ncategories:\n  - - 天文学\nauto_excerpt: \"true\"\n---\n\n  ## 前言和概述\n\n 本文是《夜观星空》的读书笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n书评：\n这篇笔记笔记比较早，大概是六七年前（大约17到19年）完成的，那时候的读书笔记还很稚嫩，不成体统。\n\n具体到本书，本质上是一本畅销书，回顾再看盛名难副。不过，好在天文爱好者算是一个经验爱好，因此作者传授了一些有用的经验，比如如何用手掌估算天球的角距，如何确定望远镜中一颗具体的恒星，等等，也因此，本书不用全部读完，最后，本书附赠的插图颇精美。\n\n总之，比硬把书名水成一本书的《为什么伟大不能被计划》干一点。\n\n\n---\n\n**第1章 发现宇宙**\n\n\n***\n\n**第2章 宇宙的层次**\n\n\n***\n\n**第3章 后院天文学**\n\n<u>天空中的运动：</u>\n\n1. 因为周日运动也就是地球自转，恒星每晚绕地轴旋转，方向可描述为自东向西，【东西方向并不大概而模糊，而是非常清晰以地轴建立的坐标系，原理是地球绕地轴逆时针旋转=地球上的小人自西向东移动=星空自动向西移动】，太阳视作大恒星。\n\n1. 因为周年运动也就是地球公转，春夏秋冬的星空不一样，模型上，地球绕太阳做椭圆运动，椭圆长轴为上下方向且太阳在上面的焦点位置，地球的运动方向逆时针，其中，地球在右上左下时的位置，分别对应春夏秋冬。\n\n![7641124deaa5057430ca13c4c575c98e.png](https://i.ibb.co/nBrxQXb/IMG-1.png)\n\n1. 如果愿意花时间其实是可以观测到邻近季节的部分【具体原理可以按上面写的模型推演一下目视由自转而产生的变化情况】。\n\n<u>天空中的路标——北斗七星：</u>\n\n1. 北斗星命名：从勺柄依次是摇光，开阳，玉衡，天权，天玑，天璇，天枢。\n\n1. 对中北半球观测者北斗七星全年可见。\n\n2. 勺子指北原理：天璇向天枢方向永北。\n\n![dfb1fcc739e6d24494bb633d0639931e.png](https://i.ibb.co/Zz57hfp/IMG-2.png)\n\n3. 北斗七星的互相指向：\n\n1. 天璇->天枢=北极星。\n\n2. 玑->天权=织女星。\n\n3. 天权-天玑>=轩辕十四。\n\n4. 天权->天璇=北河二。\n\n5. 天权->天枢=五车二。\n\n6. 玉衡->北极星=仙后座。\n\n![b4c4505357ddeed50346c8914baf2031.png](https://i.ibb.co/j60ykWT/IMG-3.png)\n\n<u>测量星空：</u>\n\n1. 北斗七星角度数据：![52d6477e6d721ff86e63467a5c0cb08a.png](https://i.ibb.co/71KHC51/IMG-4.png)\n\n<u>恒星亮度：</u>\n\n1. 最亮的恒星是天狼星-1等。\n\n2. 行星中，木星-3等，金星-4等，火星+2~-3等。\n\n<u>星座和星星的名字：</u>\n\n1. 星座名称大部分源自古希腊，少部分源自17~18世纪【大航海需要】，国际天文学联合会1930年规定全天88星座，四分之一的南天星座中北纬永不可见。\n\n2. 星座源自黄道十二宫，以春分为始分别是双鱼，白羊，金牛，双子，巨蟹，狮子，室女，天秤，天蝎，人马，摩羯，宝瓶【鱼羊牛，子蟹狮，女秤蝎，马摩瓶】。\n\n***\n\n**第4章 北半球星空**\n\n<u>全天星图：</u>\n\n1. 星图一般最多3-4等，5-6等加进来就会很复杂。\n\n<u>黄道和黄道星座：</u>\n\n1. 太阳系行星的共面性是保持50亿年前太阳系前身的圆盘云团形状所致。\n\n2. 占星术说的xx座实际上应该说是xx宫，因为大多数黄道星座在公元前2600年前由游牧民族精心挑选出来描述星空位置，那时候的黄道星座大概与黄道星宫重合，现在由于地轴变化，星座相对星宫已经整体移动了。\n\n***\n\n**第5章 观星器材**\n\n<u>双筒望远镜：</u>\n\n1. 规格是放大倍率×主镜直径，直径单位是毫米。\n\n2. 双筒的极限大概是九等星。\n\n<u>天文望远镜：</u>\n\n1. 30倍看土星环。\n\n<u>天文望远镜的类型：</u>\n\n1. 四类主要业余天文望远镜：折射式，牛反式，施密特-卡塞格林式，马克苏托夫-卡塞格林式。\n\n1. 折射式：折射式是小型的，分为消色差和复消色差两种，消色差型的缺陷是口径如果大于100毫米月球边缘会紫。\n\n2. 牛反式：牛反式的优点是目镜位置开在望远镜身上所以不用昂头，牛反更容易制造所以同样成本可以做得更大。\n\n3. 施密特-卡塞格林式：结合了折射和牛反的特点，结构紧凑可以小型化。\n\n4. 马克苏托夫-卡塞格林式：是施密特-卡塞格林式的近亲，但未普及，可以做得很便携。\n\n1. 焦比=主透镜焦距/主透镜直径，也就是那个f/几的参数。\n\n2. 焦比小的望远镜用在器材摄影时比焦比大的亮成像亮度高。\n\n3. 视宁度是指图像保持稳定不变的程度，主要受大气湍流影响，而湍流受风，大气的温差，当地地形，望远镜周围气流的影响。\n\n4. 对望远镜而言，放大能力受集光能力和分辨能力两者综合影响，其中分辨能力受光和光学系统影响。\n\n<u>附件：</u>\n\n1. 天文望远镜的可选附件有：太阳滤光片【削弱太阳】，正像棱镜【把上下甚至加上左右颠倒的图像正过来，双筒中会封装这个东西】，目镜滤光片【有很多种，比如月球滤光片可以削弱月球】，星云滤光片【可削弱城市照明，看星云舒服】，缩焦器【施密特-卡塞格林式的配件，增大视场】，防露罩【两种卡塞格林式的前透镜都会产生露水，防露罩分加长镜筒的治标方法和加电热丝的治本方法】，相机的相关装备。\n\n<u>目镜：</u>\n\n1. 目镜是可以换的。\n\n1. 惠更斯目镜和冉斯登目镜便宜又垃圾。\n\n2. 凯尔纳目镜综合及格，价格适中，视场较小。\n\n3. RKE目镜为凯尔纳目镜的改良，图像更好，视场增大。\n\n2. 无畸变目镜可稍增大视场，消除几乎所有光学色差。\n\n3. 普勒斯尔目镜吊打以上四种，比无畸变目镜的视场大，成像还非常锐利。\n\n4. 尔弗利目镜五片镜片，广泛用于军事光学系统，今天被大视场目镜取代。\n\n5. 大视场目镜六到七片镜片，昂贵但牛逼。\n\n6. 纳格勒目镜是一个叫纳格勒的系列，至今仍是最好的中高倍率目镜之一。\n\n7. 超广角目镜类似纳格勒目镜，价格昂贵【200美刀+】，超大视场，成像锐利，人们形容像从宇宙飞船舷窗观察，缺点是重，很难调整望远镜整体平衡。\n\n8. 巴罗透镜是在望远镜的两端都加装透镜以提升目镜放大倍率。\n\n1. 目镜放大率=望远镜焦距/目镜焦距。\n\n2. 目视间隙这个参数主要是戴眼镜的人受影响。\n\n3. 目镜可以转售，所有望远镜可以通用，是长期资产，多投入绝对没错。\n\n***\n\n**第6章 探索深空**\n\n<u>双星：</u>\n\n1. 银河系中有50%~80%的星系为聚星系统【大于两颗恒星】。\n\n2. 双星系统两颗恒星的角距，大概相当于月球环形山的角距那么大。\n\n3. 肉眼裸视的角距分辨极限是6\\`。\n\n4. 双星其实只是指两个恒星靠得很近，细分上，纯粹巧合重合在一起叫光学双星，靠引力实打实在一起应该叫双星系统。\n\n5. 人肉眼的星等精确度可以到0.1星等。\n\n<u>夜视能力：</u>\n\n1. 黑暗天空可见约3000恒星，光照一般的郊区可见约200恒星。\n\n<u>变星：</u>\n\n1. 变星是因为恒星本身处于不稳定状态所致。\n\n2. 肉眼有十几个变星可见，天望有几千个变星可见。\n\n3. 变星太多天文台没时间管，有变形观测者群体，向相关协会报告亮度估计，协会负责公布观测结果和转发给大型天文台。\n\n4. 变星分食双星【两星交替互挡】，长周期变星【其实是红巨星，亮度变化大，周期不均匀但长，大概是星期为单位吧】，不规则变星【亮暗起来没规则】，新星【白矮星吸同伴，表面爆炸所致，这个过程会反复】，超新星【大质量恒星热核聚变缺乏燃料停止，恒星坍缩势能转化的热量炸掉星球】。\n\n<u>星团：</u>\n\n1. 靠引力维系的几十到几千个恒星组成的团。\n\n<u>星云：</u>\n\n1. 银河系的旋臂之间是气体和尘埃，称星云。\n\n2. 大部分星云是黑色，挡住了非常多的星光，星云被恒星照亮的时候会很壮观。\n\n3. 星云是恒星诞生之前的形态。\n\n<u>球状星团：</u>\n\n1. 大型的星团，像银河系的卫星一样，几百万恒星。\n\n<u>星系：</u>\n\n1. 星系分椭圆星系和旋涡星系，前者球形，后者银河系状。\n\n<u>天体的名称：</u>\n\n1. 最开始是拜尔用小写希腊字母为星座的恒星编号，后来弗拉姆斯蒂德用数字对星座中的恒星标号，但并没有取代拜尔系统只是更全，弗拉姆斯蒂德系统没概括的就用天文台对恒星的位置描述，这个位置怎么描述具体不太清楚。\n\n2. 深空天体最早是梅西耶星云星团表，总数109。\n\n***\n\n**第7章 行星**\n\n<u>城市天文学：</u>\n\n1. 八大行星除了地球本身，只有天王星和海外星肉眼不能看。\n\n2. 水星难看，轨道太靠近太阳每年只有几个礼拜的日落日出能看。金星一年有几个月会在日落日出能看。\n\n3. 水星和金星因为比地球更靠近太阳，所以活动范围在黄道上表现为绕太阳的圈。\n\n4. 行星的亮度受和地球的相对距离影响，对火星而言，距离地球会变化四倍，所以亮度也会变化很大。\n\n5. 火星的铁锈色是火星上淡红色的沙漠。\n\n6. 木星亮度非常稳定，因为公转周期长，在每个黄道星座中停留约一年，因此一般整晚可见，土星同理，每个黄道星座停留约两年。\n\n7. 星星会闪是因为大气湍流，而行星视面积大不太受影响。\n\n8. 城市观测其实由于城市热量，如果大气平静的话，视宁度将极端稳定，因此可说更好。\n\n<u>水星：</u>\n\n1. 水星有盈亏和月球盈亏不太一样，作为行星水星永远被照亮一半，而如果日水地成直线，由于太阳做了水星的背景，那么水星将给我们看到整个暗面，因此全亏，之后模型就自己想象吧。\n\n<u>小行星带：</u>\n\n1. 小行星带在火星和木星之间，虽然已定轨1.4W颗但其实相互间隔很大。\n\n2. 小行星质量排名：谷神星【一颗顶全体小行星带总和的三分之一】，智神星，灶神星，健神星。\n\n3. 只有灶神星能勉强肉眼直视到。\n\n4. 有两种形成模型，第一是此处有一颗形成过程被中断的行星，第二是其实已形成，但之后解体了，一般认为第一种可能性比较大，且这个中断因素主要是木星的引力干扰。\n\n<u>木星：</u>\n\n1. 木星转速太快，整个星球都椭掉，上下压缩7%。\n\n<u>土星：</u>\n\n1. 土星环的宽度是地月距离的三分之二，厚度不足1km，元素主要是冰和石，颗粒大小从沙子到房子，但角速度非常统一极少碰撞。\n\n<u>带外行星和矮行星：</u>\n\n1. 天王星也有暗环。\n\n***\n\n**第8章 月球和太阳**\n\n观测太阳\n\n1. 太阳的强磁场在变化，集中冲出的地方会让物质流动受限因而温度较低产生黑子，普通黑子有地球那么大，大黑子有几十个地球那么大，生命从几天到几个月不等。\n\n2. 黑子周=11年，太阳黑子遵循这个变化周期，且是上升4年下降7年【上升斜率比下降斜率大】，机制未知，最近的极小在2008年。\n\n月径幻觉\n\n1. 月径幻觉就是月球在地平线上比在头顶大。\n\n2. 这个问题现在还没有准确解释，可能是遥远地平线和直视或仰视有别两个因素结合产生的心理现象。\n\n***\n\n**第9章 日食和月食**\n\n<u>月食：</u>\n\n1. 铁锈色月食是因为地球影子受当时地球大气成分影响。\n\n***\n\n**第10章 彗星、流星和极光**\n\n<u>著名的和非著名的彗星</u>\n\n1. 彗星是天王星和海王星形成时遗留的巨型冰山，总数几十亿颗，在冥王星轨道外绕太阳公转周期几百或几千年，极少数受海王星或其他莫名天体引力影响走上太阳系的较内轨道。\n\n2. 彗星接近太阳的时候会疯狂蒸发形成几个地球大的气团，太阳光压+太阳风会把气团吹出两条彗尾，白色成分是尘埃，蓝色的成分是等离子体，彗尾整体长度几百万到上亿km但总物质不到上海市下两厘米雪，整体几近真空。\n\n3. 彗星的核心很小，包裹核心的叫彗发【意思是头发】。\n\n3. 著名彗星：\n\n1. 哈雷彗星76年周期每个人基本都能看一次，下一次2061年。\n\n2. 舒梅克-列维9号彗星在1993年被木星俘获碎成21块撞上去了。\n\n3. 百武彗星1996年靠近距离成为非常亮的彗星。\n\n4. 海尔-波普彗星1997年是二十世纪最后一颗。\n\n5. 威斯特彗星1976年比海尔-波普彗星还亮但是只出现几天且只能在破晓时看而不为人知。\n\n6. 科胡特克彗星在1974年由于实际亮度不到预测的十分之一而臭名昭著，1982年的奥斯汀彗星也是同理。\n\n7. 1970年的贝内特彗星，1965年的池谷-关氏彗星，1957年的姆尔特斯和阿连德-罗兰彗星，也因为亮很出名。\n\n<u>流星</u>\n\n1. 流星小到可怜，如果在手里一巴掌能抓几千个，1秒内蒸发。\n\n2. 地球每天落下至少400吨宇宙物质，小的是尘埃飘到地面，大的是流星燃烧殆尽，更大的是陨星砸到地上。\n\n3. 流星不是流星体，流星体是指太空中还没落下来的存在，流星已经落下来烧了。\n\n4. 流星雨是大群流星物质，已知的可预测流星雨是因为那都是彗星碎片，这些碎片是彗星蒸发过程中抛出的密度较大的冰【蒸发过程有些大冰偶尔抛出来怎么了，想象一下你煮汤的锅】，大流星雨一分钟一颗但大多没这水平。\n\n5. 流星峰值时间永远在1点到黎明，因为此刻观察者会被地球自转转到面朝公转轨道的方向上令流星迎面扑来。\n\n6. 每年的主要可预测流星雨和日期：\n\n1. 象限仪座：1月3日极大，小时流量10~50。\n\n2. 天琴座：4月21日，5~25。\n\n3. 宝瓶座η：5月4日，5~20。\n\n4. 宝瓶座δ南：7月27日~7月29日，10~20。\n\n4. 英仙座：8月12日，30~70。\n\n5. 猎户座：10月20日，10~30。\n\n6. 狮子座：11月16日，10~20。\n\n7. 双子座：12月13日，30~80。\n\n<u>极光</u>\n\n1. 太阳风被地磁偏转，沿磁力线汇聚到高纬度，进入大气层轰击大气元素。\n\n2. 氧元素绿或红色，氮元素蓝色。\n\n3. 很明显如果太阳活动剧烈则极光会增多，比如黑子多的年份。\n\n4. 极光可以听见声音，噼啪或嘶嘶，报告虽多但存疑。\n\n***\n\n**第11章 天文摄影**\n\nnull\n\n***\n\n**第12章 南半球星空**\n\nnull\n\n***\n\n**第13章 资源**\n\nnull","slug":"天文学/夜观星空—特伦斯·迪金森","published":1,"updated":"2024-04-15T19:12:36.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnr60003hk8z7nhba6c5","content":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是《夜观星空》的读书笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>书评：<br>这篇笔记笔记比较早，大概是六七年前（大约17到19年）完成的，那时候的读书笔记还很稚嫩，不成体统。</p>\n<p>具体到本书，本质上是一本畅销书，回顾再看盛名难副。不过，好在天文爱好者算是一个经验爱好，因此作者传授了一些有用的经验，比如如何用手掌估算天球的角距，如何确定望远镜中一颗具体的恒星，等等，也因此，本书不用全部读完，最后，本书附赠的插图颇精美。</p>\n<p>总之，比硬把书名水成一本书的《为什么伟大不能被计划》干一点。</p>\n<hr>\n<p><strong>第1章 发现宇宙</strong></p>\n<hr>\n<p><strong>第2章 宇宙的层次</strong></p>\n<hr>\n<p><strong>第3章 后院天文学</strong></p>\n<p><u>天空中的运动：</u></p>\n<ol>\n<li><p>因为周日运动也就是地球自转，恒星每晚绕地轴旋转，方向可描述为自东向西，【东西方向并不大概而模糊，而是非常清晰以地轴建立的坐标系，原理是地球绕地轴逆时针旋转&#x3D;地球上的小人自西向东移动&#x3D;星空自动向西移动】，太阳视作大恒星。</p>\n</li>\n<li><p>因为周年运动也就是地球公转，春夏秋冬的星空不一样，模型上，地球绕太阳做椭圆运动，椭圆长轴为上下方向且太阳在上面的焦点位置，地球的运动方向逆时针，其中，地球在右上左下时的位置，分别对应春夏秋冬。</p>\n</li>\n</ol>\n<p><img src= \"/img/loading.gif\" data-src=\"https://i.ibb.co/nBrxQXb/IMG-1.png\" alt=\"7641124deaa5057430ca13c4c575c98e.png\"></p>\n<ol>\n<li>如果愿意花时间其实是可以观测到邻近季节的部分【具体原理可以按上面写的模型推演一下目视由自转而产生的变化情况】。</li>\n</ol>\n<p><u>天空中的路标——北斗七星：</u></p>\n<ol>\n<li><p>北斗星命名：从勺柄依次是摇光，开阳，玉衡，天权，天玑，天璇，天枢。</p>\n</li>\n<li><p>对中北半球观测者北斗七星全年可见。</p>\n</li>\n<li><p>勺子指北原理：天璇向天枢方向永北。</p>\n</li>\n</ol>\n<p><img src= \"/img/loading.gif\" data-src=\"https://i.ibb.co/Zz57hfp/IMG-2.png\" alt=\"dfb1fcc739e6d24494bb633d0639931e.png\"></p>\n<ol start=\"3\">\n<li><p>北斗七星的互相指向：</p>\n</li>\n<li><p>天璇-&gt;天枢&#x3D;北极星。</p>\n</li>\n<li><p>玑-&gt;天权&#x3D;织女星。</p>\n</li>\n<li><p>天权-天玑&gt;&#x3D;轩辕十四。</p>\n</li>\n<li><p>天权-&gt;天璇&#x3D;北河二。</p>\n</li>\n<li><p>天权-&gt;天枢&#x3D;五车二。</p>\n</li>\n<li><p>玉衡-&gt;北极星&#x3D;仙后座。</p>\n</li>\n</ol>\n<p><img src= \"/img/loading.gif\" data-src=\"https://i.ibb.co/j60ykWT/IMG-3.png\" alt=\"b4c4505357ddeed50346c8914baf2031.png\"></p>\n<p><u>测量星空：</u></p>\n<ol>\n<li>北斗七星角度数据：<img src= \"/img/loading.gif\" data-src=\"https://i.ibb.co/71KHC51/IMG-4.png\" alt=\"52d6477e6d721ff86e63467a5c0cb08a.png\"></li>\n</ol>\n<p><u>恒星亮度：</u></p>\n<ol>\n<li><p>最亮的恒星是天狼星-1等。</p>\n</li>\n<li><p>行星中，木星-3等，金星-4等，火星+2~-3等。</p>\n</li>\n</ol>\n<p><u>星座和星星的名字：</u></p>\n<ol>\n<li><p>星座名称大部分源自古希腊，少部分源自17~18世纪【大航海需要】，国际天文学联合会1930年规定全天88星座，四分之一的南天星座中北纬永不可见。</p>\n</li>\n<li><p>星座源自黄道十二宫，以春分为始分别是双鱼，白羊，金牛，双子，巨蟹，狮子，室女，天秤，天蝎，人马，摩羯，宝瓶【鱼羊牛，子蟹狮，女秤蝎，马摩瓶】。</p>\n</li>\n</ol>\n<hr>\n<p><strong>第4章 北半球星空</strong></p>\n<p><u>全天星图：</u></p>\n<ol>\n<li>星图一般最多3-4等，5-6等加进来就会很复杂。</li>\n</ol>\n<p><u>黄道和黄道星座：</u></p>\n<ol>\n<li><p>太阳系行星的共面性是保持50亿年前太阳系前身的圆盘云团形状所致。</p>\n</li>\n<li><p>占星术说的xx座实际上应该说是xx宫，因为大多数黄道星座在公元前2600年前由游牧民族精心挑选出来描述星空位置，那时候的黄道星座大概与黄道星宫重合，现在由于地轴变化，星座相对星宫已经整体移动了。</p>\n</li>\n</ol>\n<hr>\n<p><strong>第5章 观星器材</strong></p>\n<p><u>双筒望远镜：</u></p>\n<ol>\n<li><p>规格是放大倍率×主镜直径，直径单位是毫米。</p>\n</li>\n<li><p>双筒的极限大概是九等星。</p>\n</li>\n</ol>\n<p><u>天文望远镜：</u></p>\n<ol>\n<li>30倍看土星环。</li>\n</ol>\n<p><u>天文望远镜的类型：</u></p>\n<ol>\n<li><p>四类主要业余天文望远镜：折射式，牛反式，施密特-卡塞格林式，马克苏托夫-卡塞格林式。</p>\n</li>\n<li><p>折射式：折射式是小型的，分为消色差和复消色差两种，消色差型的缺陷是口径如果大于100毫米月球边缘会紫。</p>\n</li>\n<li><p>牛反式：牛反式的优点是目镜位置开在望远镜身上所以不用昂头，牛反更容易制造所以同样成本可以做得更大。</p>\n</li>\n<li><p>施密特-卡塞格林式：结合了折射和牛反的特点，结构紧凑可以小型化。</p>\n</li>\n<li><p>马克苏托夫-卡塞格林式：是施密特-卡塞格林式的近亲，但未普及，可以做得很便携。</p>\n</li>\n<li><p>焦比&#x3D;主透镜焦距&#x2F;主透镜直径，也就是那个f&#x2F;几的参数。</p>\n</li>\n<li><p>焦比小的望远镜用在器材摄影时比焦比大的亮成像亮度高。</p>\n</li>\n<li><p>视宁度是指图像保持稳定不变的程度，主要受大气湍流影响，而湍流受风，大气的温差，当地地形，望远镜周围气流的影响。</p>\n</li>\n<li><p>对望远镜而言，放大能力受集光能力和分辨能力两者综合影响，其中分辨能力受光和光学系统影响。</p>\n</li>\n</ol>\n<p><u>附件：</u></p>\n<ol>\n<li>天文望远镜的可选附件有：太阳滤光片【削弱太阳】，正像棱镜【把上下甚至加上左右颠倒的图像正过来，双筒中会封装这个东西】，目镜滤光片【有很多种，比如月球滤光片可以削弱月球】，星云滤光片【可削弱城市照明，看星云舒服】，缩焦器【施密特-卡塞格林式的配件，增大视场】，防露罩【两种卡塞格林式的前透镜都会产生露水，防露罩分加长镜筒的治标方法和加电热丝的治本方法】，相机的相关装备。</li>\n</ol>\n<p><u>目镜：</u></p>\n<ol>\n<li><p>目镜是可以换的。</p>\n</li>\n<li><p>惠更斯目镜和冉斯登目镜便宜又垃圾。</p>\n</li>\n<li><p>凯尔纳目镜综合及格，价格适中，视场较小。</p>\n</li>\n<li><p>RKE目镜为凯尔纳目镜的改良，图像更好，视场增大。</p>\n</li>\n<li><p>无畸变目镜可稍增大视场，消除几乎所有光学色差。</p>\n</li>\n<li><p>普勒斯尔目镜吊打以上四种，比无畸变目镜的视场大，成像还非常锐利。</p>\n</li>\n<li><p>尔弗利目镜五片镜片，广泛用于军事光学系统，今天被大视场目镜取代。</p>\n</li>\n<li><p>大视场目镜六到七片镜片，昂贵但牛逼。</p>\n</li>\n<li><p>纳格勒目镜是一个叫纳格勒的系列，至今仍是最好的中高倍率目镜之一。</p>\n</li>\n<li><p>超广角目镜类似纳格勒目镜，价格昂贵【200美刀+】，超大视场，成像锐利，人们形容像从宇宙飞船舷窗观察，缺点是重，很难调整望远镜整体平衡。</p>\n</li>\n<li><p>巴罗透镜是在望远镜的两端都加装透镜以提升目镜放大倍率。</p>\n</li>\n<li><p>目镜放大率&#x3D;望远镜焦距&#x2F;目镜焦距。</p>\n</li>\n<li><p>目视间隙这个参数主要是戴眼镜的人受影响。</p>\n</li>\n<li><p>目镜可以转售，所有望远镜可以通用，是长期资产，多投入绝对没错。</p>\n</li>\n</ol>\n<hr>\n<p><strong>第6章 探索深空</strong></p>\n<p><u>双星：</u></p>\n<ol>\n<li><p>银河系中有50%~80%的星系为聚星系统【大于两颗恒星】。</p>\n</li>\n<li><p>双星系统两颗恒星的角距，大概相当于月球环形山的角距那么大。</p>\n</li>\n<li><p>肉眼裸视的角距分辨极限是6`。</p>\n</li>\n<li><p>双星其实只是指两个恒星靠得很近，细分上，纯粹巧合重合在一起叫光学双星，靠引力实打实在一起应该叫双星系统。</p>\n</li>\n<li><p>人肉眼的星等精确度可以到0.1星等。</p>\n</li>\n</ol>\n<p><u>夜视能力：</u></p>\n<ol>\n<li>黑暗天空可见约3000恒星，光照一般的郊区可见约200恒星。</li>\n</ol>\n<p><u>变星：</u></p>\n<ol>\n<li><p>变星是因为恒星本身处于不稳定状态所致。</p>\n</li>\n<li><p>肉眼有十几个变星可见，天望有几千个变星可见。</p>\n</li>\n<li><p>变星太多天文台没时间管，有变形观测者群体，向相关协会报告亮度估计，协会负责公布观测结果和转发给大型天文台。</p>\n</li>\n<li><p>变星分食双星【两星交替互挡】，长周期变星【其实是红巨星，亮度变化大，周期不均匀但长，大概是星期为单位吧】，不规则变星【亮暗起来没规则】，新星【白矮星吸同伴，表面爆炸所致，这个过程会反复】，超新星【大质量恒星热核聚变缺乏燃料停止，恒星坍缩势能转化的热量炸掉星球】。</p>\n</li>\n</ol>\n<p><u>星团：</u></p>\n<ol>\n<li>靠引力维系的几十到几千个恒星组成的团。</li>\n</ol>\n<p><u>星云：</u></p>\n<ol>\n<li><p>银河系的旋臂之间是气体和尘埃，称星云。</p>\n</li>\n<li><p>大部分星云是黑色，挡住了非常多的星光，星云被恒星照亮的时候会很壮观。</p>\n</li>\n<li><p>星云是恒星诞生之前的形态。</p>\n</li>\n</ol>\n<p><u>球状星团：</u></p>\n<ol>\n<li>大型的星团，像银河系的卫星一样，几百万恒星。</li>\n</ol>\n<p><u>星系：</u></p>\n<ol>\n<li>星系分椭圆星系和旋涡星系，前者球形，后者银河系状。</li>\n</ol>\n<p><u>天体的名称：</u></p>\n<ol>\n<li><p>最开始是拜尔用小写希腊字母为星座的恒星编号，后来弗拉姆斯蒂德用数字对星座中的恒星标号，但并没有取代拜尔系统只是更全，弗拉姆斯蒂德系统没概括的就用天文台对恒星的位置描述，这个位置怎么描述具体不太清楚。</p>\n</li>\n<li><p>深空天体最早是梅西耶星云星团表，总数109。</p>\n</li>\n</ol>\n<hr>\n<p><strong>第7章 行星</strong></p>\n<p><u>城市天文学：</u></p>\n<ol>\n<li><p>八大行星除了地球本身，只有天王星和海外星肉眼不能看。</p>\n</li>\n<li><p>水星难看，轨道太靠近太阳每年只有几个礼拜的日落日出能看。金星一年有几个月会在日落日出能看。</p>\n</li>\n<li><p>水星和金星因为比地球更靠近太阳，所以活动范围在黄道上表现为绕太阳的圈。</p>\n</li>\n<li><p>行星的亮度受和地球的相对距离影响，对火星而言，距离地球会变化四倍，所以亮度也会变化很大。</p>\n</li>\n<li><p>火星的铁锈色是火星上淡红色的沙漠。</p>\n</li>\n<li><p>木星亮度非常稳定，因为公转周期长，在每个黄道星座中停留约一年，因此一般整晚可见，土星同理，每个黄道星座停留约两年。</p>\n</li>\n<li><p>星星会闪是因为大气湍流，而行星视面积大不太受影响。</p>\n</li>\n<li><p>城市观测其实由于城市热量，如果大气平静的话，视宁度将极端稳定，因此可说更好。</p>\n</li>\n</ol>\n<p><u>水星：</u></p>\n<ol>\n<li>水星有盈亏和月球盈亏不太一样，作为行星水星永远被照亮一半，而如果日水地成直线，由于太阳做了水星的背景，那么水星将给我们看到整个暗面，因此全亏，之后模型就自己想象吧。</li>\n</ol>\n<p><u>小行星带：</u></p>\n<ol>\n<li><p>小行星带在火星和木星之间，虽然已定轨1.4W颗但其实相互间隔很大。</p>\n</li>\n<li><p>小行星质量排名：谷神星【一颗顶全体小行星带总和的三分之一】，智神星，灶神星，健神星。</p>\n</li>\n<li><p>只有灶神星能勉强肉眼直视到。</p>\n</li>\n<li><p>有两种形成模型，第一是此处有一颗形成过程被中断的行星，第二是其实已形成，但之后解体了，一般认为第一种可能性比较大，且这个中断因素主要是木星的引力干扰。</p>\n</li>\n</ol>\n<p><u>木星：</u></p>\n<ol>\n<li>木星转速太快，整个星球都椭掉，上下压缩7%。</li>\n</ol>\n<p><u>土星：</u></p>\n<ol>\n<li>土星环的宽度是地月距离的三分之二，厚度不足1km，元素主要是冰和石，颗粒大小从沙子到房子，但角速度非常统一极少碰撞。</li>\n</ol>\n<p><u>带外行星和矮行星：</u></p>\n<ol>\n<li>天王星也有暗环。</li>\n</ol>\n<hr>\n<p><strong>第8章 月球和太阳</strong></p>\n<p>观测太阳</p>\n<ol>\n<li><p>太阳的强磁场在变化，集中冲出的地方会让物质流动受限因而温度较低产生黑子，普通黑子有地球那么大，大黑子有几十个地球那么大，生命从几天到几个月不等。</p>\n</li>\n<li><p>黑子周&#x3D;11年，太阳黑子遵循这个变化周期，且是上升4年下降7年【上升斜率比下降斜率大】，机制未知，最近的极小在2008年。</p>\n</li>\n</ol>\n<p>月径幻觉</p>\n<ol>\n<li><p>月径幻觉就是月球在地平线上比在头顶大。</p>\n</li>\n<li><p>这个问题现在还没有准确解释，可能是遥远地平线和直视或仰视有别两个因素结合产生的心理现象。</p>\n</li>\n</ol>\n<hr>\n<p><strong>第9章 日食和月食</strong></p>\n<p><u>月食：</u></p>\n<ol>\n<li>铁锈色月食是因为地球影子受当时地球大气成分影响。</li>\n</ol>\n<hr>\n<p><strong>第10章 彗星、流星和极光</strong></p>\n<p><u>著名的和非著名的彗星</u></p>\n<ol>\n<li><p>彗星是天王星和海王星形成时遗留的巨型冰山，总数几十亿颗，在冥王星轨道外绕太阳公转周期几百或几千年，极少数受海王星或其他莫名天体引力影响走上太阳系的较内轨道。</p>\n</li>\n<li><p>彗星接近太阳的时候会疯狂蒸发形成几个地球大的气团，太阳光压+太阳风会把气团吹出两条彗尾，白色成分是尘埃，蓝色的成分是等离子体，彗尾整体长度几百万到上亿km但总物质不到上海市下两厘米雪，整体几近真空。</p>\n</li>\n<li><p>彗星的核心很小，包裹核心的叫彗发【意思是头发】。</p>\n</li>\n<li><p>著名彗星：</p>\n</li>\n<li><p>哈雷彗星76年周期每个人基本都能看一次，下一次2061年。</p>\n</li>\n<li><p>舒梅克-列维9号彗星在1993年被木星俘获碎成21块撞上去了。</p>\n</li>\n<li><p>百武彗星1996年靠近距离成为非常亮的彗星。</p>\n</li>\n<li><p>海尔-波普彗星1997年是二十世纪最后一颗。</p>\n</li>\n<li><p>威斯特彗星1976年比海尔-波普彗星还亮但是只出现几天且只能在破晓时看而不为人知。</p>\n</li>\n<li><p>科胡特克彗星在1974年由于实际亮度不到预测的十分之一而臭名昭著，1982年的奥斯汀彗星也是同理。</p>\n</li>\n<li><p>1970年的贝内特彗星，1965年的池谷-关氏彗星，1957年的姆尔特斯和阿连德-罗兰彗星，也因为亮很出名。</p>\n</li>\n</ol>\n<p><u>流星</u></p>\n<ol>\n<li><p>流星小到可怜，如果在手里一巴掌能抓几千个，1秒内蒸发。</p>\n</li>\n<li><p>地球每天落下至少400吨宇宙物质，小的是尘埃飘到地面，大的是流星燃烧殆尽，更大的是陨星砸到地上。</p>\n</li>\n<li><p>流星不是流星体，流星体是指太空中还没落下来的存在，流星已经落下来烧了。</p>\n</li>\n<li><p>流星雨是大群流星物质，已知的可预测流星雨是因为那都是彗星碎片，这些碎片是彗星蒸发过程中抛出的密度较大的冰【蒸发过程有些大冰偶尔抛出来怎么了，想象一下你煮汤的锅】，大流星雨一分钟一颗但大多没这水平。</p>\n</li>\n<li><p>流星峰值时间永远在1点到黎明，因为此刻观察者会被地球自转转到面朝公转轨道的方向上令流星迎面扑来。</p>\n</li>\n<li><p>每年的主要可预测流星雨和日期：</p>\n</li>\n<li><p>象限仪座：1月3日极大，小时流量10~50。</p>\n</li>\n<li><p>天琴座：4月21日，5~25。</p>\n</li>\n<li><p>宝瓶座η：5月4日，5~20。</p>\n</li>\n<li><p>宝瓶座δ南：7月27日<del>7月29日，10</del>20。</p>\n</li>\n<li><p>英仙座：8月12日，30~70。</p>\n</li>\n<li><p>猎户座：10月20日，10~30。</p>\n</li>\n<li><p>狮子座：11月16日，10~20。</p>\n</li>\n<li><p>双子座：12月13日，30~80。</p>\n</li>\n</ol>\n<p><u>极光</u></p>\n<ol>\n<li><p>太阳风被地磁偏转，沿磁力线汇聚到高纬度，进入大气层轰击大气元素。</p>\n</li>\n<li><p>氧元素绿或红色，氮元素蓝色。</p>\n</li>\n<li><p>很明显如果太阳活动剧烈则极光会增多，比如黑子多的年份。</p>\n</li>\n<li><p>极光可以听见声音，噼啪或嘶嘶，报告虽多但存疑。</p>\n</li>\n</ol>\n<hr>\n<p><strong>第11章 天文摄影</strong></p>\n<p>null</p>\n<hr>\n<p><strong>第12章 南半球星空</strong></p>\n<p>null</p>\n<hr>\n<p><strong>第13章 资源</strong></p>\n<p>null</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是《夜观星空》的读书笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>书评：<br>这篇笔记笔记比较早，大概是六七年前（大约17到19年）完成的，那时候的读书笔记还很稚嫩，不成体统。</p>\n<p>具体到本书，本质上是一本畅销书，回顾再看盛名难副。不过，好在天文爱好者算是一个经验爱好，因此作者传授了一些有用的经验，比如如何用手掌估算天球的角距，如何确定望远镜中一颗具体的恒星，等等，也因此，本书不用全部读完，最后，本书附赠的插图颇精美。</p>\n<p>总之，比硬把书名水成一本书的《为什么伟大不能被计划》干一点。</p>\n<hr>\n<p><strong>第1章 发现宇宙</strong></p>\n<hr>\n<p><strong>第2章 宇宙的层次</strong></p>\n<hr>\n<p><strong>第3章 后院天文学</strong></p>\n<p><u>天空中的运动：</u></p>\n<ol>\n<li><p>因为周日运动也就是地球自转，恒星每晚绕地轴旋转，方向可描述为自东向西，【东西方向并不大概而模糊，而是非常清晰以地轴建立的坐标系，原理是地球绕地轴逆时针旋转&#x3D;地球上的小人自西向东移动&#x3D;星空自动向西移动】，太阳视作大恒星。</p>\n</li>\n<li><p>因为周年运动也就是地球公转，春夏秋冬的星空不一样，模型上，地球绕太阳做椭圆运动，椭圆长轴为上下方向且太阳在上面的焦点位置，地球的运动方向逆时针，其中，地球在右上左下时的位置，分别对应春夏秋冬。</p>\n</li>\n</ol>\n<p><img src=\"https://i.ibb.co/nBrxQXb/IMG-1.png\" alt=\"7641124deaa5057430ca13c4c575c98e.png\"></p>\n<ol>\n<li>如果愿意花时间其实是可以观测到邻近季节的部分【具体原理可以按上面写的模型推演一下目视由自转而产生的变化情况】。</li>\n</ol>\n<p><u>天空中的路标——北斗七星：</u></p>\n<ol>\n<li><p>北斗星命名：从勺柄依次是摇光，开阳，玉衡，天权，天玑，天璇，天枢。</p>\n</li>\n<li><p>对中北半球观测者北斗七星全年可见。</p>\n</li>\n<li><p>勺子指北原理：天璇向天枢方向永北。</p>\n</li>\n</ol>\n<p><img src=\"https://i.ibb.co/Zz57hfp/IMG-2.png\" alt=\"dfb1fcc739e6d24494bb633d0639931e.png\"></p>\n<ol start=\"3\">\n<li><p>北斗七星的互相指向：</p>\n</li>\n<li><p>天璇-&gt;天枢&#x3D;北极星。</p>\n</li>\n<li><p>玑-&gt;天权&#x3D;织女星。</p>\n</li>\n<li><p>天权-天玑&gt;&#x3D;轩辕十四。</p>\n</li>\n<li><p>天权-&gt;天璇&#x3D;北河二。</p>\n</li>\n<li><p>天权-&gt;天枢&#x3D;五车二。</p>\n</li>\n<li><p>玉衡-&gt;北极星&#x3D;仙后座。</p>\n</li>\n</ol>\n<p><img src=\"https://i.ibb.co/j60ykWT/IMG-3.png\" alt=\"b4c4505357ddeed50346c8914baf2031.png\"></p>\n<p><u>测量星空：</u></p>\n<ol>\n<li>北斗七星角度数据：<img src=\"https://i.ibb.co/71KHC51/IMG-4.png\" alt=\"52d6477e6d721ff86e63467a5c0cb08a.png\"></li>\n</ol>\n<p><u>恒星亮度：</u></p>\n<ol>\n<li><p>最亮的恒星是天狼星-1等。</p>\n</li>\n<li><p>行星中，木星-3等，金星-4等，火星+2~-3等。</p>\n</li>\n</ol>\n<p><u>星座和星星的名字：</u></p>\n<ol>\n<li><p>星座名称大部分源自古希腊，少部分源自17~18世纪【大航海需要】，国际天文学联合会1930年规定全天88星座，四分之一的南天星座中北纬永不可见。</p>\n</li>\n<li><p>星座源自黄道十二宫，以春分为始分别是双鱼，白羊，金牛，双子，巨蟹，狮子，室女，天秤，天蝎，人马，摩羯，宝瓶【鱼羊牛，子蟹狮，女秤蝎，马摩瓶】。</p>\n</li>\n</ol>\n<hr>\n<p><strong>第4章 北半球星空</strong></p>\n<p><u>全天星图：</u></p>\n<ol>\n<li>星图一般最多3-4等，5-6等加进来就会很复杂。</li>\n</ol>\n<p><u>黄道和黄道星座：</u></p>\n<ol>\n<li><p>太阳系行星的共面性是保持50亿年前太阳系前身的圆盘云团形状所致。</p>\n</li>\n<li><p>占星术说的xx座实际上应该说是xx宫，因为大多数黄道星座在公元前2600年前由游牧民族精心挑选出来描述星空位置，那时候的黄道星座大概与黄道星宫重合，现在由于地轴变化，星座相对星宫已经整体移动了。</p>\n</li>\n</ol>\n<hr>\n<p><strong>第5章 观星器材</strong></p>\n<p><u>双筒望远镜：</u></p>\n<ol>\n<li><p>规格是放大倍率×主镜直径，直径单位是毫米。</p>\n</li>\n<li><p>双筒的极限大概是九等星。</p>\n</li>\n</ol>\n<p><u>天文望远镜：</u></p>\n<ol>\n<li>30倍看土星环。</li>\n</ol>\n<p><u>天文望远镜的类型：</u></p>\n<ol>\n<li><p>四类主要业余天文望远镜：折射式，牛反式，施密特-卡塞格林式，马克苏托夫-卡塞格林式。</p>\n</li>\n<li><p>折射式：折射式是小型的，分为消色差和复消色差两种，消色差型的缺陷是口径如果大于100毫米月球边缘会紫。</p>\n</li>\n<li><p>牛反式：牛反式的优点是目镜位置开在望远镜身上所以不用昂头，牛反更容易制造所以同样成本可以做得更大。</p>\n</li>\n<li><p>施密特-卡塞格林式：结合了折射和牛反的特点，结构紧凑可以小型化。</p>\n</li>\n<li><p>马克苏托夫-卡塞格林式：是施密特-卡塞格林式的近亲，但未普及，可以做得很便携。</p>\n</li>\n<li><p>焦比&#x3D;主透镜焦距&#x2F;主透镜直径，也就是那个f&#x2F;几的参数。</p>\n</li>\n<li><p>焦比小的望远镜用在器材摄影时比焦比大的亮成像亮度高。</p>\n</li>\n<li><p>视宁度是指图像保持稳定不变的程度，主要受大气湍流影响，而湍流受风，大气的温差，当地地形，望远镜周围气流的影响。</p>\n</li>\n<li><p>对望远镜而言，放大能力受集光能力和分辨能力两者综合影响，其中分辨能力受光和光学系统影响。</p>\n</li>\n</ol>\n<p><u>附件：</u></p>\n<ol>\n<li>天文望远镜的可选附件有：太阳滤光片【削弱太阳】，正像棱镜【把上下甚至加上左右颠倒的图像正过来，双筒中会封装这个东西】，目镜滤光片【有很多种，比如月球滤光片可以削弱月球】，星云滤光片【可削弱城市照明，看星云舒服】，缩焦器【施密特-卡塞格林式的配件，增大视场】，防露罩【两种卡塞格林式的前透镜都会产生露水，防露罩分加长镜筒的治标方法和加电热丝的治本方法】，相机的相关装备。</li>\n</ol>\n<p><u>目镜：</u></p>\n<ol>\n<li><p>目镜是可以换的。</p>\n</li>\n<li><p>惠更斯目镜和冉斯登目镜便宜又垃圾。</p>\n</li>\n<li><p>凯尔纳目镜综合及格，价格适中，视场较小。</p>\n</li>\n<li><p>RKE目镜为凯尔纳目镜的改良，图像更好，视场增大。</p>\n</li>\n<li><p>无畸变目镜可稍增大视场，消除几乎所有光学色差。</p>\n</li>\n<li><p>普勒斯尔目镜吊打以上四种，比无畸变目镜的视场大，成像还非常锐利。</p>\n</li>\n<li><p>尔弗利目镜五片镜片，广泛用于军事光学系统，今天被大视场目镜取代。</p>\n</li>\n<li><p>大视场目镜六到七片镜片，昂贵但牛逼。</p>\n</li>\n<li><p>纳格勒目镜是一个叫纳格勒的系列，至今仍是最好的中高倍率目镜之一。</p>\n</li>\n<li><p>超广角目镜类似纳格勒目镜，价格昂贵【200美刀+】，超大视场，成像锐利，人们形容像从宇宙飞船舷窗观察，缺点是重，很难调整望远镜整体平衡。</p>\n</li>\n<li><p>巴罗透镜是在望远镜的两端都加装透镜以提升目镜放大倍率。</p>\n</li>\n<li><p>目镜放大率&#x3D;望远镜焦距&#x2F;目镜焦距。</p>\n</li>\n<li><p>目视间隙这个参数主要是戴眼镜的人受影响。</p>\n</li>\n<li><p>目镜可以转售，所有望远镜可以通用，是长期资产，多投入绝对没错。</p>\n</li>\n</ol>\n<hr>\n<p><strong>第6章 探索深空</strong></p>\n<p><u>双星：</u></p>\n<ol>\n<li><p>银河系中有50%~80%的星系为聚星系统【大于两颗恒星】。</p>\n</li>\n<li><p>双星系统两颗恒星的角距，大概相当于月球环形山的角距那么大。</p>\n</li>\n<li><p>肉眼裸视的角距分辨极限是6`。</p>\n</li>\n<li><p>双星其实只是指两个恒星靠得很近，细分上，纯粹巧合重合在一起叫光学双星，靠引力实打实在一起应该叫双星系统。</p>\n</li>\n<li><p>人肉眼的星等精确度可以到0.1星等。</p>\n</li>\n</ol>\n<p><u>夜视能力：</u></p>\n<ol>\n<li>黑暗天空可见约3000恒星，光照一般的郊区可见约200恒星。</li>\n</ol>\n<p><u>变星：</u></p>\n<ol>\n<li><p>变星是因为恒星本身处于不稳定状态所致。</p>\n</li>\n<li><p>肉眼有十几个变星可见，天望有几千个变星可见。</p>\n</li>\n<li><p>变星太多天文台没时间管，有变形观测者群体，向相关协会报告亮度估计，协会负责公布观测结果和转发给大型天文台。</p>\n</li>\n<li><p>变星分食双星【两星交替互挡】，长周期变星【其实是红巨星，亮度变化大，周期不均匀但长，大概是星期为单位吧】，不规则变星【亮暗起来没规则】，新星【白矮星吸同伴，表面爆炸所致，这个过程会反复】，超新星【大质量恒星热核聚变缺乏燃料停止，恒星坍缩势能转化的热量炸掉星球】。</p>\n</li>\n</ol>\n<p><u>星团：</u></p>\n<ol>\n<li>靠引力维系的几十到几千个恒星组成的团。</li>\n</ol>\n<p><u>星云：</u></p>\n<ol>\n<li><p>银河系的旋臂之间是气体和尘埃，称星云。</p>\n</li>\n<li><p>大部分星云是黑色，挡住了非常多的星光，星云被恒星照亮的时候会很壮观。</p>\n</li>\n<li><p>星云是恒星诞生之前的形态。</p>\n</li>\n</ol>\n<p><u>球状星团：</u></p>\n<ol>\n<li>大型的星团，像银河系的卫星一样，几百万恒星。</li>\n</ol>\n<p><u>星系：</u></p>\n<ol>\n<li>星系分椭圆星系和旋涡星系，前者球形，后者银河系状。</li>\n</ol>\n<p><u>天体的名称：</u></p>\n<ol>\n<li><p>最开始是拜尔用小写希腊字母为星座的恒星编号，后来弗拉姆斯蒂德用数字对星座中的恒星标号，但并没有取代拜尔系统只是更全，弗拉姆斯蒂德系统没概括的就用天文台对恒星的位置描述，这个位置怎么描述具体不太清楚。</p>\n</li>\n<li><p>深空天体最早是梅西耶星云星团表，总数109。</p>\n</li>\n</ol>\n<hr>\n<p><strong>第7章 行星</strong></p>\n<p><u>城市天文学：</u></p>\n<ol>\n<li><p>八大行星除了地球本身，只有天王星和海外星肉眼不能看。</p>\n</li>\n<li><p>水星难看，轨道太靠近太阳每年只有几个礼拜的日落日出能看。金星一年有几个月会在日落日出能看。</p>\n</li>\n<li><p>水星和金星因为比地球更靠近太阳，所以活动范围在黄道上表现为绕太阳的圈。</p>\n</li>\n<li><p>行星的亮度受和地球的相对距离影响，对火星而言，距离地球会变化四倍，所以亮度也会变化很大。</p>\n</li>\n<li><p>火星的铁锈色是火星上淡红色的沙漠。</p>\n</li>\n<li><p>木星亮度非常稳定，因为公转周期长，在每个黄道星座中停留约一年，因此一般整晚可见，土星同理，每个黄道星座停留约两年。</p>\n</li>\n<li><p>星星会闪是因为大气湍流，而行星视面积大不太受影响。</p>\n</li>\n<li><p>城市观测其实由于城市热量，如果大气平静的话，视宁度将极端稳定，因此可说更好。</p>\n</li>\n</ol>\n<p><u>水星：</u></p>\n<ol>\n<li>水星有盈亏和月球盈亏不太一样，作为行星水星永远被照亮一半，而如果日水地成直线，由于太阳做了水星的背景，那么水星将给我们看到整个暗面，因此全亏，之后模型就自己想象吧。</li>\n</ol>\n<p><u>小行星带：</u></p>\n<ol>\n<li><p>小行星带在火星和木星之间，虽然已定轨1.4W颗但其实相互间隔很大。</p>\n</li>\n<li><p>小行星质量排名：谷神星【一颗顶全体小行星带总和的三分之一】，智神星，灶神星，健神星。</p>\n</li>\n<li><p>只有灶神星能勉强肉眼直视到。</p>\n</li>\n<li><p>有两种形成模型，第一是此处有一颗形成过程被中断的行星，第二是其实已形成，但之后解体了，一般认为第一种可能性比较大，且这个中断因素主要是木星的引力干扰。</p>\n</li>\n</ol>\n<p><u>木星：</u></p>\n<ol>\n<li>木星转速太快，整个星球都椭掉，上下压缩7%。</li>\n</ol>\n<p><u>土星：</u></p>\n<ol>\n<li>土星环的宽度是地月距离的三分之二，厚度不足1km，元素主要是冰和石，颗粒大小从沙子到房子，但角速度非常统一极少碰撞。</li>\n</ol>\n<p><u>带外行星和矮行星：</u></p>\n<ol>\n<li>天王星也有暗环。</li>\n</ol>\n<hr>\n<p><strong>第8章 月球和太阳</strong></p>\n<p>观测太阳</p>\n<ol>\n<li><p>太阳的强磁场在变化，集中冲出的地方会让物质流动受限因而温度较低产生黑子，普通黑子有地球那么大，大黑子有几十个地球那么大，生命从几天到几个月不等。</p>\n</li>\n<li><p>黑子周&#x3D;11年，太阳黑子遵循这个变化周期，且是上升4年下降7年【上升斜率比下降斜率大】，机制未知，最近的极小在2008年。</p>\n</li>\n</ol>\n<p>月径幻觉</p>\n<ol>\n<li><p>月径幻觉就是月球在地平线上比在头顶大。</p>\n</li>\n<li><p>这个问题现在还没有准确解释，可能是遥远地平线和直视或仰视有别两个因素结合产生的心理现象。</p>\n</li>\n</ol>\n<hr>\n<p><strong>第9章 日食和月食</strong></p>\n<p><u>月食：</u></p>\n<ol>\n<li>铁锈色月食是因为地球影子受当时地球大气成分影响。</li>\n</ol>\n<hr>\n<p><strong>第10章 彗星、流星和极光</strong></p>\n<p><u>著名的和非著名的彗星</u></p>\n<ol>\n<li><p>彗星是天王星和海王星形成时遗留的巨型冰山，总数几十亿颗，在冥王星轨道外绕太阳公转周期几百或几千年，极少数受海王星或其他莫名天体引力影响走上太阳系的较内轨道。</p>\n</li>\n<li><p>彗星接近太阳的时候会疯狂蒸发形成几个地球大的气团，太阳光压+太阳风会把气团吹出两条彗尾，白色成分是尘埃，蓝色的成分是等离子体，彗尾整体长度几百万到上亿km但总物质不到上海市下两厘米雪，整体几近真空。</p>\n</li>\n<li><p>彗星的核心很小，包裹核心的叫彗发【意思是头发】。</p>\n</li>\n<li><p>著名彗星：</p>\n</li>\n<li><p>哈雷彗星76年周期每个人基本都能看一次，下一次2061年。</p>\n</li>\n<li><p>舒梅克-列维9号彗星在1993年被木星俘获碎成21块撞上去了。</p>\n</li>\n<li><p>百武彗星1996年靠近距离成为非常亮的彗星。</p>\n</li>\n<li><p>海尔-波普彗星1997年是二十世纪最后一颗。</p>\n</li>\n<li><p>威斯特彗星1976年比海尔-波普彗星还亮但是只出现几天且只能在破晓时看而不为人知。</p>\n</li>\n<li><p>科胡特克彗星在1974年由于实际亮度不到预测的十分之一而臭名昭著，1982年的奥斯汀彗星也是同理。</p>\n</li>\n<li><p>1970年的贝内特彗星，1965年的池谷-关氏彗星，1957年的姆尔特斯和阿连德-罗兰彗星，也因为亮很出名。</p>\n</li>\n</ol>\n<p><u>流星</u></p>\n<ol>\n<li><p>流星小到可怜，如果在手里一巴掌能抓几千个，1秒内蒸发。</p>\n</li>\n<li><p>地球每天落下至少400吨宇宙物质，小的是尘埃飘到地面，大的是流星燃烧殆尽，更大的是陨星砸到地上。</p>\n</li>\n<li><p>流星不是流星体，流星体是指太空中还没落下来的存在，流星已经落下来烧了。</p>\n</li>\n<li><p>流星雨是大群流星物质，已知的可预测流星雨是因为那都是彗星碎片，这些碎片是彗星蒸发过程中抛出的密度较大的冰【蒸发过程有些大冰偶尔抛出来怎么了，想象一下你煮汤的锅】，大流星雨一分钟一颗但大多没这水平。</p>\n</li>\n<li><p>流星峰值时间永远在1点到黎明，因为此刻观察者会被地球自转转到面朝公转轨道的方向上令流星迎面扑来。</p>\n</li>\n<li><p>每年的主要可预测流星雨和日期：</p>\n</li>\n<li><p>象限仪座：1月3日极大，小时流量10~50。</p>\n</li>\n<li><p>天琴座：4月21日，5~25。</p>\n</li>\n<li><p>宝瓶座η：5月4日，5~20。</p>\n</li>\n<li><p>宝瓶座δ南：7月27日<del>7月29日，10</del>20。</p>\n</li>\n<li><p>英仙座：8月12日，30~70。</p>\n</li>\n<li><p>猎户座：10月20日，10~30。</p>\n</li>\n<li><p>狮子座：11月16日，10~20。</p>\n</li>\n<li><p>双子座：12月13日，30~80。</p>\n</li>\n</ol>\n<p><u>极光</u></p>\n<ol>\n<li><p>太阳风被地磁偏转，沿磁力线汇聚到高纬度，进入大气层轰击大气元素。</p>\n</li>\n<li><p>氧元素绿或红色，氮元素蓝色。</p>\n</li>\n<li><p>很明显如果太阳活动剧烈则极光会增多，比如黑子多的年份。</p>\n</li>\n<li><p>极光可以听见声音，噼啪或嘶嘶，报告虽多但存疑。</p>\n</li>\n</ol>\n<hr>\n<p><strong>第11章 天文摄影</strong></p>\n<p>null</p>\n<hr>\n<p><strong>第12章 南半球星空</strong></p>\n<p>null</p>\n<hr>\n<p><strong>第13章 资源</strong></p>\n<p>null</p>\n"},{"title":"NFT合约开发","date":"2023-04-17T11:59:00.000Z","auto_excerpt":"true","_content":"\n\n\n## 前言\n\n这篇文章写得比较早，那时候连WTF都是一本野鸡教程（我还是比较讨厌其商业化的，毕竟其实大家都觉得它写得很烂不是吗，solodity届谭浩强，只是那时候中文资料少填补了空白），而中文资料几乎都是过期的，全靠啃稀少的最新英文文档。\n\n不过好在solidity是一个简单的语言，唯一复杂一点是内联汇编，它的语法是有限的，它的过程是有限的（代码长度直接和gas fee相关），状态是有限的（变量的类型少，实际代码中，个数也要尽量少），毕竟以太坊虚拟机性能有限。\n\n最后，安全，安全就是一切。\n\n\n\n# NFT合约开发\n\n  \n\n**开发经验**\n\n  \n\n1. 所有的函数都是围绕着修修改改那几个你事先规定的状态变量\n\n2. 状态变量修改之前要校验其它所有相关状态变量是否合法\n\n3. 状态变量修改之后要检查对等修改其它所有相关状态变量是否需要改变\n\n  \n\n---\n\n  \n\n**怎么写铸币**\n\n  \n\n铸币函数的形参都是 输入铸币地址和令牌编号，重写铸币函数的时候，先校验一些参数合法性：\n\n  \n\n1. 外部地址：`require(tx.origin == msg.sender, \"Only EOA\");`\n\n2. 令牌总数：`require(totalSupply() + _numberOfTokens <= MAX_SUPPLY,\"Max Limit To Presale\");`\n\n3. 铸币限额：`require(_numberOfTokens <= maxByMint, \"Exceeds Amount\");`\n\n4. 铸币金额：`require(mintPrice * _numberOfTokens <= msg.value, \"Low Price To Mint\");`\n\n  \n\n然后写一个for循环，铸币几次就循环几次\n\n  \n\n如果使用了ERC721URIStorage法控制tokenURI，那么mint函数铸币之后需要紧接着调用_setTokenURI函数，详见怎么写URI\n\n  \n\n铸币函数如果要写返回值，最好能返回铸币id\n\n  \n\n```solidity\n\nfor (uint8 i = 0; i < _numberOfTokens; i += 1) {\n\nuint16 tokenId = uint16(totalSupply() + i);\n\n_safeMint(msg.sender, tokenId);\n\n}\n\n```\n\n  \n\n如果想要让白名单铸币和公售同时进行，且保留白名单铸币的权利，可以写一个maxsupply的状态变量，让公售函数对maxsupply进行检查，而白名单不检查即可（可能在开图之前要设置一个图片让所有铸币者都获得同一张图片，然后铸币完成之后慢慢传所有图）\n\n  \n\n---\n\n  \n\n**怎么写构造函数**\n\n  \n\n1. 在合约内部写`constructor(xxx)public{xxx}`\n\n2. 一般来说，构造函数的首要任务是要把本合约的状态变量全部初始化一遍\n\n3. 构造函数的次要人物是创建合约同时运行一些需要特殊任务定制函数，例如提前铸造一些令牌之类的，此时需要在构造函数的形参位置传入一个地址参数，以供内部msg.sender使用\n\n4. 和其它计算机语言不一样的是solidity是先有的合约代码后有的构造函数，构造函数就真是个初始化器，先存在着，然后用构造函数初始化\n\n5. 对继承关系的合约，写本合约的构造函数时是在“写一个函数”，对形参要标注数据类型，但是对父合约的构造函数要填的是实参，父合约构造函数通常是ERC721(”项目名称”,”项目简记符”)\n\n6. 令牌编号从1开始比从0开始更节省gas费，所以可以在构造的时候就把令牌id计数器从0自增到1\n\n  \n\n```solidity\n\nconstructor(address _admin) ERC721(\"Bandits In The Metaverse\", \"BITM\") {\n\nMAX_SUPPLY = 3333;\n\nRESEVE_AMOUNT = 133;\n\nmintPrice = 0.025 ether;\n\nmaxByMint = 3;\n\nadmin = _admin;\n\nuint16 tokenId = totalSupply();\n\n_safeMint(msg.sender, tokenId);\n\nmintedCount = mintedCount + 1;\n\n}\n\n```\n\n  \n\n---\n\n  \n\n**怎么写URI**\n\n  \n\nIPFS：\n\n  \n\n1. 合约里存的tokenURI是存一大批.json文件的ipfs地址，这些json用文件夹上传功能组织起来\n\n2. 每个.json里存一大批图片地址，图片们也是另一个ipfs文件夹\n\n  \n\nERC721URIStorage法：\n\n  \n\n1. 合成TokenURI：先写一个getTokenURI函数，这个函数对baseURI和TokenId进行合成然后返回URI。\n\n2. 函数体先输入令牌id，强制把令牌id转换为String格式，然后设置String格式的HeadString和FooterString，前者是metadata数据网址的前面部分（ipfs://xxx之类的），后者是”.json”，然后可以用solidity自带的字符串合成函数`string.concat(xxx)`把HeadString+tokenid+FooterString合成tokenURI并返回，然后查找并返回这个id的TokenURI地址。对三个字符串进行合成并返回可以使用string.concat()函数，格式string.concat([字符串1],[字符串2],[字符串3],…)，这个函数是solidity自带字符串库里面的，强制转换可以用Openzeppelin的utils的String.sol里的toString函数\n\n3. 设置TokenURI：铸币的时候，如果用了openzeppelin的ERC721URIStorage，此文件会定义一个函数_setTokenURI(uint256 tokenId, string memory _tokenURI)，输入TokenId和TokenURI可以设置URI\n\n4. 注意string.concat函数编译器版本必须大于等于0.8.12，坑死\n\n  \n\n---\n\n  \n\n**怎么写函数封装（铸币价格、单次铸币总数）**\n\n  \n\n1. 对每个加减运算符、力所能及使用库然后using for的状态变量，都要用专门的函数、专门的类、专门的库进行封装\n\n2. 不管是引用类型还是值类型的数据，所有数据的身份唯一，传入函数之后要在函数中再创建一个新的memory变量然后赋值给它，在函数中专门用这个memory变量即可，不要让一参分饰多角\n\n  \n\n---\n\n  \n\n**怎么写铸币开关（白名单、公售、阶段1阶段2等）**\n\n  \n\n1. 写一个pause变量，最好是paused以表明到底暂停没暂停，然后每个铸币函数都对这个布尔值进行校验即可\n\n  \n\n```solidity\n\nbool public paused = true;\n\n```\n\n  \n\n---\n\n  \n\n**怎么写白名单**\n\n  \n\n**映射法**\n\n  \n\n1. 定义一个地址到布尔值的映射数据结构，以这个映射类型定义一个白名单地址变量，把所有白名单都写进去，再写个修改器，每次铸币都校验是否为true\n\n  \n\n```solidity\n\nmapping(address => bool) whitelist;\n\n```\n\n  \n\n1. 再写一个地址到布尔值的映射数据结构，定义一个白名单地址已经铸币的变量，每次铸币校验一下这个白单地址是否已经铸币\n\n  \n\n```solidity\n\nmapping(address => bool) whitelistMinted;\n\n```\n\n  \n\n**默克尔树法**\n\n  \n\n使用默克尔树法和分为两部分代码，开发者制作默克尔树和铸币者使用默克尔树\n\n  \n\n1. 制作默克尔树：第一步对所有白名单地址单独进行哈希运算，算出每个白名单地址的哈希值，作为默克尔树的叶，第二步用构造默克尔树的函数和叶数据，进行构造默克尔树对象，第三步调用默克尔树对象的成员方法把根哈希值算出来，根哈希值明文存到合约状态变量中\n\n2. 白名单的验证：第一步把当前用户地址使用算法算出哈希值，即取出树叶，第二步把树叶传入函数判断是否和树根匹配\n\n3. 在网站mint页面，对用户地址进行哈希计算，也就是这个地址的叶节点值，把叶节点传入智能合约调用函数进行验证，这个验证函数是openzeppelin的MerkleProof.sol的成员函数MerkleProof.verify()，可以用布尔值返回树叶是否属于树根\n\n  \n\n---\n\n  \n\n**怎么写限制每个人铸币的个数**\n\n  \n\n1. 写一个地址到布尔值的映射，铸币的时候储存调用者地址，每次铸币的时候校验有没有铸币\n\n  \n\n```solidity\n\nmapping(address => bool) publicMinted;\n\n```\n\n  \n\n---\n\n  \n\n**怎么上传代码到etherscan**\n\n  \n这个很简单不过etherscan改版了所以删掉了\n\n---\n\n  \n\n**怎么写燃烧**\n\n这个也是以后有机会写了，不过实现比较简单靠自己的智慧吧，纯逻辑方面的一个事情。\n\n**怎么写撤销函数**\n\n这个也是以后有机会写了，不过实现比较简单靠自己的智慧吧，纯逻辑方面的一个事情。\n\n**怎么写开图**\n\n这个也是以后有机会写了，根据图片的存储方式一般有两种（cryptopunk那种情况是一枝独秀，我们都很欣赏它）。\n\n第一种是ipfs的，除非你自己搭建ipfs存储（而且效果一般很不好），否则一般建议两种实现方式，首先是吉祥物很魔性的Pinata（一个好的吉祥物会让你忘不掉这个公司），其提供一定存储容量的免费空间，文件上传之后几乎立等可用；其次是对NFT而言，用OpenSea投资的nft.storage比较方便（几乎一键，该公司对资源的投入和给予力度很大和很慷慨）。\n\n第二种是自己搭个服务器，猴子那种，人话说自己盖图床。\n\n有一定编码水平的程序员看了思路应该就知道怎么搭了，剩下的是细节问题。\n\n**怎么写合约自毁**\n\n这个也是以后有机会写了，不过实现比较简单靠自己的智慧吧，纯逻辑方面的一个事情。\n\n**怎么写工厂模式**\n\n唯一有点技术含量的，这个也是以后有机会写了，这利用了solodity的一个特性，youtube上有教程。\n\n**怎么写版税**\n\n这个也是以后有机会写了。","source":"_posts/Solidity/NFT合约开发.md","raw":"---\ntitle: NFT合约开发\ndate: 2023-04-17 19:59:00\ntags: \ncategories:\n  - - Solidity\nauto_excerpt: \"true\"\n---\n\n\n\n## 前言\n\n这篇文章写得比较早，那时候连WTF都是一本野鸡教程（我还是比较讨厌其商业化的，毕竟其实大家都觉得它写得很烂不是吗，solodity届谭浩强，只是那时候中文资料少填补了空白），而中文资料几乎都是过期的，全靠啃稀少的最新英文文档。\n\n不过好在solidity是一个简单的语言，唯一复杂一点是内联汇编，它的语法是有限的，它的过程是有限的（代码长度直接和gas fee相关），状态是有限的（变量的类型少，实际代码中，个数也要尽量少），毕竟以太坊虚拟机性能有限。\n\n最后，安全，安全就是一切。\n\n\n\n# NFT合约开发\n\n  \n\n**开发经验**\n\n  \n\n1. 所有的函数都是围绕着修修改改那几个你事先规定的状态变量\n\n2. 状态变量修改之前要校验其它所有相关状态变量是否合法\n\n3. 状态变量修改之后要检查对等修改其它所有相关状态变量是否需要改变\n\n  \n\n---\n\n  \n\n**怎么写铸币**\n\n  \n\n铸币函数的形参都是 输入铸币地址和令牌编号，重写铸币函数的时候，先校验一些参数合法性：\n\n  \n\n1. 外部地址：`require(tx.origin == msg.sender, \"Only EOA\");`\n\n2. 令牌总数：`require(totalSupply() + _numberOfTokens <= MAX_SUPPLY,\"Max Limit To Presale\");`\n\n3. 铸币限额：`require(_numberOfTokens <= maxByMint, \"Exceeds Amount\");`\n\n4. 铸币金额：`require(mintPrice * _numberOfTokens <= msg.value, \"Low Price To Mint\");`\n\n  \n\n然后写一个for循环，铸币几次就循环几次\n\n  \n\n如果使用了ERC721URIStorage法控制tokenURI，那么mint函数铸币之后需要紧接着调用_setTokenURI函数，详见怎么写URI\n\n  \n\n铸币函数如果要写返回值，最好能返回铸币id\n\n  \n\n```solidity\n\nfor (uint8 i = 0; i < _numberOfTokens; i += 1) {\n\nuint16 tokenId = uint16(totalSupply() + i);\n\n_safeMint(msg.sender, tokenId);\n\n}\n\n```\n\n  \n\n如果想要让白名单铸币和公售同时进行，且保留白名单铸币的权利，可以写一个maxsupply的状态变量，让公售函数对maxsupply进行检查，而白名单不检查即可（可能在开图之前要设置一个图片让所有铸币者都获得同一张图片，然后铸币完成之后慢慢传所有图）\n\n  \n\n---\n\n  \n\n**怎么写构造函数**\n\n  \n\n1. 在合约内部写`constructor(xxx)public{xxx}`\n\n2. 一般来说，构造函数的首要任务是要把本合约的状态变量全部初始化一遍\n\n3. 构造函数的次要人物是创建合约同时运行一些需要特殊任务定制函数，例如提前铸造一些令牌之类的，此时需要在构造函数的形参位置传入一个地址参数，以供内部msg.sender使用\n\n4. 和其它计算机语言不一样的是solidity是先有的合约代码后有的构造函数，构造函数就真是个初始化器，先存在着，然后用构造函数初始化\n\n5. 对继承关系的合约，写本合约的构造函数时是在“写一个函数”，对形参要标注数据类型，但是对父合约的构造函数要填的是实参，父合约构造函数通常是ERC721(”项目名称”,”项目简记符”)\n\n6. 令牌编号从1开始比从0开始更节省gas费，所以可以在构造的时候就把令牌id计数器从0自增到1\n\n  \n\n```solidity\n\nconstructor(address _admin) ERC721(\"Bandits In The Metaverse\", \"BITM\") {\n\nMAX_SUPPLY = 3333;\n\nRESEVE_AMOUNT = 133;\n\nmintPrice = 0.025 ether;\n\nmaxByMint = 3;\n\nadmin = _admin;\n\nuint16 tokenId = totalSupply();\n\n_safeMint(msg.sender, tokenId);\n\nmintedCount = mintedCount + 1;\n\n}\n\n```\n\n  \n\n---\n\n  \n\n**怎么写URI**\n\n  \n\nIPFS：\n\n  \n\n1. 合约里存的tokenURI是存一大批.json文件的ipfs地址，这些json用文件夹上传功能组织起来\n\n2. 每个.json里存一大批图片地址，图片们也是另一个ipfs文件夹\n\n  \n\nERC721URIStorage法：\n\n  \n\n1. 合成TokenURI：先写一个getTokenURI函数，这个函数对baseURI和TokenId进行合成然后返回URI。\n\n2. 函数体先输入令牌id，强制把令牌id转换为String格式，然后设置String格式的HeadString和FooterString，前者是metadata数据网址的前面部分（ipfs://xxx之类的），后者是”.json”，然后可以用solidity自带的字符串合成函数`string.concat(xxx)`把HeadString+tokenid+FooterString合成tokenURI并返回，然后查找并返回这个id的TokenURI地址。对三个字符串进行合成并返回可以使用string.concat()函数，格式string.concat([字符串1],[字符串2],[字符串3],…)，这个函数是solidity自带字符串库里面的，强制转换可以用Openzeppelin的utils的String.sol里的toString函数\n\n3. 设置TokenURI：铸币的时候，如果用了openzeppelin的ERC721URIStorage，此文件会定义一个函数_setTokenURI(uint256 tokenId, string memory _tokenURI)，输入TokenId和TokenURI可以设置URI\n\n4. 注意string.concat函数编译器版本必须大于等于0.8.12，坑死\n\n  \n\n---\n\n  \n\n**怎么写函数封装（铸币价格、单次铸币总数）**\n\n  \n\n1. 对每个加减运算符、力所能及使用库然后using for的状态变量，都要用专门的函数、专门的类、专门的库进行封装\n\n2. 不管是引用类型还是值类型的数据，所有数据的身份唯一，传入函数之后要在函数中再创建一个新的memory变量然后赋值给它，在函数中专门用这个memory变量即可，不要让一参分饰多角\n\n  \n\n---\n\n  \n\n**怎么写铸币开关（白名单、公售、阶段1阶段2等）**\n\n  \n\n1. 写一个pause变量，最好是paused以表明到底暂停没暂停，然后每个铸币函数都对这个布尔值进行校验即可\n\n  \n\n```solidity\n\nbool public paused = true;\n\n```\n\n  \n\n---\n\n  \n\n**怎么写白名单**\n\n  \n\n**映射法**\n\n  \n\n1. 定义一个地址到布尔值的映射数据结构，以这个映射类型定义一个白名单地址变量，把所有白名单都写进去，再写个修改器，每次铸币都校验是否为true\n\n  \n\n```solidity\n\nmapping(address => bool) whitelist;\n\n```\n\n  \n\n1. 再写一个地址到布尔值的映射数据结构，定义一个白名单地址已经铸币的变量，每次铸币校验一下这个白单地址是否已经铸币\n\n  \n\n```solidity\n\nmapping(address => bool) whitelistMinted;\n\n```\n\n  \n\n**默克尔树法**\n\n  \n\n使用默克尔树法和分为两部分代码，开发者制作默克尔树和铸币者使用默克尔树\n\n  \n\n1. 制作默克尔树：第一步对所有白名单地址单独进行哈希运算，算出每个白名单地址的哈希值，作为默克尔树的叶，第二步用构造默克尔树的函数和叶数据，进行构造默克尔树对象，第三步调用默克尔树对象的成员方法把根哈希值算出来，根哈希值明文存到合约状态变量中\n\n2. 白名单的验证：第一步把当前用户地址使用算法算出哈希值，即取出树叶，第二步把树叶传入函数判断是否和树根匹配\n\n3. 在网站mint页面，对用户地址进行哈希计算，也就是这个地址的叶节点值，把叶节点传入智能合约调用函数进行验证，这个验证函数是openzeppelin的MerkleProof.sol的成员函数MerkleProof.verify()，可以用布尔值返回树叶是否属于树根\n\n  \n\n---\n\n  \n\n**怎么写限制每个人铸币的个数**\n\n  \n\n1. 写一个地址到布尔值的映射，铸币的时候储存调用者地址，每次铸币的时候校验有没有铸币\n\n  \n\n```solidity\n\nmapping(address => bool) publicMinted;\n\n```\n\n  \n\n---\n\n  \n\n**怎么上传代码到etherscan**\n\n  \n这个很简单不过etherscan改版了所以删掉了\n\n---\n\n  \n\n**怎么写燃烧**\n\n这个也是以后有机会写了，不过实现比较简单靠自己的智慧吧，纯逻辑方面的一个事情。\n\n**怎么写撤销函数**\n\n这个也是以后有机会写了，不过实现比较简单靠自己的智慧吧，纯逻辑方面的一个事情。\n\n**怎么写开图**\n\n这个也是以后有机会写了，根据图片的存储方式一般有两种（cryptopunk那种情况是一枝独秀，我们都很欣赏它）。\n\n第一种是ipfs的，除非你自己搭建ipfs存储（而且效果一般很不好），否则一般建议两种实现方式，首先是吉祥物很魔性的Pinata（一个好的吉祥物会让你忘不掉这个公司），其提供一定存储容量的免费空间，文件上传之后几乎立等可用；其次是对NFT而言，用OpenSea投资的nft.storage比较方便（几乎一键，该公司对资源的投入和给予力度很大和很慷慨）。\n\n第二种是自己搭个服务器，猴子那种，人话说自己盖图床。\n\n有一定编码水平的程序员看了思路应该就知道怎么搭了，剩下的是细节问题。\n\n**怎么写合约自毁**\n\n这个也是以后有机会写了，不过实现比较简单靠自己的智慧吧，纯逻辑方面的一个事情。\n\n**怎么写工厂模式**\n\n唯一有点技术含量的，这个也是以后有机会写了，这利用了solodity的一个特性，youtube上有教程。\n\n**怎么写版税**\n\n这个也是以后有机会写了。","slug":"Solidity/NFT合约开发","published":1,"updated":"2024-04-16T20:32:54.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnr70005hk8zgk8905e3","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这篇文章写得比较早，那时候连WTF都是一本野鸡教程（我还是比较讨厌其商业化的，毕竟其实大家都觉得它写得很烂不是吗，solodity届谭浩强，只是那时候中文资料少填补了空白），而中文资料几乎都是过期的，全靠啃稀少的最新英文文档。</p>\n<p>不过好在solidity是一个简单的语言，唯一复杂一点是内联汇编，它的语法是有限的，它的过程是有限的（代码长度直接和gas fee相关），状态是有限的（变量的类型少，实际代码中，个数也要尽量少），毕竟以太坊虚拟机性能有限。</p>\n<p>最后，安全，安全就是一切。</p>\n<h1 id=\"NFT合约开发\"><a href=\"#NFT合约开发\" class=\"headerlink\" title=\"NFT合约开发\"></a>NFT合约开发</h1><p><strong>开发经验</strong></p>\n<ol>\n<li><p>所有的函数都是围绕着修修改改那几个你事先规定的状态变量</p>\n</li>\n<li><p>状态变量修改之前要校验其它所有相关状态变量是否合法</p>\n</li>\n<li><p>状态变量修改之后要检查对等修改其它所有相关状态变量是否需要改变</p>\n</li>\n</ol>\n<hr>\n<p><strong>怎么写铸币</strong></p>\n<p>铸币函数的形参都是 输入铸币地址和令牌编号，重写铸币函数的时候，先校验一些参数合法性：</p>\n<ol>\n<li><p>外部地址：<code>require(tx.origin == msg.sender, &quot;Only EOA&quot;);</code></p>\n</li>\n<li><p>令牌总数：<code>require(totalSupply() + _numberOfTokens &lt;= MAX_SUPPLY,&quot;Max Limit To Presale&quot;);</code></p>\n</li>\n<li><p>铸币限额：<code>require(_numberOfTokens &lt;= maxByMint, &quot;Exceeds Amount&quot;);</code></p>\n</li>\n<li><p>铸币金额：<code>require(mintPrice * _numberOfTokens &lt;= msg.value, &quot;Low Price To Mint&quot;);</code></p>\n</li>\n</ol>\n<p>然后写一个for循环，铸币几次就循环几次</p>\n<p>如果使用了ERC721URIStorage法控制tokenURI，那么mint函数铸币之后需要紧接着调用_setTokenURI函数，详见怎么写URI</p>\n<p>铸币函数如果要写返回值，最好能返回铸币id</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">for (uint8 i = 0; i &lt; _numberOfTokens; i += 1) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">uint16 tokenId = uint16(totalSupply() + i);</span><br><span class=\"line\"></span><br><span class=\"line\">_safeMint(msg.sender, tokenId);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果想要让白名单铸币和公售同时进行，且保留白名单铸币的权利，可以写一个maxsupply的状态变量，让公售函数对maxsupply进行检查，而白名单不检查即可（可能在开图之前要设置一个图片让所有铸币者都获得同一张图片，然后铸币完成之后慢慢传所有图）</p>\n<hr>\n<p><strong>怎么写构造函数</strong></p>\n<ol>\n<li><p>在合约内部写<code>constructor(xxx)public&#123;xxx&#125;</code></p>\n</li>\n<li><p>一般来说，构造函数的首要任务是要把本合约的状态变量全部初始化一遍</p>\n</li>\n<li><p>构造函数的次要人物是创建合约同时运行一些需要特殊任务定制函数，例如提前铸造一些令牌之类的，此时需要在构造函数的形参位置传入一个地址参数，以供内部msg.sender使用</p>\n</li>\n<li><p>和其它计算机语言不一样的是solidity是先有的合约代码后有的构造函数，构造函数就真是个初始化器，先存在着，然后用构造函数初始化</p>\n</li>\n<li><p>对继承关系的合约，写本合约的构造函数时是在“写一个函数”，对形参要标注数据类型，但是对父合约的构造函数要填的是实参，父合约构造函数通常是ERC721(”项目名称”,”项目简记符”)</p>\n</li>\n<li><p>令牌编号从1开始比从0开始更节省gas费，所以可以在构造的时候就把令牌id计数器从0自增到1</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">constructor(address _admin) ERC721(&quot;Bandits In The Metaverse&quot;, &quot;BITM&quot;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">MAX_SUPPLY = 3333;</span><br><span class=\"line\"></span><br><span class=\"line\">RESEVE_AMOUNT = 133;</span><br><span class=\"line\"></span><br><span class=\"line\">mintPrice = 0.025 ether;</span><br><span class=\"line\"></span><br><span class=\"line\">maxByMint = 3;</span><br><span class=\"line\"></span><br><span class=\"line\">admin = _admin;</span><br><span class=\"line\"></span><br><span class=\"line\">uint16 tokenId = totalSupply();</span><br><span class=\"line\"></span><br><span class=\"line\">_safeMint(msg.sender, tokenId);</span><br><span class=\"line\"></span><br><span class=\"line\">mintedCount = mintedCount + 1;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>怎么写URI</strong></p>\n<p>IPFS：</p>\n<ol>\n<li><p>合约里存的tokenURI是存一大批.json文件的ipfs地址，这些json用文件夹上传功能组织起来</p>\n</li>\n<li><p>每个.json里存一大批图片地址，图片们也是另一个ipfs文件夹</p>\n</li>\n</ol>\n<p>ERC721URIStorage法：</p>\n<ol>\n<li><p>合成TokenURI：先写一个getTokenURI函数，这个函数对baseURI和TokenId进行合成然后返回URI。</p>\n</li>\n<li><p>函数体先输入令牌id，强制把令牌id转换为String格式，然后设置String格式的HeadString和FooterString，前者是metadata数据网址的前面部分（ipfs:&#x2F;&#x2F;xxx之类的），后者是”.json”，然后可以用solidity自带的字符串合成函数<code>string.concat(xxx)</code>把HeadString+tokenid+FooterString合成tokenURI并返回，然后查找并返回这个id的TokenURI地址。对三个字符串进行合成并返回可以使用string.concat()函数，格式string.concat([字符串1],[字符串2],[字符串3],…)，这个函数是solidity自带字符串库里面的，强制转换可以用Openzeppelin的utils的String.sol里的toString函数</p>\n</li>\n<li><p>设置TokenURI：铸币的时候，如果用了openzeppelin的ERC721URIStorage，此文件会定义一个函数_setTokenURI(uint256 tokenId, string memory _tokenURI)，输入TokenId和TokenURI可以设置URI</p>\n</li>\n<li><p>注意string.concat函数编译器版本必须大于等于0.8.12，坑死</p>\n</li>\n</ol>\n<hr>\n<p><strong>怎么写函数封装（铸币价格、单次铸币总数）</strong></p>\n<ol>\n<li><p>对每个加减运算符、力所能及使用库然后using for的状态变量，都要用专门的函数、专门的类、专门的库进行封装</p>\n</li>\n<li><p>不管是引用类型还是值类型的数据，所有数据的身份唯一，传入函数之后要在函数中再创建一个新的memory变量然后赋值给它，在函数中专门用这个memory变量即可，不要让一参分饰多角</p>\n</li>\n</ol>\n<hr>\n<p><strong>怎么写铸币开关（白名单、公售、阶段1阶段2等）</strong></p>\n<ol>\n<li>写一个pause变量，最好是paused以表明到底暂停没暂停，然后每个铸币函数都对这个布尔值进行校验即可</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">bool public paused = true;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>怎么写白名单</strong></p>\n<p><strong>映射法</strong></p>\n<ol>\n<li>定义一个地址到布尔值的映射数据结构，以这个映射类型定义一个白名单地址变量，把所有白名单都写进去，再写个修改器，每次铸币都校验是否为true</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mapping(address =&gt; bool) whitelist;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>再写一个地址到布尔值的映射数据结构，定义一个白名单地址已经铸币的变量，每次铸币校验一下这个白单地址是否已经铸币</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mapping(address =&gt; bool) whitelistMinted;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>默克尔树法</strong></p>\n<p>使用默克尔树法和分为两部分代码，开发者制作默克尔树和铸币者使用默克尔树</p>\n<ol>\n<li><p>制作默克尔树：第一步对所有白名单地址单独进行哈希运算，算出每个白名单地址的哈希值，作为默克尔树的叶，第二步用构造默克尔树的函数和叶数据，进行构造默克尔树对象，第三步调用默克尔树对象的成员方法把根哈希值算出来，根哈希值明文存到合约状态变量中</p>\n</li>\n<li><p>白名单的验证：第一步把当前用户地址使用算法算出哈希值，即取出树叶，第二步把树叶传入函数判断是否和树根匹配</p>\n</li>\n<li><p>在网站mint页面，对用户地址进行哈希计算，也就是这个地址的叶节点值，把叶节点传入智能合约调用函数进行验证，这个验证函数是openzeppelin的MerkleProof.sol的成员函数MerkleProof.verify()，可以用布尔值返回树叶是否属于树根</p>\n</li>\n</ol>\n<hr>\n<p><strong>怎么写限制每个人铸币的个数</strong></p>\n<ol>\n<li>写一个地址到布尔值的映射，铸币的时候储存调用者地址，每次铸币的时候校验有没有铸币</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mapping(address =&gt; bool) publicMinted;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>怎么上传代码到etherscan</strong></p>\n<p>这个很简单不过etherscan改版了所以删掉了</p>\n<hr>\n<p><strong>怎么写燃烧</strong></p>\n<p>这个也是以后有机会写了，不过实现比较简单靠自己的智慧吧，纯逻辑方面的一个事情。</p>\n<p><strong>怎么写撤销函数</strong></p>\n<p>这个也是以后有机会写了，不过实现比较简单靠自己的智慧吧，纯逻辑方面的一个事情。</p>\n<p><strong>怎么写开图</strong></p>\n<p>这个也是以后有机会写了，根据图片的存储方式一般有两种（cryptopunk那种情况是一枝独秀，我们都很欣赏它）。</p>\n<p>第一种是ipfs的，除非你自己搭建ipfs存储（而且效果一般很不好），否则一般建议两种实现方式，首先是吉祥物很魔性的Pinata（一个好的吉祥物会让你忘不掉这个公司），其提供一定存储容量的免费空间，文件上传之后几乎立等可用；其次是对NFT而言，用OpenSea投资的nft.storage比较方便（几乎一键，该公司对资源的投入和给予力度很大和很慷慨）。</p>\n<p>第二种是自己搭个服务器，猴子那种，人话说自己盖图床。</p>\n<p>有一定编码水平的程序员看了思路应该就知道怎么搭了，剩下的是细节问题。</p>\n<p><strong>怎么写合约自毁</strong></p>\n<p>这个也是以后有机会写了，不过实现比较简单靠自己的智慧吧，纯逻辑方面的一个事情。</p>\n<p><strong>怎么写工厂模式</strong></p>\n<p>唯一有点技术含量的，这个也是以后有机会写了，这利用了solodity的一个特性，youtube上有教程。</p>\n<p><strong>怎么写版税</strong></p>\n<p>这个也是以后有机会写了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这篇文章写得比较早，那时候连WTF都是一本野鸡教程（我还是比较讨厌其商业化的，毕竟其实大家都觉得它写得很烂不是吗，solodity届谭浩强，只是那时候中文资料少填补了空白），而中文资料几乎都是过期的，全靠啃稀少的最新英文文档。</p>\n<p>不过好在solidity是一个简单的语言，唯一复杂一点是内联汇编，它的语法是有限的，它的过程是有限的（代码长度直接和gas fee相关），状态是有限的（变量的类型少，实际代码中，个数也要尽量少），毕竟以太坊虚拟机性能有限。</p>\n<p>最后，安全，安全就是一切。</p>\n<h1 id=\"NFT合约开发\"><a href=\"#NFT合约开发\" class=\"headerlink\" title=\"NFT合约开发\"></a>NFT合约开发</h1><p><strong>开发经验</strong></p>\n<ol>\n<li><p>所有的函数都是围绕着修修改改那几个你事先规定的状态变量</p>\n</li>\n<li><p>状态变量修改之前要校验其它所有相关状态变量是否合法</p>\n</li>\n<li><p>状态变量修改之后要检查对等修改其它所有相关状态变量是否需要改变</p>\n</li>\n</ol>\n<hr>\n<p><strong>怎么写铸币</strong></p>\n<p>铸币函数的形参都是 输入铸币地址和令牌编号，重写铸币函数的时候，先校验一些参数合法性：</p>\n<ol>\n<li><p>外部地址：<code>require(tx.origin == msg.sender, &quot;Only EOA&quot;);</code></p>\n</li>\n<li><p>令牌总数：<code>require(totalSupply() + _numberOfTokens &lt;= MAX_SUPPLY,&quot;Max Limit To Presale&quot;);</code></p>\n</li>\n<li><p>铸币限额：<code>require(_numberOfTokens &lt;= maxByMint, &quot;Exceeds Amount&quot;);</code></p>\n</li>\n<li><p>铸币金额：<code>require(mintPrice * _numberOfTokens &lt;= msg.value, &quot;Low Price To Mint&quot;);</code></p>\n</li>\n</ol>\n<p>然后写一个for循环，铸币几次就循环几次</p>\n<p>如果使用了ERC721URIStorage法控制tokenURI，那么mint函数铸币之后需要紧接着调用_setTokenURI函数，详见怎么写URI</p>\n<p>铸币函数如果要写返回值，最好能返回铸币id</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">for (uint8 i = 0; i &lt; _numberOfTokens; i += 1) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">uint16 tokenId = uint16(totalSupply() + i);</span><br><span class=\"line\"></span><br><span class=\"line\">_safeMint(msg.sender, tokenId);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果想要让白名单铸币和公售同时进行，且保留白名单铸币的权利，可以写一个maxsupply的状态变量，让公售函数对maxsupply进行检查，而白名单不检查即可（可能在开图之前要设置一个图片让所有铸币者都获得同一张图片，然后铸币完成之后慢慢传所有图）</p>\n<hr>\n<p><strong>怎么写构造函数</strong></p>\n<ol>\n<li><p>在合约内部写<code>constructor(xxx)public&#123;xxx&#125;</code></p>\n</li>\n<li><p>一般来说，构造函数的首要任务是要把本合约的状态变量全部初始化一遍</p>\n</li>\n<li><p>构造函数的次要人物是创建合约同时运行一些需要特殊任务定制函数，例如提前铸造一些令牌之类的，此时需要在构造函数的形参位置传入一个地址参数，以供内部msg.sender使用</p>\n</li>\n<li><p>和其它计算机语言不一样的是solidity是先有的合约代码后有的构造函数，构造函数就真是个初始化器，先存在着，然后用构造函数初始化</p>\n</li>\n<li><p>对继承关系的合约，写本合约的构造函数时是在“写一个函数”，对形参要标注数据类型，但是对父合约的构造函数要填的是实参，父合约构造函数通常是ERC721(”项目名称”,”项目简记符”)</p>\n</li>\n<li><p>令牌编号从1开始比从0开始更节省gas费，所以可以在构造的时候就把令牌id计数器从0自增到1</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">constructor(address _admin) ERC721(&quot;Bandits In The Metaverse&quot;, &quot;BITM&quot;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">MAX_SUPPLY = 3333;</span><br><span class=\"line\"></span><br><span class=\"line\">RESEVE_AMOUNT = 133;</span><br><span class=\"line\"></span><br><span class=\"line\">mintPrice = 0.025 ether;</span><br><span class=\"line\"></span><br><span class=\"line\">maxByMint = 3;</span><br><span class=\"line\"></span><br><span class=\"line\">admin = _admin;</span><br><span class=\"line\"></span><br><span class=\"line\">uint16 tokenId = totalSupply();</span><br><span class=\"line\"></span><br><span class=\"line\">_safeMint(msg.sender, tokenId);</span><br><span class=\"line\"></span><br><span class=\"line\">mintedCount = mintedCount + 1;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>怎么写URI</strong></p>\n<p>IPFS：</p>\n<ol>\n<li><p>合约里存的tokenURI是存一大批.json文件的ipfs地址，这些json用文件夹上传功能组织起来</p>\n</li>\n<li><p>每个.json里存一大批图片地址，图片们也是另一个ipfs文件夹</p>\n</li>\n</ol>\n<p>ERC721URIStorage法：</p>\n<ol>\n<li><p>合成TokenURI：先写一个getTokenURI函数，这个函数对baseURI和TokenId进行合成然后返回URI。</p>\n</li>\n<li><p>函数体先输入令牌id，强制把令牌id转换为String格式，然后设置String格式的HeadString和FooterString，前者是metadata数据网址的前面部分（ipfs:&#x2F;&#x2F;xxx之类的），后者是”.json”，然后可以用solidity自带的字符串合成函数<code>string.concat(xxx)</code>把HeadString+tokenid+FooterString合成tokenURI并返回，然后查找并返回这个id的TokenURI地址。对三个字符串进行合成并返回可以使用string.concat()函数，格式string.concat([字符串1],[字符串2],[字符串3],…)，这个函数是solidity自带字符串库里面的，强制转换可以用Openzeppelin的utils的String.sol里的toString函数</p>\n</li>\n<li><p>设置TokenURI：铸币的时候，如果用了openzeppelin的ERC721URIStorage，此文件会定义一个函数_setTokenURI(uint256 tokenId, string memory _tokenURI)，输入TokenId和TokenURI可以设置URI</p>\n</li>\n<li><p>注意string.concat函数编译器版本必须大于等于0.8.12，坑死</p>\n</li>\n</ol>\n<hr>\n<p><strong>怎么写函数封装（铸币价格、单次铸币总数）</strong></p>\n<ol>\n<li><p>对每个加减运算符、力所能及使用库然后using for的状态变量，都要用专门的函数、专门的类、专门的库进行封装</p>\n</li>\n<li><p>不管是引用类型还是值类型的数据，所有数据的身份唯一，传入函数之后要在函数中再创建一个新的memory变量然后赋值给它，在函数中专门用这个memory变量即可，不要让一参分饰多角</p>\n</li>\n</ol>\n<hr>\n<p><strong>怎么写铸币开关（白名单、公售、阶段1阶段2等）</strong></p>\n<ol>\n<li>写一个pause变量，最好是paused以表明到底暂停没暂停，然后每个铸币函数都对这个布尔值进行校验即可</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">bool public paused = true;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>怎么写白名单</strong></p>\n<p><strong>映射法</strong></p>\n<ol>\n<li>定义一个地址到布尔值的映射数据结构，以这个映射类型定义一个白名单地址变量，把所有白名单都写进去，再写个修改器，每次铸币都校验是否为true</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mapping(address =&gt; bool) whitelist;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>再写一个地址到布尔值的映射数据结构，定义一个白名单地址已经铸币的变量，每次铸币校验一下这个白单地址是否已经铸币</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mapping(address =&gt; bool) whitelistMinted;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>默克尔树法</strong></p>\n<p>使用默克尔树法和分为两部分代码，开发者制作默克尔树和铸币者使用默克尔树</p>\n<ol>\n<li><p>制作默克尔树：第一步对所有白名单地址单独进行哈希运算，算出每个白名单地址的哈希值，作为默克尔树的叶，第二步用构造默克尔树的函数和叶数据，进行构造默克尔树对象，第三步调用默克尔树对象的成员方法把根哈希值算出来，根哈希值明文存到合约状态变量中</p>\n</li>\n<li><p>白名单的验证：第一步把当前用户地址使用算法算出哈希值，即取出树叶，第二步把树叶传入函数判断是否和树根匹配</p>\n</li>\n<li><p>在网站mint页面，对用户地址进行哈希计算，也就是这个地址的叶节点值，把叶节点传入智能合约调用函数进行验证，这个验证函数是openzeppelin的MerkleProof.sol的成员函数MerkleProof.verify()，可以用布尔值返回树叶是否属于树根</p>\n</li>\n</ol>\n<hr>\n<p><strong>怎么写限制每个人铸币的个数</strong></p>\n<ol>\n<li>写一个地址到布尔值的映射，铸币的时候储存调用者地址，每次铸币的时候校验有没有铸币</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mapping(address =&gt; bool) publicMinted;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>怎么上传代码到etherscan</strong></p>\n<p>这个很简单不过etherscan改版了所以删掉了</p>\n<hr>\n<p><strong>怎么写燃烧</strong></p>\n<p>这个也是以后有机会写了，不过实现比较简单靠自己的智慧吧，纯逻辑方面的一个事情。</p>\n<p><strong>怎么写撤销函数</strong></p>\n<p>这个也是以后有机会写了，不过实现比较简单靠自己的智慧吧，纯逻辑方面的一个事情。</p>\n<p><strong>怎么写开图</strong></p>\n<p>这个也是以后有机会写了，根据图片的存储方式一般有两种（cryptopunk那种情况是一枝独秀，我们都很欣赏它）。</p>\n<p>第一种是ipfs的，除非你自己搭建ipfs存储（而且效果一般很不好），否则一般建议两种实现方式，首先是吉祥物很魔性的Pinata（一个好的吉祥物会让你忘不掉这个公司），其提供一定存储容量的免费空间，文件上传之后几乎立等可用；其次是对NFT而言，用OpenSea投资的nft.storage比较方便（几乎一键，该公司对资源的投入和给予力度很大和很慷慨）。</p>\n<p>第二种是自己搭个服务器，猴子那种，人话说自己盖图床。</p>\n<p>有一定编码水平的程序员看了思路应该就知道怎么搭了，剩下的是细节问题。</p>\n<p><strong>怎么写合约自毁</strong></p>\n<p>这个也是以后有机会写了，不过实现比较简单靠自己的智慧吧，纯逻辑方面的一个事情。</p>\n<p><strong>怎么写工厂模式</strong></p>\n<p>唯一有点技术含量的，这个也是以后有机会写了，这利用了solodity的一个特性，youtube上有教程。</p>\n<p><strong>怎么写版税</strong></p>\n<p>这个也是以后有机会写了。</p>\n"},{"title":"Vim极简命令手册","date":"2023-04-06T12:19:44.000Z","auto_excerpt":"true","_content":"## 前言和概述\n作为一个大学生，在vim学习中感到初学者平常学一两个命令是没用的，vim的入门第一步必须快速掌握一批能够足够日常编辑文本使用的命令，如增删改查、跳转光标……这样才能够让vim在工作学习中成功发动，进而在使用中熟能生巧、拓展学习其他的快捷键。\n\n以下都是在正常模式下的命令，即按下Esc所进入的模式，这个模式是Vim的精要，掌握了这些移动光标、切换插入模式、复制粘贴、增改删查、退出，基本能入门使用Vim。\n\n---\n\n## 正常模式\n\n定位光标：\n\n1. 逐个字符移动：hjkl，左下上右，不用去死记，有个简单的记忆方法，这四个字母恰好是键盘上的同一排，这排字母中最左边的h和最右边的h和l恰好对应是左右的意思，只需要记住j和k是下和上即可，进阶用法就是加上前缀数字，比如3j\n2. gg/G：移动到文档头（gg）和移动到文档尾（G），进阶用法就是行号+gg调到指定行【文档移动】\n3. control+f/b：翻页【页移动】\n4. 移动到这一行的首尾：行首0行尾$。值得注意的是，所谓行尾位置是不包括最后一个字符的，最后一个字符那个位置你永远移动不到【行移动】\n5. w/b：前后移动一个单词【行内移动】\n6. f/F+字母：光标移动到后文（使用f）或前文（使用F）中最近的第一个字母之前，进阶用法是这条命令执行之后，还能使用n或者N移动到第二个字母。这个f/F命令其实也可以用更强大的/和?平替【行内移动】\n\n进入插入模式：\n\n1. i/a：i是光标本体位置，即在当前位置原地插入，即方块光标的左边缘位置。a则是在当前位置后一个字符插入，即方块光标的右边缘位置。初学者可能会记不住i和a的位置，其实也不用死记，不记得的时候可以联想一下a是ass（屁股）的意思【泄露了奇怪的记忆方法】\n2. I/A：I是在行首插入，A是在行尾插入\n3. o/O：o在下一行插入，O在上一行插入\n\n复制粘贴：\n\n1. yy：复制1行，进阶用法就是带数字，例如2yy复制2行【行复制】\n2. 可视模式：v+上文中的“定位光标”命令，可以对文本进行选中，然后按y复制，按d剪切【精确复制】\n3. dd和dj：行剪切操作。其实dd就是剪切一行了，dj是剪切本行加上下一行，值得一提的是，不管是dd还是dj，都会把删除的东西放进剪切板【行剪切】\n5. p：在方块光标的右边缘位置粘贴。记住如果是使用yy复制的行，粘贴的时候则会另起一行贴上去，这就是为什么有时候初学者会感到粘贴不好用，对按p之后粘贴的位置不清楚【粘贴】\n6. ddp：交换当前行和下一行【行交换】\n7. xp：交换当前字符和下一个字符【字符交换】\n\n删除：\n\n1. dd：删除一行。进阶用法就是加数字d3d删除三行，还有dj删除上一行dk删除下一行【删除行】\n2. dw：删除一个单词。进阶用法就是加数字d3w删除三个单词，不过控制或者说数单词个数还需要研究一下什么叫单词【删除单词】\n3. x：删除一个字符。进阶用法就是加数字3x删除三个字符【删除字】\n\n把命令重复多遍：数字+命令即可，通常用于插入多个同样的字符比如3 a!`<esc>`\n\n查找替换：\n\n1. 替换：:％s/abc/def/g把所有的 abc 替换为 def\n\n退出：\n\n1. 快速保存并退出：ZZ\n2. 放弃更改重新打开本文件：:e!\n\n","source":"_posts/Vim&&Neovim/Vim极简命令手册.md","raw":"---\ntitle: Vim极简命令手册\ndate: 2023-04-06 20:19:44\ntags: \ncategories:\n  - - Vim&NeoVim\nauto_excerpt: \"true\"\n---\n## 前言和概述\n作为一个大学生，在vim学习中感到初学者平常学一两个命令是没用的，vim的入门第一步必须快速掌握一批能够足够日常编辑文本使用的命令，如增删改查、跳转光标……这样才能够让vim在工作学习中成功发动，进而在使用中熟能生巧、拓展学习其他的快捷键。\n\n以下都是在正常模式下的命令，即按下Esc所进入的模式，这个模式是Vim的精要，掌握了这些移动光标、切换插入模式、复制粘贴、增改删查、退出，基本能入门使用Vim。\n\n---\n\n## 正常模式\n\n定位光标：\n\n1. 逐个字符移动：hjkl，左下上右，不用去死记，有个简单的记忆方法，这四个字母恰好是键盘上的同一排，这排字母中最左边的h和最右边的h和l恰好对应是左右的意思，只需要记住j和k是下和上即可，进阶用法就是加上前缀数字，比如3j\n2. gg/G：移动到文档头（gg）和移动到文档尾（G），进阶用法就是行号+gg调到指定行【文档移动】\n3. control+f/b：翻页【页移动】\n4. 移动到这一行的首尾：行首0行尾$。值得注意的是，所谓行尾位置是不包括最后一个字符的，最后一个字符那个位置你永远移动不到【行移动】\n5. w/b：前后移动一个单词【行内移动】\n6. f/F+字母：光标移动到后文（使用f）或前文（使用F）中最近的第一个字母之前，进阶用法是这条命令执行之后，还能使用n或者N移动到第二个字母。这个f/F命令其实也可以用更强大的/和?平替【行内移动】\n\n进入插入模式：\n\n1. i/a：i是光标本体位置，即在当前位置原地插入，即方块光标的左边缘位置。a则是在当前位置后一个字符插入，即方块光标的右边缘位置。初学者可能会记不住i和a的位置，其实也不用死记，不记得的时候可以联想一下a是ass（屁股）的意思【泄露了奇怪的记忆方法】\n2. I/A：I是在行首插入，A是在行尾插入\n3. o/O：o在下一行插入，O在上一行插入\n\n复制粘贴：\n\n1. yy：复制1行，进阶用法就是带数字，例如2yy复制2行【行复制】\n2. 可视模式：v+上文中的“定位光标”命令，可以对文本进行选中，然后按y复制，按d剪切【精确复制】\n3. dd和dj：行剪切操作。其实dd就是剪切一行了，dj是剪切本行加上下一行，值得一提的是，不管是dd还是dj，都会把删除的东西放进剪切板【行剪切】\n5. p：在方块光标的右边缘位置粘贴。记住如果是使用yy复制的行，粘贴的时候则会另起一行贴上去，这就是为什么有时候初学者会感到粘贴不好用，对按p之后粘贴的位置不清楚【粘贴】\n6. ddp：交换当前行和下一行【行交换】\n7. xp：交换当前字符和下一个字符【字符交换】\n\n删除：\n\n1. dd：删除一行。进阶用法就是加数字d3d删除三行，还有dj删除上一行dk删除下一行【删除行】\n2. dw：删除一个单词。进阶用法就是加数字d3w删除三个单词，不过控制或者说数单词个数还需要研究一下什么叫单词【删除单词】\n3. x：删除一个字符。进阶用法就是加数字3x删除三个字符【删除字】\n\n把命令重复多遍：数字+命令即可，通常用于插入多个同样的字符比如3 a!`<esc>`\n\n查找替换：\n\n1. 替换：:％s/abc/def/g把所有的 abc 替换为 def\n\n退出：\n\n1. 快速保存并退出：ZZ\n2. 放弃更改重新打开本文件：:e!\n\n","slug":"Vim&&Neovim/Vim极简命令手册","published":1,"updated":"2024-04-15T16:07:26.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnr80008hk8zb2qwee7w","content":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p>作为一个大学生，在vim学习中感到初学者平常学一两个命令是没用的，vim的入门第一步必须快速掌握一批能够足够日常编辑文本使用的命令，如增删改查、跳转光标……这样才能够让vim在工作学习中成功发动，进而在使用中熟能生巧、拓展学习其他的快捷键。</p>\n<p>以下都是在正常模式下的命令，即按下Esc所进入的模式，这个模式是Vim的精要，掌握了这些移动光标、切换插入模式、复制粘贴、增改删查、退出，基本能入门使用Vim。</p>\n<hr>\n<h2 id=\"正常模式\"><a href=\"#正常模式\" class=\"headerlink\" title=\"正常模式\"></a>正常模式</h2><p>定位光标：</p>\n<ol>\n<li>逐个字符移动：hjkl，左下上右，不用去死记，有个简单的记忆方法，这四个字母恰好是键盘上的同一排，这排字母中最左边的h和最右边的h和l恰好对应是左右的意思，只需要记住j和k是下和上即可，进阶用法就是加上前缀数字，比如3j</li>\n<li>gg&#x2F;G：移动到文档头（gg）和移动到文档尾（G），进阶用法就是行号+gg调到指定行【文档移动】</li>\n<li>control+f&#x2F;b：翻页【页移动】</li>\n<li>移动到这一行的首尾：行首0行尾$。值得注意的是，所谓行尾位置是不包括最后一个字符的，最后一个字符那个位置你永远移动不到【行移动】</li>\n<li>w&#x2F;b：前后移动一个单词【行内移动】</li>\n<li>f&#x2F;F+字母：光标移动到后文（使用f）或前文（使用F）中最近的第一个字母之前，进阶用法是这条命令执行之后，还能使用n或者N移动到第二个字母。这个f&#x2F;F命令其实也可以用更强大的&#x2F;和?平替【行内移动】</li>\n</ol>\n<p>进入插入模式：</p>\n<ol>\n<li>i&#x2F;a：i是光标本体位置，即在当前位置原地插入，即方块光标的左边缘位置。a则是在当前位置后一个字符插入，即方块光标的右边缘位置。初学者可能会记不住i和a的位置，其实也不用死记，不记得的时候可以联想一下a是ass（屁股）的意思【泄露了奇怪的记忆方法】</li>\n<li>I&#x2F;A：I是在行首插入，A是在行尾插入</li>\n<li>o&#x2F;O：o在下一行插入，O在上一行插入</li>\n</ol>\n<p>复制粘贴：</p>\n<ol>\n<li>yy：复制1行，进阶用法就是带数字，例如2yy复制2行【行复制】</li>\n<li>可视模式：v+上文中的“定位光标”命令，可以对文本进行选中，然后按y复制，按d剪切【精确复制】</li>\n<li>dd和dj：行剪切操作。其实dd就是剪切一行了，dj是剪切本行加上下一行，值得一提的是，不管是dd还是dj，都会把删除的东西放进剪切板【行剪切】</li>\n<li>p：在方块光标的右边缘位置粘贴。记住如果是使用yy复制的行，粘贴的时候则会另起一行贴上去，这就是为什么有时候初学者会感到粘贴不好用，对按p之后粘贴的位置不清楚【粘贴】</li>\n<li>ddp：交换当前行和下一行【行交换】</li>\n<li>xp：交换当前字符和下一个字符【字符交换】</li>\n</ol>\n<p>删除：</p>\n<ol>\n<li>dd：删除一行。进阶用法就是加数字d3d删除三行，还有dj删除上一行dk删除下一行【删除行】</li>\n<li>dw：删除一个单词。进阶用法就是加数字d3w删除三个单词，不过控制或者说数单词个数还需要研究一下什么叫单词【删除单词】</li>\n<li>x：删除一个字符。进阶用法就是加数字3x删除三个字符【删除字】</li>\n</ol>\n<p>把命令重复多遍：数字+命令即可，通常用于插入多个同样的字符比如3 a!<code>&lt;esc&gt;</code></p>\n<p>查找替换：</p>\n<ol>\n<li>替换：:％s&#x2F;abc&#x2F;def&#x2F;g把所有的 abc 替换为 def</li>\n</ol>\n<p>退出：</p>\n<ol>\n<li>快速保存并退出：ZZ</li>\n<li>放弃更改重新打开本文件：:e!</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p>作为一个大学生，在vim学习中感到初学者平常学一两个命令是没用的，vim的入门第一步必须快速掌握一批能够足够日常编辑文本使用的命令，如增删改查、跳转光标……这样才能够让vim在工作学习中成功发动，进而在使用中熟能生巧、拓展学习其他的快捷键。</p>\n<p>以下都是在正常模式下的命令，即按下Esc所进入的模式，这个模式是Vim的精要，掌握了这些移动光标、切换插入模式、复制粘贴、增改删查、退出，基本能入门使用Vim。</p>\n<hr>\n<h2 id=\"正常模式\"><a href=\"#正常模式\" class=\"headerlink\" title=\"正常模式\"></a>正常模式</h2><p>定位光标：</p>\n<ol>\n<li>逐个字符移动：hjkl，左下上右，不用去死记，有个简单的记忆方法，这四个字母恰好是键盘上的同一排，这排字母中最左边的h和最右边的h和l恰好对应是左右的意思，只需要记住j和k是下和上即可，进阶用法就是加上前缀数字，比如3j</li>\n<li>gg&#x2F;G：移动到文档头（gg）和移动到文档尾（G），进阶用法就是行号+gg调到指定行【文档移动】</li>\n<li>control+f&#x2F;b：翻页【页移动】</li>\n<li>移动到这一行的首尾：行首0行尾$。值得注意的是，所谓行尾位置是不包括最后一个字符的，最后一个字符那个位置你永远移动不到【行移动】</li>\n<li>w&#x2F;b：前后移动一个单词【行内移动】</li>\n<li>f&#x2F;F+字母：光标移动到后文（使用f）或前文（使用F）中最近的第一个字母之前，进阶用法是这条命令执行之后，还能使用n或者N移动到第二个字母。这个f&#x2F;F命令其实也可以用更强大的&#x2F;和?平替【行内移动】</li>\n</ol>\n<p>进入插入模式：</p>\n<ol>\n<li>i&#x2F;a：i是光标本体位置，即在当前位置原地插入，即方块光标的左边缘位置。a则是在当前位置后一个字符插入，即方块光标的右边缘位置。初学者可能会记不住i和a的位置，其实也不用死记，不记得的时候可以联想一下a是ass（屁股）的意思【泄露了奇怪的记忆方法】</li>\n<li>I&#x2F;A：I是在行首插入，A是在行尾插入</li>\n<li>o&#x2F;O：o在下一行插入，O在上一行插入</li>\n</ol>\n<p>复制粘贴：</p>\n<ol>\n<li>yy：复制1行，进阶用法就是带数字，例如2yy复制2行【行复制】</li>\n<li>可视模式：v+上文中的“定位光标”命令，可以对文本进行选中，然后按y复制，按d剪切【精确复制】</li>\n<li>dd和dj：行剪切操作。其实dd就是剪切一行了，dj是剪切本行加上下一行，值得一提的是，不管是dd还是dj，都会把删除的东西放进剪切板【行剪切】</li>\n<li>p：在方块光标的右边缘位置粘贴。记住如果是使用yy复制的行，粘贴的时候则会另起一行贴上去，这就是为什么有时候初学者会感到粘贴不好用，对按p之后粘贴的位置不清楚【粘贴】</li>\n<li>ddp：交换当前行和下一行【行交换】</li>\n<li>xp：交换当前字符和下一个字符【字符交换】</li>\n</ol>\n<p>删除：</p>\n<ol>\n<li>dd：删除一行。进阶用法就是加数字d3d删除三行，还有dj删除上一行dk删除下一行【删除行】</li>\n<li>dw：删除一个单词。进阶用法就是加数字d3w删除三个单词，不过控制或者说数单词个数还需要研究一下什么叫单词【删除单词】</li>\n<li>x：删除一个字符。进阶用法就是加数字3x删除三个字符【删除字】</li>\n</ol>\n<p>把命令重复多遍：数字+命令即可，通常用于插入多个同样的字符比如3 a!<code>&lt;esc&gt;</code></p>\n<p>查找替换：</p>\n<ol>\n<li>替换：:％s&#x2F;abc&#x2F;def&#x2F;g把所有的 abc 替换为 def</li>\n</ol>\n<p>退出：</p>\n<ol>\n<li>快速保存并退出：ZZ</li>\n<li>放弃更改重新打开本文件：:e!</li>\n</ol>\n"},{"title":"remix本地安装","date":"2023-04-06T12:07:54.000Z","auto_excerpt":"true","_content":"## **概论**\n\n1. remix分为后端remix-projrct和前端remixd，后端负责编译等事务的实现，前端负责连接网页与本地文件\n2. 先安装前端再安装后端\n3. remix-project项目地址：https://github.com/ethereum/remix-project\n4. remixd项目地址：https://github.com/ethereum/remixdb\n\n---\n\n## **部署**\n\n1. 用docker部署remix-project，先安装：\n   1. 正常来说是这样的命令：docker pull remixproject/remix-ide:latest\n   2. 对mac，比较特殊，要加一点platform信息，运行这条即可：docker run -p 8080:80 --platform linux/amd64 remixproject/remix-ide:latest\n2. 启动后台remix-project：docker run -p 8080:80 remixproject/remix-ide:latest\n3. 此时能通过localhost:8080访问remixIDE，但是为了连接本地服务器需要安装前端remixd\n4. npm安装remixd，安装过程会有几号之后只能用https的警告，只是npm的官方通知不用理会：npm install remixd -g\n5. 启动remixd，其中中间-s的属性值是本地文件目录可以自行修改，-ide的属性值是访问网址，其中端口号要和安装remix-project时指定的端口相同：remixd -s /Users/dal/Downloads/solidity --remix-ide http://localhost:8080\n6. 尽情使用吧，本地编辑完合约，然后打开网页部署，记得可以在docker客户端里检查remix-project的运行情况确保在后台运行才能打开IDE\n\n---\n\n## **运行**\n\n1. 先去docker客户端里运行remixproject/remix-ide:latest\n2. 然后启动remix，其中注意本地文件夹目录是可以修改的，其实要修改网址和端口号也是可以的，但是要在安装remix-project那步的时候准备好：remixd -s /Users/dal/Downloads/solidity --remix-ide http://localhost:8080\n3. 访问remix本地客户端：http://localhost:8080\n","source":"_posts/Solidity/remix本地安装.md","raw":"---\ntitle: remix本地安装\ndate: 2023-04-06 20:07:54\ntags: \ncategories:\n  - - Solidity\nauto_excerpt: \"true\"\n---\n## **概论**\n\n1. remix分为后端remix-projrct和前端remixd，后端负责编译等事务的实现，前端负责连接网页与本地文件\n2. 先安装前端再安装后端\n3. remix-project项目地址：https://github.com/ethereum/remix-project\n4. remixd项目地址：https://github.com/ethereum/remixdb\n\n---\n\n## **部署**\n\n1. 用docker部署remix-project，先安装：\n   1. 正常来说是这样的命令：docker pull remixproject/remix-ide:latest\n   2. 对mac，比较特殊，要加一点platform信息，运行这条即可：docker run -p 8080:80 --platform linux/amd64 remixproject/remix-ide:latest\n2. 启动后台remix-project：docker run -p 8080:80 remixproject/remix-ide:latest\n3. 此时能通过localhost:8080访问remixIDE，但是为了连接本地服务器需要安装前端remixd\n4. npm安装remixd，安装过程会有几号之后只能用https的警告，只是npm的官方通知不用理会：npm install remixd -g\n5. 启动remixd，其中中间-s的属性值是本地文件目录可以自行修改，-ide的属性值是访问网址，其中端口号要和安装remix-project时指定的端口相同：remixd -s /Users/dal/Downloads/solidity --remix-ide http://localhost:8080\n6. 尽情使用吧，本地编辑完合约，然后打开网页部署，记得可以在docker客户端里检查remix-project的运行情况确保在后台运行才能打开IDE\n\n---\n\n## **运行**\n\n1. 先去docker客户端里运行remixproject/remix-ide:latest\n2. 然后启动remix，其中注意本地文件夹目录是可以修改的，其实要修改网址和端口号也是可以的，但是要在安装remix-project那步的时候准备好：remixd -s /Users/dal/Downloads/solidity --remix-ide http://localhost:8080\n3. 访问remix本地客户端：http://localhost:8080\n","slug":"Solidity/remix本地安装","published":1,"updated":"2024-04-14T15:31:05.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnr80009hk8z23ct39ed","content":"<h2 id=\"概论\"><a href=\"#概论\" class=\"headerlink\" title=\"概论\"></a><strong>概论</strong></h2><ol>\n<li>remix分为后端remix-projrct和前端remixd，后端负责编译等事务的实现，前端负责连接网页与本地文件</li>\n<li>先安装前端再安装后端</li>\n<li>remix-project项目地址：<a href=\"https://github.com/ethereum/remix-project\">https://github.com/ethereum/remix-project</a></li>\n<li>remixd项目地址：<a href=\"https://github.com/ethereum/remixdb\">https://github.com/ethereum/remixdb</a></li>\n</ol>\n<hr>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a><strong>部署</strong></h2><ol>\n<li>用docker部署remix-project，先安装：<ol>\n<li>正常来说是这样的命令：docker pull remixproject&#x2F;remix-ide:latest</li>\n<li>对mac，比较特殊，要加一点platform信息，运行这条即可：docker run -p 8080:80 –platform linux&#x2F;amd64 remixproject&#x2F;remix-ide:latest</li>\n</ol>\n</li>\n<li>启动后台remix-project：docker run -p 8080:80 remixproject&#x2F;remix-ide:latest</li>\n<li>此时能通过localhost:8080访问remixIDE，但是为了连接本地服务器需要安装前端remixd</li>\n<li>npm安装remixd，安装过程会有几号之后只能用https的警告，只是npm的官方通知不用理会：npm install remixd -g</li>\n<li>启动remixd，其中中间-s的属性值是本地文件目录可以自行修改，-ide的属性值是访问网址，其中端口号要和安装remix-project时指定的端口相同：remixd -s &#x2F;Users&#x2F;dal&#x2F;Downloads&#x2F;solidity –remix-ide <a href=\"http://localhost:8080/\">http://localhost:8080</a></li>\n<li>尽情使用吧，本地编辑完合约，然后打开网页部署，记得可以在docker客户端里检查remix-project的运行情况确保在后台运行才能打开IDE</li>\n</ol>\n<hr>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a><strong>运行</strong></h2><ol>\n<li>先去docker客户端里运行remixproject&#x2F;remix-ide:latest</li>\n<li>然后启动remix，其中注意本地文件夹目录是可以修改的，其实要修改网址和端口号也是可以的，但是要在安装remix-project那步的时候准备好：remixd -s &#x2F;Users&#x2F;dal&#x2F;Downloads&#x2F;solidity –remix-ide <a href=\"http://localhost:8080/\">http://localhost:8080</a></li>\n<li>访问remix本地客户端：<a href=\"http://localhost:8080/\">http://localhost:8080</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概论\"><a href=\"#概论\" class=\"headerlink\" title=\"概论\"></a><strong>概论</strong></h2><ol>\n<li>remix分为后端remix-projrct和前端remixd，后端负责编译等事务的实现，前端负责连接网页与本地文件</li>\n<li>先安装前端再安装后端</li>\n<li>remix-project项目地址：<a href=\"https://github.com/ethereum/remix-project\">https://github.com/ethereum/remix-project</a></li>\n<li>remixd项目地址：<a href=\"https://github.com/ethereum/remixdb\">https://github.com/ethereum/remixdb</a></li>\n</ol>\n<hr>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a><strong>部署</strong></h2><ol>\n<li>用docker部署remix-project，先安装：<ol>\n<li>正常来说是这样的命令：docker pull remixproject&#x2F;remix-ide:latest</li>\n<li>对mac，比较特殊，要加一点platform信息，运行这条即可：docker run -p 8080:80 –platform linux&#x2F;amd64 remixproject&#x2F;remix-ide:latest</li>\n</ol>\n</li>\n<li>启动后台remix-project：docker run -p 8080:80 remixproject&#x2F;remix-ide:latest</li>\n<li>此时能通过localhost:8080访问remixIDE，但是为了连接本地服务器需要安装前端remixd</li>\n<li>npm安装remixd，安装过程会有几号之后只能用https的警告，只是npm的官方通知不用理会：npm install remixd -g</li>\n<li>启动remixd，其中中间-s的属性值是本地文件目录可以自行修改，-ide的属性值是访问网址，其中端口号要和安装remix-project时指定的端口相同：remixd -s &#x2F;Users&#x2F;dal&#x2F;Downloads&#x2F;solidity –remix-ide <a href=\"http://localhost:8080/\">http://localhost:8080</a></li>\n<li>尽情使用吧，本地编辑完合约，然后打开网页部署，记得可以在docker客户端里检查remix-project的运行情况确保在后台运行才能打开IDE</li>\n</ol>\n<hr>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a><strong>运行</strong></h2><ol>\n<li>先去docker客户端里运行remixproject&#x2F;remix-ide:latest</li>\n<li>然后启动remix，其中注意本地文件夹目录是可以修改的，其实要修改网址和端口号也是可以的，但是要在安装remix-project那步的时候准备好：remixd -s &#x2F;Users&#x2F;dal&#x2F;Downloads&#x2F;solidity –remix-ide <a href=\"http://localhost:8080/\">http://localhost:8080</a></li>\n<li>访问remix本地客户端：<a href=\"http://localhost:8080/\">http://localhost:8080</a></li>\n</ol>\n"},{"title":"Git教程","date":"2024-04-15T15:49:52.000Z","auto_excerpt":"true","_content":"## 前言和概述\n\n 本教程是廖雪峰的官方网站中的Git教程的完整笔记\n \n https://www.liaoxuefeng.com/wiki/896043488029600\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 1. 笔记会做到基本完整记录书中所有知识点不会有任何遗漏\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n\n---\n\n总之就是，同样的项目，git同时维护了工作区版本、暂存区版本和版本库头版本三份项目，这种维护是从逻辑上维护的而非存储了全部的文件，做到这一点是从设计上只存储对每个文件的修改而非存储全量的所有文件，运行的时候，只有工作区是一份完整的项目文件，程序员对工作区内的项目文件进行新的编辑，然后提交到暂存区，此时git会计算修改然后被提交到暂存区的不是文件而是修改，最后从暂存区发射命令，一次性把暂存区中的修改正式提交到版本库。\n\n  \n\n最后，所学的这些命令基本就是对工作区、暂存区、版本库的增删改查\n\n  \n\n## Git简介\n\n  \n\n### Git的诞生：\n\n  \n\n1. git的发展历史沿革：从1991年开始，手工合并11年，用BitKeeper管理3年，然后闹掰写出了git\n\n\t1. 1991年：Linus创建了开源linux系统\n\t\n\t2. 2002年之前：世界各地开源贡献者手动发送给Linus，Linus用一个叫diff的文本差异比较软件手工合并代码，因为那时Linus反对当时的集中式版本控制系统例如CVS和SVN，这又是因为这种软件速度慢而且必须联网的缺点，总之就是不好用\n\t\n\t3. 2002年到2005年：由于代码实在太庞大无法继续手工合并，社区给了Linus压力，Linus找到商业版本控制系统软件开发公司BitMover公司，让Linux社区获得了免费使用BitKeeper软件的权限\n\t\n\t4. 2005年，社区里一个叫Andrew的尝试破解BitKeeper软件然后被发现，BitMover公司要求收回对Linux社区的免费使用权限→Linux不道歉，花了2周时间用C写了一个分布式版本控制系统Git\n\n  \n\n### 集中式vs分布式：\n\n  \n\n1. 集中式版本控制系统：一种版本控制系统的分类。\n\n\t1. 集中式版本控制系统的工作方式：版本库（软件所有版本的集合）集中存放在中央服务器，程序员编码则使用自己的电脑，每次写代码之前先从中央服务器同步下来最新的版本，然后写代码，写完了代码把本地的版本推送到中央服务器。\n\t\n\t2. 集中式版本控制系统的缺点：必须联网才能工作，在互联网上，网速慢的话提交文件很痛苦。\n\n2. 分布式版本控制系统：一种版本控制系统的分类。\n\n\t1. 分布式版本控制系统的工作方式：每个人的电脑上存放一个完整的版本库（软件所有版本的集合），写代码的话直接就着本地的版本库开写，多人协作的话就互相把对文件的修改推送给协作编码的所有人\n\t\n\t2. 分布式版本控制系统的的优点：相比于集中式版本控制系统会安全一些，因为所有协作者的电脑都存储了完整的版本库，任一人的电脑坏掉，只需要把别人的版本库复制过来即可，但集中式版本控制系统的中央服务器如果出问题基本这项目就告别了\n\t\n\t3. 实际中分布式版本控制系统也需要一个用于交换修改之处的中央服务器：实际中，很少让项目中协作者进行端到端互相推送这种事情，一般会设定一个中央服务器，用于交换修改，和集中式版本控制系统的区别是每次编码之前不用先从中央服务器上同步下才能开始工作，直接可以开始干活，而且哪怕没有用于交换的中央服务器，也照样可以协作，只是交换修改会不太方便\n\n3. CVS：一种开源、免费的集中式版本控制系统。最早的集中式版本控制系统，至今还有人使用，但是本身有一些问题，容易提交文件不完整，版本库莫名损坏\n\n4. SVN：一种开源、免费的集中式版本控制系统。比CVS好在稳定得多，在集中式版本控制系统中份额最大\n\n5. ClearCase：一种收费的集中式版本控制系统。IBM公司从Rational公司手里收购而来，缺点非常突出，安装包比windows还大，运行比蜗牛还慢，只有比较人傻钱多的那种世界500强会用\n\n6. VSS：一种集中式版本控制系统。微软开发的集中式版本控制系统，在Visual Studio中内置，但不好用，连微软自己都不用\n\n7. 常见的分布式版本控制系统：Git、BitKeeper、Mercurial、Bazaar\n\n  \n\n---\n\n  \n\n## 安装Git\n\n  \n\n1. 名字和电子邮箱：安装Git所必须执行的最后一步。\n\n\t1. 名字和电子邮箱的作用：用于分布式版本控制系统用于自报家门，但也不用担心被冒充\n\t\n\t2. 可以对不同仓库分别指定名字和电子邮箱：可以对不同仓库分别指定名字和电子邮箱\n\n  \n\n---\n\n  \n\n## 创建版本库\n\n  \n\n1. 版本库：受GIt追踪的用于存储项目的仓库。\n\n2. 修改：git中的一个单位。对文件的一次增删改就算作一次修改。\n\n3. Git究竟追踪了版本库的什么：追踪修改。这也是为什么Git比其他版本控制系统设计得优秀的原因，其追踪修改而非追踪文件\n\n4. 创建版本库的步骤：\n\n\t1. 命令行cd到版本库根目录下\n\t\n\t2. 初始化版本库根目录为受Git追踪的仓库：git init\n\n   此时版本库根目录会多出一个叫.git的隐藏子文件夹，其用于跟踪版本库\n\n5. Git只能追踪文本文件的修改：包括git在内的所有版本控制系统，能够被追踪修改的只有文本文件，即二进制文件的修改不可被追踪【想想也知道视频或图片文件肯定无法被字符级追踪】，而且具体而言，是以行为单位，跟踪具体的某一文件某一行号的修改\n\n6. Word文件是二进制格式文件：值得注意的是word文件不属于文本文件，而是一种二进制文件，所以word文件不能被git追踪\n\n7. 建议使用UTF-8文本编码：标准编码，支持万国语言\n\n8. 不要使用windows自带的记事本对文本文件进行编辑：windows自带的记事本会为每个被编辑的文件开头增加一行，这行只有一个0xefbbbf字符，，造成的问题一般有1. 网页第一行显示一个问号；程序编译报错\n\n9. 把文件同步到本地版本库操作：\n\n\t1. 把readme.txt文件添加入暂存区：git add 文件名1 文件名2 文件名3\n\t   在把文件和文件修改提交到版本库之前设定一个暂存区的目的是，你可以add很多个文件，然后下一步一次性提交到版本库，例如上述示例中就add了三个文件\n\t\n\t   这一步如果成功会没有任何提示因为Unix哲学是“没有任何消息就是好消息”\n\t\n\t2. 把文件提交到本地版本库：git commit -m \"wrote a readme file”\n\n       其中-m属性及其后面的字符串参数，是指对本次提交的文字说明，必须写，但是有办法可以不写，但最好还是每次写一下\n\n       这一步如果成功将会打印仓库变动的一份简略报告，例如3 file changed是三个文件被修改，2 insertions是插入了2行新的内容\n\n10. 一次性把根目录塞到暂存区的操作：git add .\n\n  \n\n---\n\n  \n\n## 时光机穿梭\n\n  \n\n### 时光机穿梭：\n\n  \n\n1. 查看当前工作区【git相对其它版本控制系统的一个独特概念。工作区就是版本库根目录下除了.git文件夹下的所有目录和文件】的状态操作：git status\n\n   这个目录将会打印当前仓库的状态信息，包括在哪个分支里、是否存在已修改但未提交到版本库的修改（以及具体是哪些文件被修改了），示例如下：\n\n```bash\n\n$ git status\n\nOn branch master\n\nChanges not staged for commit:\n\n(use \"git add <file>...\" to update what will be committed)\n\n(use \"git checkout -- <file>...\" to discard changes in working directory)\n\nmodified: readme.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n```\n\n2. 查看某文件的修改情况：git diff 文件名\n\n   会以unix通用的diff格式打印出文件的修改情况\n\n  \n\n### 版本回退：\n\n  \n\n1. 查看本地版本库提交记录：git log\n\n   这个命令将会打印所有的commit的提交记录，包括每次commit的版本号（十六进制哈希编码）、每次commit的作者是谁、日期时间、commit时的的注释\n\n2. 版本号使用哈希编码的原因：对集中式版本控制系统SVN而言commit id是顺序的1、2、3编号，但分布式版本控制系统由于是分布式协作，所以必须使用哈希来给每一次提交编号，防止不同的人的不同提交却使用同样的提交号\n\n3. 版本号的相对缩写法：\n\n\t1. HEAD：HEAD表示当前的最新的版本\n\t\n\t2. 幂符号：HEAD后每加一个幂符号^表示第前一个版本，即HEAD^表示上个版本，HEAD^^表示第前两个版本\n\t\n\t3. 幂数：HEAD可以直接用幂数标注“第前多少个版本”，即HEAD^100表示第前100个版本\n\n4. 回退版本库中的头版本操作：git reset --hard 版本号\n\n   注意这里可以用版本号的相对缩写法也可以直接写出版本号，例如git reset --hard HEAD^，或者git reset --hard 1094a，直接写版本号写前几个十六进制数字即可，git会自动搜索\n\n5. 打印所有历史git命令历史记录：git reflog\n\n   这个命令会记录所有的记录\n\n6. 版本回退如果后悔了：用之前的版本号reset命令回去。如果关掉了终端导致丢失了之前的版本号，可以用git reflog命令查看一下记录，里面会有曾经从哪个先进版本号回退到哪个过去版本号的记录\n\n7. 版本回退的速度：版本回退速度很快，因为原理上只是把指向当前版本的HEAD指针往过去的版本指回去即可\n\n  \n\n### 工作区和暂存区：\n\n  \n\n1. 工作区：git相对其它版本控制系统的一个独特概念。工作区就是版本库根目录下除了.git文件夹下的所有目录和文件\n\n2. 版本库：git中的一个文件夹的名字。隐藏文件夹.git就是版本库，版本库就是git下一个文件夹的名字。版本库中存储的主要内容是1. 暂存区stage；2. master分支；3. 指向master分支的指针HEAD\n\n3. 暂存区/stage：版本库中的主要内容之一，又名index。工作区中项目的修改被add命令会先添加到暂存区，暂存区的内容会在commit命令后被提交到master分支中\n\n  \n\n### 管理修改：\n\n  \n\n### 撤销修改：\n\n  \n\n1. 回退工作区中对文件的修改操作：git checkout -- 文件名\n\n   把工作区中已被编辑修改但还没add命令到暂存区中的指定文件，回退到暂存区中的版本，如果暂存区中没有这个文件的新版本就回退到上一次commit的文件版本\n\n   这个命令可以用于误删工作区中的文件，从版本库的头版本中恢复\n\n2. 回退暂存区中对文件的修改操作：git reset HEAD readme.txt\n\n   这是也是和“回退版本库中的头版本”操作一样使用了reset命令【“回退版本库中的头版本”操作的命令是git reset --hard 版本号】，即这个命令既可以用于版本库也可以用于暂存区。对暂存区使用reset命令后，暂存区中对文件的修改并不会丢失，而是向后回退到工作区文件\n\n  \n\n### 删除文件：\n\n  \n\n1. 删除版本库中头版本中的文件：git rm 文件名\n\n  \n\n---\n\n  \n\n## 远程仓库\n\n  \n\n### 远程仓库：\n\n  \n\n1. 在github上设置SSH相关：本地git与github之间一般使用SSH协议进行数据传输，所以需要在github上设置一下你的个人计算机的非对称加密公钥以便建立SSH连接\n\n\t1. 如果没有id_rsa和id_rsa.pub文件：找找你的电脑里的本用户目录的.ssh文件夹，一般这个文件夹下会有两个文件id_rsa和id_rsa.pub，这一个是非对称加密私钥一个是非对称加密公钥，如果没有的话创建一对就行，命令是在.ssh目录下运行ssh-keygen -t rsa -C \"邮箱字符串\"\n\t\n\t2. 在github上添加SSH key：登录github，打开account settings里的SSH Keys，把你的id_rsa.pub文件里的字符串全部粘贴进去就行，标题就是给这串公钥起个名，然后保存\n\n  \n\n### 添加远程库：\n\n  \n\n1. 远程库原理：让你本地电脑与github公司的服务器电脑结成分布式端到端连接，不仅可以让github服务器上的版本作为项目的备份，还能方便他人也通过github服务器结成分布式端到端连接，进行项目协作，其它基于git的代码托管平台同理\n\n2. 与github上的项目仓库远程库进行远程分布式端到端连接操作：git remote add 本地给远程仓库起的名 git@github.com:github账号username/github仓库名.git\n\n   例如git remote add origin git@github.com:michaelliao/learngit.git，就是把本地版本库与github账号michaelliao的learngit仓库进行了远程连接，这个远程仓库在本地设定为名字origin\n\n3. git使用ssh连接远程仓库：git连接本地版本库与远程仓库的原理是使用ssh\n\n4. 把本地版本库上的头版本推送到远程库操作：git push -u origin master\n\n   把本地的master分支头版本推送到起名为origin的远程仓库。因为git使用ssh连接远程仓库的缘故，如果第一次使用这个命令的时候有可能会弹出ssh警告，询问是否进行连接，这本质上是询问是否进行ssh连接，输入yes或者no即可，输入yes就会把github给的非对称加密公钥添加到本地信任列表\n\n   -u参数的功能是把本地的master分支与远程的master分支进行关联，这种关联在第一次使用push命令的时候需要指定，在以后则可以进行省略，即第一次运行的时候是git push -u origin master，以后只需要git push origin master\n\n5. 查看所有的分布式端到端连接到的远程库操作：git remote -v\n\n6. 删除本地已完成分布式端到端连接的某远程库的连接操作：git remote rm 远程库名\n\n   例如git remote rm origin就是把本地版本库对远程库origin的连接删掉，即解除本地版本库对远程库的绑定关系\n\n  \n\n### 从远程库克隆：\n\n  \n\n1. 使用ssh协议把远程库里的头版本克隆到本地工作区操作：git clone git@github.com:github账号username/github仓库名.git\n\n   例如，git clone git@github.com:michaelliao/gitskills.git，就是把github账号michaelliao的learngit仓库里的头版本克隆到本地工作区\n\n   上述的git@格式的是进行ssh连接，github支持多种协议例如https，但https坏处是速度慢，而且每次推送必须输入一次密钥，当然好处是有些公司用服务器是禁止ssh端口的，只能使用ssh之外的协议\n\n  \n\n---\n\n  \n\n## 分支管理\n\n  \n\n### 分支管理：\n\n  \n\n1. SVN系统的分支管理功能的缺点：创建和切换分支巨慢让人无法忍受\n\n  \n\n### 创建与合并分支：\n\n  \n\n1. HEAD指针指向的版本是什么：指向当前分支的头版本指针的指针\n\n2. 分支是什么：git中每次commit都会构造一个新的项目头版本，随着版本不断更新，头版本和旧版本穿成一条链，这条链就叫分支，每个分支附带一个指向该分支头版本的指针\n\n3. 创建一个新分支我们在创建什么：新分支创始之初，是创建了一个新的指向头版本的指针，你可以让HEAD指针指向这个新指针，然后每次commit的新版本会更新在这个新指针上，随着你在新的分支头版本指针上不断commit添加新版本，这个新的分支就跟着分支头版本指针越走越长\n\n4. 创建新分支操作：git branch 新分支名\n\n5. 切换到某分支操作：git checkout 分支名\n\n6. 创建新分支加切换到新分支融合快捷操作：git checkout -b 新分支名\n\n   -b参数就是这个创建并切换的操作\n\n7. 打印所有分支操作：git branch\n\n   这个命令会列出所有分支，并且在当前commit欲更新版本的分支的名字之前打出星号*\n\n8. 把指定分支名的头指针指向当前分支的头指针（分支合并）操作：git merge 分支名\n\n   这个操作会重定向指定的分支头指针，将其指向当前分支头指针，所有的修改会被融合\n\n9. 删除分支：git branch -d 分支名\n\n   之后还有个强制删除分支的命令\n\n10. 分支的用法：无论是在github上协作还是自己写项目，我们先自己弄一个分支，并且在这个分支上更新版本，最后去申请分支合并（即申请把github服务器上的项目仓库的HEAD指针指向自己的分支头版本指针）或自己进行分支合并，然后把为了完成任务创建的新分支删掉，这样会相比直接在master分支上工作安全。\n\n11. switch命令：新版git觉得切换到某分支操作用checkout命令（切换到某分支操作：git checkout 分支名）以及回退工作区中对文件的修改操作也用checkout命令（回退工作区中对文件的修改操作：git checkout -- 文件名）都共用checkout命令是令人迷惑的，因此新版本把切换分支单独开了个命令叫switch：\n\n1. switch切换到某分支操作：git switch 分支名\n\n2. switch创建新分支加切换到新分支融合快捷操作：git switch -c 新分支名\n\n  \n\n### 解决冲突：\n\n  \n\n1. 冲突：两个分支如果都修改同一个文件后，对这两个分支进行分支合并操作，产生的一种冲突现象。具体而言，现在有两个分支，我们知道git跟踪的是修改，而且跟踪的是对行号的文本修改，那么如果两个不同分支都对同一个文件的相同行号进行了修改，然后分别对这两个分支进行了add和commit，正常而言两个分支的头指针都会往前延伸一个新版本，此时如果你尝试对两个分支进行分支合并（把指定分支名的头指针指向当前分支的头指针（分支合并）操作：git merge 分支名。这个操作会重定向指定的分支头指针，将其指向当前分支头指针），由于两个分支的这个相同文件的相同行号的修改内容不同，就会产生分支无法合并的冲突。\n\n   如下是一个典型的冲突，有两个分支，feature1和master，都分别对同一文件进行不同修改，提交成了两个不同的版本，此时HEAD指针指向master，如果尝试合并feature1和master，就会产生冲突\n\n   ![Untitled](https://cdnjson.com/images/2024/04/15/Untitled56bba0107becb5d2.png)\n\n2. 如何解决冲突：尝试分支合并如果出现冲突，git会提示无法合并，并给出是哪个文件的什么内容出现了冲突，此时很简单手动处理即可，即把其中一个分支的冲突文件的冲突行改成和另一个分支一样就可以正常进行分支合并操作了\n\n3. 查看分支合并图操作：git log --graph\n\n   使用这个命令将会看见分支合并的字符示意图\n\n  \n\n### 分支管理策略：\n\n  \n\n1. fast forward：git的默认分支合并模式，又快速合并模式。快速的同时，分支合并后，会丢失其中一个分支的分支信息，即忘掉自己是从之前哪个分支合并而来的\n\n2. 强制禁用fast forward的分支合并操作：git merge --no-ff -m \"merge with no-ff\" 分支名\n\n   其中--no-ff参数是指强制禁用fast forward。强制禁用fast forward进行分支合并会在合并的时候生成并commit一个新的版本，这样就可从分支历史上可以看出分支信息而不会丢失掉被合并的分支信息，也因为创建了一个新的版本并commit，所以需要加入-m参数并写入新版本的commit注释\n\n3. 分支管理策略：实践中，经常被遵循的几个基本的分支管理策略\n\n\t1. master：master分支仅用于发布新版本，即不用于写新的代码\n\t\n\t2. dev：写新的代码的干活分支你就命名为dev就比较好，每次写完就合并丢弃掉\n\t\n\t3. 多人协作：如果多人协作写新的代码，那么你们都拥有自己的干活分支，然后集体往dev分支上合并自己的新代码，最后需要发布新版本的时候统一一次性把dev合并到master\n\n  \n\n### Bug分支：\n\n  \n\n1. 项目有bug怎么办：开一个新的临时分支，然后在临时分支上编写新的代码修复bug，完成之后合并分支，把临时分支删掉\n\n2. 如果正在开发一个新的feature到一半还不想去正式add并commit本次的半成品代码，这时候需要紧急修复一个恶性bug：使用gut的stash（贮藏）功能\n\n3. stash：github提供的功能之一，功能是存档并回撤当前的工作区+暂存区修改，执行之后工作区将会回到上一个commit版本\n\n   这个操作的意义其实是用于一个分支的工作还没做完时，不想去正式add和commit半成品代码，却由于另一个紧急任务需要开辟新的分支，那就先把当前分支给贮藏，然后开新分支完成紧急任务并合并掉，再通过恢复贮藏操作，恢复原先还没完成的半成品代码，注意，如果紧急任务是修复bug，那么你恢复贮藏的时候会回退到有bug的版本，因此可以配合执行一个“复制特定commit的所有修改到当前分支”操作，以把你用于修复bug的代码复制到你恢复贮藏后的还未完成工作的半成品版本当中\n\n4. 贮藏操作：git stash\n\n5. 打印所有贮藏的列表操作：git stash list\n\n   这个命令将会打印出所有的贮藏的列表，贮藏名是stash@{0}格式的\n\n6. 单纯恢复某指定贮藏操作：git stash apply 贮藏名\n\n   这个命令不会删掉贮藏本身\n\n   如果你只有一个贮藏，那么不用写贮藏名也可以，git知道你只有一个可恢复的贮藏\n\n7. 删除某指定贮藏操作：git stash drop\n\n8. 恢复并删除某指定贮藏操作：git stash pop\n\n9. 复制特定commit的所有修改到当前分支操作：cherry-pick\n\n   这个操作本质是一次自动commit，因此当前分支的头版本会commit并前进一个含有被复制代码的新版本\n\n  \n\n### Feature分支：\n\n  \n\n1. 强制删除某指定分支操作：git branch -D 分支名\n\n   之所以会有强制删除一说，是因为如果某分支的修改从未被合并到任何其它分支就面临删除，此时如果执行删除会彻底丢失掉在这个分支上的所有工作，git不会允许你直接删除\n\n   不过听说根本就不存在彻底丢弃任何工作的场景，因为以防万一\n\n  \n\n### 多人协作：\n\n  \n\n1. 查看远程仓库的信息操作：git remote\n\n2. 查看所有远程仓库的详细信息操作：git remote -v\n\n   注意这个命令会在行末的括号里分别显示具有可以抓取和推送权限的远程仓库，如下图\n\n   ![Untitled](https://cdnjson.com/images/2024/04/15/Untitled-18f48d74ca5621b64.png)\n\n3. 推送本地指定分支的头版本到指定远程仓库：git push 指定远程仓库名 指定分支名\n\n   本地的默认远程仓库名称是origin\n\n4. 多人协作下的远程仓库推送冲突及解决办法：如果你和协作者都对同一文件进行了修改工作，对方先把对方的修改工作推送到了远程仓库的dev分支，此时你再尝试把自己对这个文件的修改工作推送到远程仓库的dev分支将会失败，解决办法先把自己本地的dev分支与远程仓库的dev分支进行同步，即把协作者的最新修改工作下载到你的本地dev分支，再本地将你的修改工作分支与你本地的dev分支合并，此时推送你本地的dev分支将不再冲突\n\n  \n\n### Rebase：\n\n  \n\n1. rebase的应用场景：基于之前的版本开发了一个新版本尚未提交上去时，之前的版本已经前进了两个版本，此时我们想提交我们开发的版本，但出于某种原因，我们需要基于最新的头版本提交我们开发的新的版本，而不是基于之前的版本（比如我们需要依赖新版本的几个特性），那么可以先从远程仓库把最新版本拉下来，然后执行rebase命令，这会重新指定基版本，然后再提交就行\n\n2. rebase操作：git rebase\n\n3. rebase的实质原理：实际上是把你基于之前版本的那些修改数据给丢弃掉了，但在此之前，会先自动创建一些基于较新版本的内容一样的新的修改\n\n  \n\n---\n\n  \n\n## 标签管理\n\n  \n\n### 标签管理：\n\n  \n\n1. 标签：commit的时候一同被提交的一个类似备注的数据结构。我们有了备注还要标签，是因为这个标签的作用是作为commit id的别名，一般是用来写版本号的，比如v1.2之类的\n\n  \n\n### 创建标签：\n\n  \n\n1. 给当前分支的最新版本打标签操作：git tag 标签名\n\n   这个标签名一般就是v1.0之类的\n\n2. 给当前分支的指定版本打标签操作：git tag 标签名 版本号\n\n   此处版本号也可以使用版本号的相对缩写法\n\n3. 查看所有标签列表操作：git tag\n\n   注意这里的列表是按字母顺序排列，而非时间顺序\n\n4. 给当前分支的指定版本打标签顺便写评论操作：git tag -a 标签名 -m \"评论字符串\" 版本号\n\n5. 查看指定标签的详细信息操作：git show 标签名\n\n  \n\n### 操作标签：\n\n  \n\n1. 删除标签操作：git tag -d 标签名\n\n2. 推送指定标签到远程仓库操作：git push 远程仓库名 标签名\n\n3. 推送所有标签到远程仓库操作：git push origin --tags\n\n4. 删除远程仓库的指定标签：先删除本地标签，然后git push origin :refs/tags/标签名\n\n  \n\n---\n\n  \n\n## 使用GitHub\n\n  \n\n### 使用GitHub：\n\n  \n\n1. 如何参与他人的开源社区项目：先把其他的开源项目的仓库fork一下到自己的账户名下，这样自己名下就有一个同样的该远程仓库了，然后把本地个人计算机与自己的账户名下的该远程仓库进行连接和clone，接下来对准自己的账户名下的该远程仓库进行工作即可，如果觉得完成了工作就发起一个pull request，如果对方接受，就会把你的工作合并到官方\n\n  \n\n---\n\n  \n\n## 使用Gitee\n\n  \n\n---\n\n  \n\n## 自定义Git\n\n  \n\n### 自定义Git：\n\n  \n\n1. 自定义Git是什么：git作为一个软件，有很多可配置的本地个性化可配置项\n\n2. git本身的配置文件在哪：\n\n\t1. 对每个项目，其git的配置文件在该项目根目录，即.git/config\n\t\n\t2. 对当前用户，即所有项目，其git配置文件在用户主目录下，即~/.gitconfig\n\n3. 让Git的终端输出显示颜色：git config --global color.ui true\n\n   其中--global参数是指对当前用户所有仓库作用，如果没有--global参数则默认只对当前仓库生效\n\n  \n\n### 忽略特殊文件：\n\n  \n\n1. 忽略特殊文件的作用：有些比如密码文件之类的必须放到工作区，但肯定不能提交到新版本中，因此可以手动指定，让git对某些工作区文件进行忽略\n\n2. 如何忽略特殊文件：在工作区根目录下手动创建一个叫.gitignore的文件，把所有要忽略的文件名写进去即可，只要写名字不需要写目录，而且可以使用通配符例如星号*，可以对某指定规则开头使用取反符号!，注释的语法是井号#。\n\n3. .gitignore文件本身不能忽略：.gitignore文件本身不能忽略，即其本身应该被git管理，因为所有的协作者都应该使用同样的.gitignore文件\n\n4. 哪些文件需要被忽略：\n\n\t1. 操作系统自动生成的二级附带文件：缩略图等\n\t\n\t2. 中间文件：如果某个文件会自动生成一些二级文件，那么就没有必要把这些二级文件放进版本库中。常见编译过程产生的文件，例如java编译会产生.class二级文件\n\t\n\t3. 敏感信息：带有敏感信息的文件，例如口令、带密码的配置文件\n\n5. git官方的忽略文件：市面上有很多常见项目比如maven，archlinux什么的，项目又复杂，需要忽略的文件已经被github官方整理好成现成的.gitignore文件在https://github.com/github/gitignore，只需要组合即可\n\n6. windows系统无法在资源管理器下新建一个名字叫.gitignore的文件：未知原因，反正就是提醒让你必须输入文件名，必须通过文本编辑器等其它软件手动通过保存或者另存为之类的方式创建，总之windows自带的资源管理器就是不行\n\n7. 强制add某被忽略文件操作：git add -f 文件名\n\n   使用该命令将会把被忽略的文件add进版本中\n\n8. 检查某文件是否被忽略操作：git check-ignore -v 文件名\n\n   git会定位并返回是.gitignore文件的哪一行的什么规则导致该文件名被忽略\n\n9. 一个项目可以具有多个.gitignore文件：.gitignore文件具有可见域属性，具体而言，其放在哪个目录下，则该目录及其子目录都会受到该.gitignore文件的影响\n\n  \n\n### 配置别名：\n\n  \n\n1. 别名的意义：git大部分都命令都太长了，官方设置了一套命令的别名功能\n\n2. 设定别名：git config --global alias.别名 原名\n\n   例如git config --global alias.st status，意思是，把git status用git st指代\n\n3. 常见别名：\n\n\t1. co是checkout的别名\n\t\n\t2. ci是commit的别名\n\t\n\t3. br是branch的别名\n\n  \n\n### 搭建Git服务器：\n\n  \n\n1. 搭建Git服务器的作用：使用git控制版本，但不想用github等托管平台\n\n2. 搭建Git服务器的步骤：因为不需要，就不学了\n\n3. Gitolite：git本身没有对协作者的读写权限控制功能，但git支持钩子hook，可以用其在自己搭建的git服务器上编写一系列脚本来控制协作者的读写权限到具体分支、具体目录，有些公司需要这个功能\n\n  \n\n---\n\n  \n\n## 使用Source Tree\n\n  \n\n### 使用Source Tree：\n\n  \n\n1. Source Tree是什么：Atlassian开发的免费的图形用户界面Git工具","source":"_posts/技术栈/Git教程.md","raw":"---\ntitle: Git教程\ndate: 2024-04-15 23:49:52\ntags: \nauto_excerpt: \"true\"\ncategories:\n  - - 技术栈\n---\n## 前言和概述\n\n 本教程是廖雪峰的官方网站中的Git教程的完整笔记\n \n https://www.liaoxuefeng.com/wiki/896043488029600\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 1. 笔记会做到基本完整记录书中所有知识点不会有任何遗漏\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n\n---\n\n总之就是，同样的项目，git同时维护了工作区版本、暂存区版本和版本库头版本三份项目，这种维护是从逻辑上维护的而非存储了全部的文件，做到这一点是从设计上只存储对每个文件的修改而非存储全量的所有文件，运行的时候，只有工作区是一份完整的项目文件，程序员对工作区内的项目文件进行新的编辑，然后提交到暂存区，此时git会计算修改然后被提交到暂存区的不是文件而是修改，最后从暂存区发射命令，一次性把暂存区中的修改正式提交到版本库。\n\n  \n\n最后，所学的这些命令基本就是对工作区、暂存区、版本库的增删改查\n\n  \n\n## Git简介\n\n  \n\n### Git的诞生：\n\n  \n\n1. git的发展历史沿革：从1991年开始，手工合并11年，用BitKeeper管理3年，然后闹掰写出了git\n\n\t1. 1991年：Linus创建了开源linux系统\n\t\n\t2. 2002年之前：世界各地开源贡献者手动发送给Linus，Linus用一个叫diff的文本差异比较软件手工合并代码，因为那时Linus反对当时的集中式版本控制系统例如CVS和SVN，这又是因为这种软件速度慢而且必须联网的缺点，总之就是不好用\n\t\n\t3. 2002年到2005年：由于代码实在太庞大无法继续手工合并，社区给了Linus压力，Linus找到商业版本控制系统软件开发公司BitMover公司，让Linux社区获得了免费使用BitKeeper软件的权限\n\t\n\t4. 2005年，社区里一个叫Andrew的尝试破解BitKeeper软件然后被发现，BitMover公司要求收回对Linux社区的免费使用权限→Linux不道歉，花了2周时间用C写了一个分布式版本控制系统Git\n\n  \n\n### 集中式vs分布式：\n\n  \n\n1. 集中式版本控制系统：一种版本控制系统的分类。\n\n\t1. 集中式版本控制系统的工作方式：版本库（软件所有版本的集合）集中存放在中央服务器，程序员编码则使用自己的电脑，每次写代码之前先从中央服务器同步下来最新的版本，然后写代码，写完了代码把本地的版本推送到中央服务器。\n\t\n\t2. 集中式版本控制系统的缺点：必须联网才能工作，在互联网上，网速慢的话提交文件很痛苦。\n\n2. 分布式版本控制系统：一种版本控制系统的分类。\n\n\t1. 分布式版本控制系统的工作方式：每个人的电脑上存放一个完整的版本库（软件所有版本的集合），写代码的话直接就着本地的版本库开写，多人协作的话就互相把对文件的修改推送给协作编码的所有人\n\t\n\t2. 分布式版本控制系统的的优点：相比于集中式版本控制系统会安全一些，因为所有协作者的电脑都存储了完整的版本库，任一人的电脑坏掉，只需要把别人的版本库复制过来即可，但集中式版本控制系统的中央服务器如果出问题基本这项目就告别了\n\t\n\t3. 实际中分布式版本控制系统也需要一个用于交换修改之处的中央服务器：实际中，很少让项目中协作者进行端到端互相推送这种事情，一般会设定一个中央服务器，用于交换修改，和集中式版本控制系统的区别是每次编码之前不用先从中央服务器上同步下才能开始工作，直接可以开始干活，而且哪怕没有用于交换的中央服务器，也照样可以协作，只是交换修改会不太方便\n\n3. CVS：一种开源、免费的集中式版本控制系统。最早的集中式版本控制系统，至今还有人使用，但是本身有一些问题，容易提交文件不完整，版本库莫名损坏\n\n4. SVN：一种开源、免费的集中式版本控制系统。比CVS好在稳定得多，在集中式版本控制系统中份额最大\n\n5. ClearCase：一种收费的集中式版本控制系统。IBM公司从Rational公司手里收购而来，缺点非常突出，安装包比windows还大，运行比蜗牛还慢，只有比较人傻钱多的那种世界500强会用\n\n6. VSS：一种集中式版本控制系统。微软开发的集中式版本控制系统，在Visual Studio中内置，但不好用，连微软自己都不用\n\n7. 常见的分布式版本控制系统：Git、BitKeeper、Mercurial、Bazaar\n\n  \n\n---\n\n  \n\n## 安装Git\n\n  \n\n1. 名字和电子邮箱：安装Git所必须执行的最后一步。\n\n\t1. 名字和电子邮箱的作用：用于分布式版本控制系统用于自报家门，但也不用担心被冒充\n\t\n\t2. 可以对不同仓库分别指定名字和电子邮箱：可以对不同仓库分别指定名字和电子邮箱\n\n  \n\n---\n\n  \n\n## 创建版本库\n\n  \n\n1. 版本库：受GIt追踪的用于存储项目的仓库。\n\n2. 修改：git中的一个单位。对文件的一次增删改就算作一次修改。\n\n3. Git究竟追踪了版本库的什么：追踪修改。这也是为什么Git比其他版本控制系统设计得优秀的原因，其追踪修改而非追踪文件\n\n4. 创建版本库的步骤：\n\n\t1. 命令行cd到版本库根目录下\n\t\n\t2. 初始化版本库根目录为受Git追踪的仓库：git init\n\n   此时版本库根目录会多出一个叫.git的隐藏子文件夹，其用于跟踪版本库\n\n5. Git只能追踪文本文件的修改：包括git在内的所有版本控制系统，能够被追踪修改的只有文本文件，即二进制文件的修改不可被追踪【想想也知道视频或图片文件肯定无法被字符级追踪】，而且具体而言，是以行为单位，跟踪具体的某一文件某一行号的修改\n\n6. Word文件是二进制格式文件：值得注意的是word文件不属于文本文件，而是一种二进制文件，所以word文件不能被git追踪\n\n7. 建议使用UTF-8文本编码：标准编码，支持万国语言\n\n8. 不要使用windows自带的记事本对文本文件进行编辑：windows自带的记事本会为每个被编辑的文件开头增加一行，这行只有一个0xefbbbf字符，，造成的问题一般有1. 网页第一行显示一个问号；程序编译报错\n\n9. 把文件同步到本地版本库操作：\n\n\t1. 把readme.txt文件添加入暂存区：git add 文件名1 文件名2 文件名3\n\t   在把文件和文件修改提交到版本库之前设定一个暂存区的目的是，你可以add很多个文件，然后下一步一次性提交到版本库，例如上述示例中就add了三个文件\n\t\n\t   这一步如果成功会没有任何提示因为Unix哲学是“没有任何消息就是好消息”\n\t\n\t2. 把文件提交到本地版本库：git commit -m \"wrote a readme file”\n\n       其中-m属性及其后面的字符串参数，是指对本次提交的文字说明，必须写，但是有办法可以不写，但最好还是每次写一下\n\n       这一步如果成功将会打印仓库变动的一份简略报告，例如3 file changed是三个文件被修改，2 insertions是插入了2行新的内容\n\n10. 一次性把根目录塞到暂存区的操作：git add .\n\n  \n\n---\n\n  \n\n## 时光机穿梭\n\n  \n\n### 时光机穿梭：\n\n  \n\n1. 查看当前工作区【git相对其它版本控制系统的一个独特概念。工作区就是版本库根目录下除了.git文件夹下的所有目录和文件】的状态操作：git status\n\n   这个目录将会打印当前仓库的状态信息，包括在哪个分支里、是否存在已修改但未提交到版本库的修改（以及具体是哪些文件被修改了），示例如下：\n\n```bash\n\n$ git status\n\nOn branch master\n\nChanges not staged for commit:\n\n(use \"git add <file>...\" to update what will be committed)\n\n(use \"git checkout -- <file>...\" to discard changes in working directory)\n\nmodified: readme.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n```\n\n2. 查看某文件的修改情况：git diff 文件名\n\n   会以unix通用的diff格式打印出文件的修改情况\n\n  \n\n### 版本回退：\n\n  \n\n1. 查看本地版本库提交记录：git log\n\n   这个命令将会打印所有的commit的提交记录，包括每次commit的版本号（十六进制哈希编码）、每次commit的作者是谁、日期时间、commit时的的注释\n\n2. 版本号使用哈希编码的原因：对集中式版本控制系统SVN而言commit id是顺序的1、2、3编号，但分布式版本控制系统由于是分布式协作，所以必须使用哈希来给每一次提交编号，防止不同的人的不同提交却使用同样的提交号\n\n3. 版本号的相对缩写法：\n\n\t1. HEAD：HEAD表示当前的最新的版本\n\t\n\t2. 幂符号：HEAD后每加一个幂符号^表示第前一个版本，即HEAD^表示上个版本，HEAD^^表示第前两个版本\n\t\n\t3. 幂数：HEAD可以直接用幂数标注“第前多少个版本”，即HEAD^100表示第前100个版本\n\n4. 回退版本库中的头版本操作：git reset --hard 版本号\n\n   注意这里可以用版本号的相对缩写法也可以直接写出版本号，例如git reset --hard HEAD^，或者git reset --hard 1094a，直接写版本号写前几个十六进制数字即可，git会自动搜索\n\n5. 打印所有历史git命令历史记录：git reflog\n\n   这个命令会记录所有的记录\n\n6. 版本回退如果后悔了：用之前的版本号reset命令回去。如果关掉了终端导致丢失了之前的版本号，可以用git reflog命令查看一下记录，里面会有曾经从哪个先进版本号回退到哪个过去版本号的记录\n\n7. 版本回退的速度：版本回退速度很快，因为原理上只是把指向当前版本的HEAD指针往过去的版本指回去即可\n\n  \n\n### 工作区和暂存区：\n\n  \n\n1. 工作区：git相对其它版本控制系统的一个独特概念。工作区就是版本库根目录下除了.git文件夹下的所有目录和文件\n\n2. 版本库：git中的一个文件夹的名字。隐藏文件夹.git就是版本库，版本库就是git下一个文件夹的名字。版本库中存储的主要内容是1. 暂存区stage；2. master分支；3. 指向master分支的指针HEAD\n\n3. 暂存区/stage：版本库中的主要内容之一，又名index。工作区中项目的修改被add命令会先添加到暂存区，暂存区的内容会在commit命令后被提交到master分支中\n\n  \n\n### 管理修改：\n\n  \n\n### 撤销修改：\n\n  \n\n1. 回退工作区中对文件的修改操作：git checkout -- 文件名\n\n   把工作区中已被编辑修改但还没add命令到暂存区中的指定文件，回退到暂存区中的版本，如果暂存区中没有这个文件的新版本就回退到上一次commit的文件版本\n\n   这个命令可以用于误删工作区中的文件，从版本库的头版本中恢复\n\n2. 回退暂存区中对文件的修改操作：git reset HEAD readme.txt\n\n   这是也是和“回退版本库中的头版本”操作一样使用了reset命令【“回退版本库中的头版本”操作的命令是git reset --hard 版本号】，即这个命令既可以用于版本库也可以用于暂存区。对暂存区使用reset命令后，暂存区中对文件的修改并不会丢失，而是向后回退到工作区文件\n\n  \n\n### 删除文件：\n\n  \n\n1. 删除版本库中头版本中的文件：git rm 文件名\n\n  \n\n---\n\n  \n\n## 远程仓库\n\n  \n\n### 远程仓库：\n\n  \n\n1. 在github上设置SSH相关：本地git与github之间一般使用SSH协议进行数据传输，所以需要在github上设置一下你的个人计算机的非对称加密公钥以便建立SSH连接\n\n\t1. 如果没有id_rsa和id_rsa.pub文件：找找你的电脑里的本用户目录的.ssh文件夹，一般这个文件夹下会有两个文件id_rsa和id_rsa.pub，这一个是非对称加密私钥一个是非对称加密公钥，如果没有的话创建一对就行，命令是在.ssh目录下运行ssh-keygen -t rsa -C \"邮箱字符串\"\n\t\n\t2. 在github上添加SSH key：登录github，打开account settings里的SSH Keys，把你的id_rsa.pub文件里的字符串全部粘贴进去就行，标题就是给这串公钥起个名，然后保存\n\n  \n\n### 添加远程库：\n\n  \n\n1. 远程库原理：让你本地电脑与github公司的服务器电脑结成分布式端到端连接，不仅可以让github服务器上的版本作为项目的备份，还能方便他人也通过github服务器结成分布式端到端连接，进行项目协作，其它基于git的代码托管平台同理\n\n2. 与github上的项目仓库远程库进行远程分布式端到端连接操作：git remote add 本地给远程仓库起的名 git@github.com:github账号username/github仓库名.git\n\n   例如git remote add origin git@github.com:michaelliao/learngit.git，就是把本地版本库与github账号michaelliao的learngit仓库进行了远程连接，这个远程仓库在本地设定为名字origin\n\n3. git使用ssh连接远程仓库：git连接本地版本库与远程仓库的原理是使用ssh\n\n4. 把本地版本库上的头版本推送到远程库操作：git push -u origin master\n\n   把本地的master分支头版本推送到起名为origin的远程仓库。因为git使用ssh连接远程仓库的缘故，如果第一次使用这个命令的时候有可能会弹出ssh警告，询问是否进行连接，这本质上是询问是否进行ssh连接，输入yes或者no即可，输入yes就会把github给的非对称加密公钥添加到本地信任列表\n\n   -u参数的功能是把本地的master分支与远程的master分支进行关联，这种关联在第一次使用push命令的时候需要指定，在以后则可以进行省略，即第一次运行的时候是git push -u origin master，以后只需要git push origin master\n\n5. 查看所有的分布式端到端连接到的远程库操作：git remote -v\n\n6. 删除本地已完成分布式端到端连接的某远程库的连接操作：git remote rm 远程库名\n\n   例如git remote rm origin就是把本地版本库对远程库origin的连接删掉，即解除本地版本库对远程库的绑定关系\n\n  \n\n### 从远程库克隆：\n\n  \n\n1. 使用ssh协议把远程库里的头版本克隆到本地工作区操作：git clone git@github.com:github账号username/github仓库名.git\n\n   例如，git clone git@github.com:michaelliao/gitskills.git，就是把github账号michaelliao的learngit仓库里的头版本克隆到本地工作区\n\n   上述的git@格式的是进行ssh连接，github支持多种协议例如https，但https坏处是速度慢，而且每次推送必须输入一次密钥，当然好处是有些公司用服务器是禁止ssh端口的，只能使用ssh之外的协议\n\n  \n\n---\n\n  \n\n## 分支管理\n\n  \n\n### 分支管理：\n\n  \n\n1. SVN系统的分支管理功能的缺点：创建和切换分支巨慢让人无法忍受\n\n  \n\n### 创建与合并分支：\n\n  \n\n1. HEAD指针指向的版本是什么：指向当前分支的头版本指针的指针\n\n2. 分支是什么：git中每次commit都会构造一个新的项目头版本，随着版本不断更新，头版本和旧版本穿成一条链，这条链就叫分支，每个分支附带一个指向该分支头版本的指针\n\n3. 创建一个新分支我们在创建什么：新分支创始之初，是创建了一个新的指向头版本的指针，你可以让HEAD指针指向这个新指针，然后每次commit的新版本会更新在这个新指针上，随着你在新的分支头版本指针上不断commit添加新版本，这个新的分支就跟着分支头版本指针越走越长\n\n4. 创建新分支操作：git branch 新分支名\n\n5. 切换到某分支操作：git checkout 分支名\n\n6. 创建新分支加切换到新分支融合快捷操作：git checkout -b 新分支名\n\n   -b参数就是这个创建并切换的操作\n\n7. 打印所有分支操作：git branch\n\n   这个命令会列出所有分支，并且在当前commit欲更新版本的分支的名字之前打出星号*\n\n8. 把指定分支名的头指针指向当前分支的头指针（分支合并）操作：git merge 分支名\n\n   这个操作会重定向指定的分支头指针，将其指向当前分支头指针，所有的修改会被融合\n\n9. 删除分支：git branch -d 分支名\n\n   之后还有个强制删除分支的命令\n\n10. 分支的用法：无论是在github上协作还是自己写项目，我们先自己弄一个分支，并且在这个分支上更新版本，最后去申请分支合并（即申请把github服务器上的项目仓库的HEAD指针指向自己的分支头版本指针）或自己进行分支合并，然后把为了完成任务创建的新分支删掉，这样会相比直接在master分支上工作安全。\n\n11. switch命令：新版git觉得切换到某分支操作用checkout命令（切换到某分支操作：git checkout 分支名）以及回退工作区中对文件的修改操作也用checkout命令（回退工作区中对文件的修改操作：git checkout -- 文件名）都共用checkout命令是令人迷惑的，因此新版本把切换分支单独开了个命令叫switch：\n\n1. switch切换到某分支操作：git switch 分支名\n\n2. switch创建新分支加切换到新分支融合快捷操作：git switch -c 新分支名\n\n  \n\n### 解决冲突：\n\n  \n\n1. 冲突：两个分支如果都修改同一个文件后，对这两个分支进行分支合并操作，产生的一种冲突现象。具体而言，现在有两个分支，我们知道git跟踪的是修改，而且跟踪的是对行号的文本修改，那么如果两个不同分支都对同一个文件的相同行号进行了修改，然后分别对这两个分支进行了add和commit，正常而言两个分支的头指针都会往前延伸一个新版本，此时如果你尝试对两个分支进行分支合并（把指定分支名的头指针指向当前分支的头指针（分支合并）操作：git merge 分支名。这个操作会重定向指定的分支头指针，将其指向当前分支头指针），由于两个分支的这个相同文件的相同行号的修改内容不同，就会产生分支无法合并的冲突。\n\n   如下是一个典型的冲突，有两个分支，feature1和master，都分别对同一文件进行不同修改，提交成了两个不同的版本，此时HEAD指针指向master，如果尝试合并feature1和master，就会产生冲突\n\n   ![Untitled](https://cdnjson.com/images/2024/04/15/Untitled56bba0107becb5d2.png)\n\n2. 如何解决冲突：尝试分支合并如果出现冲突，git会提示无法合并，并给出是哪个文件的什么内容出现了冲突，此时很简单手动处理即可，即把其中一个分支的冲突文件的冲突行改成和另一个分支一样就可以正常进行分支合并操作了\n\n3. 查看分支合并图操作：git log --graph\n\n   使用这个命令将会看见分支合并的字符示意图\n\n  \n\n### 分支管理策略：\n\n  \n\n1. fast forward：git的默认分支合并模式，又快速合并模式。快速的同时，分支合并后，会丢失其中一个分支的分支信息，即忘掉自己是从之前哪个分支合并而来的\n\n2. 强制禁用fast forward的分支合并操作：git merge --no-ff -m \"merge with no-ff\" 分支名\n\n   其中--no-ff参数是指强制禁用fast forward。强制禁用fast forward进行分支合并会在合并的时候生成并commit一个新的版本，这样就可从分支历史上可以看出分支信息而不会丢失掉被合并的分支信息，也因为创建了一个新的版本并commit，所以需要加入-m参数并写入新版本的commit注释\n\n3. 分支管理策略：实践中，经常被遵循的几个基本的分支管理策略\n\n\t1. master：master分支仅用于发布新版本，即不用于写新的代码\n\t\n\t2. dev：写新的代码的干活分支你就命名为dev就比较好，每次写完就合并丢弃掉\n\t\n\t3. 多人协作：如果多人协作写新的代码，那么你们都拥有自己的干活分支，然后集体往dev分支上合并自己的新代码，最后需要发布新版本的时候统一一次性把dev合并到master\n\n  \n\n### Bug分支：\n\n  \n\n1. 项目有bug怎么办：开一个新的临时分支，然后在临时分支上编写新的代码修复bug，完成之后合并分支，把临时分支删掉\n\n2. 如果正在开发一个新的feature到一半还不想去正式add并commit本次的半成品代码，这时候需要紧急修复一个恶性bug：使用gut的stash（贮藏）功能\n\n3. stash：github提供的功能之一，功能是存档并回撤当前的工作区+暂存区修改，执行之后工作区将会回到上一个commit版本\n\n   这个操作的意义其实是用于一个分支的工作还没做完时，不想去正式add和commit半成品代码，却由于另一个紧急任务需要开辟新的分支，那就先把当前分支给贮藏，然后开新分支完成紧急任务并合并掉，再通过恢复贮藏操作，恢复原先还没完成的半成品代码，注意，如果紧急任务是修复bug，那么你恢复贮藏的时候会回退到有bug的版本，因此可以配合执行一个“复制特定commit的所有修改到当前分支”操作，以把你用于修复bug的代码复制到你恢复贮藏后的还未完成工作的半成品版本当中\n\n4. 贮藏操作：git stash\n\n5. 打印所有贮藏的列表操作：git stash list\n\n   这个命令将会打印出所有的贮藏的列表，贮藏名是stash@{0}格式的\n\n6. 单纯恢复某指定贮藏操作：git stash apply 贮藏名\n\n   这个命令不会删掉贮藏本身\n\n   如果你只有一个贮藏，那么不用写贮藏名也可以，git知道你只有一个可恢复的贮藏\n\n7. 删除某指定贮藏操作：git stash drop\n\n8. 恢复并删除某指定贮藏操作：git stash pop\n\n9. 复制特定commit的所有修改到当前分支操作：cherry-pick\n\n   这个操作本质是一次自动commit，因此当前分支的头版本会commit并前进一个含有被复制代码的新版本\n\n  \n\n### Feature分支：\n\n  \n\n1. 强制删除某指定分支操作：git branch -D 分支名\n\n   之所以会有强制删除一说，是因为如果某分支的修改从未被合并到任何其它分支就面临删除，此时如果执行删除会彻底丢失掉在这个分支上的所有工作，git不会允许你直接删除\n\n   不过听说根本就不存在彻底丢弃任何工作的场景，因为以防万一\n\n  \n\n### 多人协作：\n\n  \n\n1. 查看远程仓库的信息操作：git remote\n\n2. 查看所有远程仓库的详细信息操作：git remote -v\n\n   注意这个命令会在行末的括号里分别显示具有可以抓取和推送权限的远程仓库，如下图\n\n   ![Untitled](https://cdnjson.com/images/2024/04/15/Untitled-18f48d74ca5621b64.png)\n\n3. 推送本地指定分支的头版本到指定远程仓库：git push 指定远程仓库名 指定分支名\n\n   本地的默认远程仓库名称是origin\n\n4. 多人协作下的远程仓库推送冲突及解决办法：如果你和协作者都对同一文件进行了修改工作，对方先把对方的修改工作推送到了远程仓库的dev分支，此时你再尝试把自己对这个文件的修改工作推送到远程仓库的dev分支将会失败，解决办法先把自己本地的dev分支与远程仓库的dev分支进行同步，即把协作者的最新修改工作下载到你的本地dev分支，再本地将你的修改工作分支与你本地的dev分支合并，此时推送你本地的dev分支将不再冲突\n\n  \n\n### Rebase：\n\n  \n\n1. rebase的应用场景：基于之前的版本开发了一个新版本尚未提交上去时，之前的版本已经前进了两个版本，此时我们想提交我们开发的版本，但出于某种原因，我们需要基于最新的头版本提交我们开发的新的版本，而不是基于之前的版本（比如我们需要依赖新版本的几个特性），那么可以先从远程仓库把最新版本拉下来，然后执行rebase命令，这会重新指定基版本，然后再提交就行\n\n2. rebase操作：git rebase\n\n3. rebase的实质原理：实际上是把你基于之前版本的那些修改数据给丢弃掉了，但在此之前，会先自动创建一些基于较新版本的内容一样的新的修改\n\n  \n\n---\n\n  \n\n## 标签管理\n\n  \n\n### 标签管理：\n\n  \n\n1. 标签：commit的时候一同被提交的一个类似备注的数据结构。我们有了备注还要标签，是因为这个标签的作用是作为commit id的别名，一般是用来写版本号的，比如v1.2之类的\n\n  \n\n### 创建标签：\n\n  \n\n1. 给当前分支的最新版本打标签操作：git tag 标签名\n\n   这个标签名一般就是v1.0之类的\n\n2. 给当前分支的指定版本打标签操作：git tag 标签名 版本号\n\n   此处版本号也可以使用版本号的相对缩写法\n\n3. 查看所有标签列表操作：git tag\n\n   注意这里的列表是按字母顺序排列，而非时间顺序\n\n4. 给当前分支的指定版本打标签顺便写评论操作：git tag -a 标签名 -m \"评论字符串\" 版本号\n\n5. 查看指定标签的详细信息操作：git show 标签名\n\n  \n\n### 操作标签：\n\n  \n\n1. 删除标签操作：git tag -d 标签名\n\n2. 推送指定标签到远程仓库操作：git push 远程仓库名 标签名\n\n3. 推送所有标签到远程仓库操作：git push origin --tags\n\n4. 删除远程仓库的指定标签：先删除本地标签，然后git push origin :refs/tags/标签名\n\n  \n\n---\n\n  \n\n## 使用GitHub\n\n  \n\n### 使用GitHub：\n\n  \n\n1. 如何参与他人的开源社区项目：先把其他的开源项目的仓库fork一下到自己的账户名下，这样自己名下就有一个同样的该远程仓库了，然后把本地个人计算机与自己的账户名下的该远程仓库进行连接和clone，接下来对准自己的账户名下的该远程仓库进行工作即可，如果觉得完成了工作就发起一个pull request，如果对方接受，就会把你的工作合并到官方\n\n  \n\n---\n\n  \n\n## 使用Gitee\n\n  \n\n---\n\n  \n\n## 自定义Git\n\n  \n\n### 自定义Git：\n\n  \n\n1. 自定义Git是什么：git作为一个软件，有很多可配置的本地个性化可配置项\n\n2. git本身的配置文件在哪：\n\n\t1. 对每个项目，其git的配置文件在该项目根目录，即.git/config\n\t\n\t2. 对当前用户，即所有项目，其git配置文件在用户主目录下，即~/.gitconfig\n\n3. 让Git的终端输出显示颜色：git config --global color.ui true\n\n   其中--global参数是指对当前用户所有仓库作用，如果没有--global参数则默认只对当前仓库生效\n\n  \n\n### 忽略特殊文件：\n\n  \n\n1. 忽略特殊文件的作用：有些比如密码文件之类的必须放到工作区，但肯定不能提交到新版本中，因此可以手动指定，让git对某些工作区文件进行忽略\n\n2. 如何忽略特殊文件：在工作区根目录下手动创建一个叫.gitignore的文件，把所有要忽略的文件名写进去即可，只要写名字不需要写目录，而且可以使用通配符例如星号*，可以对某指定规则开头使用取反符号!，注释的语法是井号#。\n\n3. .gitignore文件本身不能忽略：.gitignore文件本身不能忽略，即其本身应该被git管理，因为所有的协作者都应该使用同样的.gitignore文件\n\n4. 哪些文件需要被忽略：\n\n\t1. 操作系统自动生成的二级附带文件：缩略图等\n\t\n\t2. 中间文件：如果某个文件会自动生成一些二级文件，那么就没有必要把这些二级文件放进版本库中。常见编译过程产生的文件，例如java编译会产生.class二级文件\n\t\n\t3. 敏感信息：带有敏感信息的文件，例如口令、带密码的配置文件\n\n5. git官方的忽略文件：市面上有很多常见项目比如maven，archlinux什么的，项目又复杂，需要忽略的文件已经被github官方整理好成现成的.gitignore文件在https://github.com/github/gitignore，只需要组合即可\n\n6. windows系统无法在资源管理器下新建一个名字叫.gitignore的文件：未知原因，反正就是提醒让你必须输入文件名，必须通过文本编辑器等其它软件手动通过保存或者另存为之类的方式创建，总之windows自带的资源管理器就是不行\n\n7. 强制add某被忽略文件操作：git add -f 文件名\n\n   使用该命令将会把被忽略的文件add进版本中\n\n8. 检查某文件是否被忽略操作：git check-ignore -v 文件名\n\n   git会定位并返回是.gitignore文件的哪一行的什么规则导致该文件名被忽略\n\n9. 一个项目可以具有多个.gitignore文件：.gitignore文件具有可见域属性，具体而言，其放在哪个目录下，则该目录及其子目录都会受到该.gitignore文件的影响\n\n  \n\n### 配置别名：\n\n  \n\n1. 别名的意义：git大部分都命令都太长了，官方设置了一套命令的别名功能\n\n2. 设定别名：git config --global alias.别名 原名\n\n   例如git config --global alias.st status，意思是，把git status用git st指代\n\n3. 常见别名：\n\n\t1. co是checkout的别名\n\t\n\t2. ci是commit的别名\n\t\n\t3. br是branch的别名\n\n  \n\n### 搭建Git服务器：\n\n  \n\n1. 搭建Git服务器的作用：使用git控制版本，但不想用github等托管平台\n\n2. 搭建Git服务器的步骤：因为不需要，就不学了\n\n3. Gitolite：git本身没有对协作者的读写权限控制功能，但git支持钩子hook，可以用其在自己搭建的git服务器上编写一系列脚本来控制协作者的读写权限到具体分支、具体目录，有些公司需要这个功能\n\n  \n\n---\n\n  \n\n## 使用Source Tree\n\n  \n\n### 使用Source Tree：\n\n  \n\n1. Source Tree是什么：Atlassian开发的免费的图形用户界面Git工具","slug":"技术栈/Git教程","published":1,"updated":"2024-04-15T16:15:11.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnr8000bhk8za9szgf39","content":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本教程是廖雪峰的官方网站中的Git教程的完整笔记<br> <br> <a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">https://www.liaoxuefeng.com/wiki/896043488029600</a><br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 1. 笔记会做到基本完整记录书中所有知识点不会有任何遗漏<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>总之就是，同样的项目，git同时维护了工作区版本、暂存区版本和版本库头版本三份项目，这种维护是从逻辑上维护的而非存储了全部的文件，做到这一点是从设计上只存储对每个文件的修改而非存储全量的所有文件，运行的时候，只有工作区是一份完整的项目文件，程序员对工作区内的项目文件进行新的编辑，然后提交到暂存区，此时git会计算修改然后被提交到暂存区的不是文件而是修改，最后从暂存区发射命令，一次性把暂存区中的修改正式提交到版本库。</p>\n<p>最后，所学的这些命令基本就是对工作区、暂存区、版本库的增删改查</p>\n<h2 id=\"Git简介\"><a href=\"#Git简介\" class=\"headerlink\" title=\"Git简介\"></a>Git简介</h2><h3 id=\"Git的诞生：\"><a href=\"#Git的诞生：\" class=\"headerlink\" title=\"Git的诞生：\"></a>Git的诞生：</h3><ol>\n<li><p>git的发展历史沿革：从1991年开始，手工合并11年，用BitKeeper管理3年，然后闹掰写出了git</p>\n<ol>\n<li><p>1991年：Linus创建了开源linux系统</p>\n</li>\n<li><p>2002年之前：世界各地开源贡献者手动发送给Linus，Linus用一个叫diff的文本差异比较软件手工合并代码，因为那时Linus反对当时的集中式版本控制系统例如CVS和SVN，这又是因为这种软件速度慢而且必须联网的缺点，总之就是不好用</p>\n</li>\n<li><p>2002年到2005年：由于代码实在太庞大无法继续手工合并，社区给了Linus压力，Linus找到商业版本控制系统软件开发公司BitMover公司，让Linux社区获得了免费使用BitKeeper软件的权限</p>\n</li>\n<li><p>2005年，社区里一个叫Andrew的尝试破解BitKeeper软件然后被发现，BitMover公司要求收回对Linux社区的免费使用权限→Linux不道歉，花了2周时间用C写了一个分布式版本控制系统Git</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"集中式vs分布式：\"><a href=\"#集中式vs分布式：\" class=\"headerlink\" title=\"集中式vs分布式：\"></a>集中式vs分布式：</h3><ol>\n<li><p>集中式版本控制系统：一种版本控制系统的分类。</p>\n<ol>\n<li><p>集中式版本控制系统的工作方式：版本库（软件所有版本的集合）集中存放在中央服务器，程序员编码则使用自己的电脑，每次写代码之前先从中央服务器同步下来最新的版本，然后写代码，写完了代码把本地的版本推送到中央服务器。</p>\n</li>\n<li><p>集中式版本控制系统的缺点：必须联网才能工作，在互联网上，网速慢的话提交文件很痛苦。</p>\n</li>\n</ol>\n</li>\n<li><p>分布式版本控制系统：一种版本控制系统的分类。</p>\n<ol>\n<li><p>分布式版本控制系统的工作方式：每个人的电脑上存放一个完整的版本库（软件所有版本的集合），写代码的话直接就着本地的版本库开写，多人协作的话就互相把对文件的修改推送给协作编码的所有人</p>\n</li>\n<li><p>分布式版本控制系统的的优点：相比于集中式版本控制系统会安全一些，因为所有协作者的电脑都存储了完整的版本库，任一人的电脑坏掉，只需要把别人的版本库复制过来即可，但集中式版本控制系统的中央服务器如果出问题基本这项目就告别了</p>\n</li>\n<li><p>实际中分布式版本控制系统也需要一个用于交换修改之处的中央服务器：实际中，很少让项目中协作者进行端到端互相推送这种事情，一般会设定一个中央服务器，用于交换修改，和集中式版本控制系统的区别是每次编码之前不用先从中央服务器上同步下才能开始工作，直接可以开始干活，而且哪怕没有用于交换的中央服务器，也照样可以协作，只是交换修改会不太方便</p>\n</li>\n</ol>\n</li>\n<li><p>CVS：一种开源、免费的集中式版本控制系统。最早的集中式版本控制系统，至今还有人使用，但是本身有一些问题，容易提交文件不完整，版本库莫名损坏</p>\n</li>\n<li><p>SVN：一种开源、免费的集中式版本控制系统。比CVS好在稳定得多，在集中式版本控制系统中份额最大</p>\n</li>\n<li><p>ClearCase：一种收费的集中式版本控制系统。IBM公司从Rational公司手里收购而来，缺点非常突出，安装包比windows还大，运行比蜗牛还慢，只有比较人傻钱多的那种世界500强会用</p>\n</li>\n<li><p>VSS：一种集中式版本控制系统。微软开发的集中式版本控制系统，在Visual Studio中内置，但不好用，连微软自己都不用</p>\n</li>\n<li><p>常见的分布式版本控制系统：Git、BitKeeper、Mercurial、Bazaar</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><ol>\n<li><p>名字和电子邮箱：安装Git所必须执行的最后一步。</p>\n<ol>\n<li><p>名字和电子邮箱的作用：用于分布式版本控制系统用于自报家门，但也不用担心被冒充</p>\n</li>\n<li><p>可以对不同仓库分别指定名字和电子邮箱：可以对不同仓库分别指定名字和电子邮箱</p>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h2><ol>\n<li><p>版本库：受GIt追踪的用于存储项目的仓库。</p>\n</li>\n<li><p>修改：git中的一个单位。对文件的一次增删改就算作一次修改。</p>\n</li>\n<li><p>Git究竟追踪了版本库的什么：追踪修改。这也是为什么Git比其他版本控制系统设计得优秀的原因，其追踪修改而非追踪文件</p>\n</li>\n<li><p>创建版本库的步骤：</p>\n<ol>\n<li><p>命令行cd到版本库根目录下</p>\n</li>\n<li><p>初始化版本库根目录为受Git追踪的仓库：git init</p>\n</li>\n</ol>\n<p>此时版本库根目录会多出一个叫.git的隐藏子文件夹，其用于跟踪版本库</p>\n</li>\n<li><p>Git只能追踪文本文件的修改：包括git在内的所有版本控制系统，能够被追踪修改的只有文本文件，即二进制文件的修改不可被追踪【想想也知道视频或图片文件肯定无法被字符级追踪】，而且具体而言，是以行为单位，跟踪具体的某一文件某一行号的修改</p>\n</li>\n<li><p>Word文件是二进制格式文件：值得注意的是word文件不属于文本文件，而是一种二进制文件，所以word文件不能被git追踪</p>\n</li>\n<li><p>建议使用UTF-8文本编码：标准编码，支持万国语言</p>\n</li>\n<li><p>不要使用windows自带的记事本对文本文件进行编辑：windows自带的记事本会为每个被编辑的文件开头增加一行，这行只有一个0xefbbbf字符，，造成的问题一般有1. 网页第一行显示一个问号；程序编译报错</p>\n</li>\n<li><p>把文件同步到本地版本库操作：</p>\n<ol>\n<li><p>把readme.txt文件添加入暂存区：git add 文件名1 文件名2 文件名3<br>在把文件和文件修改提交到版本库之前设定一个暂存区的目的是，你可以add很多个文件，然后下一步一次性提交到版本库，例如上述示例中就add了三个文件</p>\n<p>这一步如果成功会没有任何提示因为Unix哲学是“没有任何消息就是好消息”</p>\n</li>\n<li><p>把文件提交到本地版本库：git commit -m “wrote a readme file”</p>\n<p>其中-m属性及其后面的字符串参数，是指对本次提交的文字说明，必须写，但是有办法可以不写，但最好还是每次写一下</p>\n<p>这一步如果成功将会打印仓库变动的一份简略报告，例如3 file changed是三个文件被修改，2 insertions是插入了2行新的内容</p>\n</li>\n</ol>\n</li>\n<li><p>一次性把根目录塞到暂存区的操作：git add .</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"时光机穿梭\"><a href=\"#时光机穿梭\" class=\"headerlink\" title=\"时光机穿梭\"></a>时光机穿梭</h2><h3 id=\"时光机穿梭：\"><a href=\"#时光机穿梭：\" class=\"headerlink\" title=\"时光机穿梭：\"></a>时光机穿梭：</h3><ol>\n<li><p>查看当前工作区【git相对其它版本控制系统的一个独特概念。工作区就是版本库根目录下除了.git文件夹下的所有目录和文件】的状态操作：git status</p>\n<p>这个目录将会打印当前仓库的状态信息，包括在哪个分支里、是否存在已修改但未提交到版本库的修改（以及具体是哪些文件被修改了），示例如下：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\"></span><br><span class=\"line\">(use <span class=\"string\">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">(use <span class=\"string\">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class=\"keyword\">in</span> working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">modified: readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use <span class=\"string\">&quot;git add&quot;</span> and/or <span class=\"string\">&quot;git commit -a&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>查看某文件的修改情况：git diff 文件名</p>\n<p>会以unix通用的diff格式打印出文件的修改情况</p>\n</li>\n</ol>\n<h3 id=\"版本回退：\"><a href=\"#版本回退：\" class=\"headerlink\" title=\"版本回退：\"></a>版本回退：</h3><ol>\n<li><p>查看本地版本库提交记录：git log</p>\n<p>这个命令将会打印所有的commit的提交记录，包括每次commit的版本号（十六进制哈希编码）、每次commit的作者是谁、日期时间、commit时的的注释</p>\n</li>\n<li><p>版本号使用哈希编码的原因：对集中式版本控制系统SVN而言commit id是顺序的1、2、3编号，但分布式版本控制系统由于是分布式协作，所以必须使用哈希来给每一次提交编号，防止不同的人的不同提交却使用同样的提交号</p>\n</li>\n<li><p>版本号的相对缩写法：</p>\n<ol>\n<li><p>HEAD：HEAD表示当前的最新的版本</p>\n</li>\n<li><p>幂符号：HEAD后每加一个幂符号^表示第前一个版本，即HEAD^表示上个版本，HEAD^^表示第前两个版本</p>\n</li>\n<li><p>幂数：HEAD可以直接用幂数标注“第前多少个版本”，即HEAD^100表示第前100个版本</p>\n</li>\n</ol>\n</li>\n<li><p>回退版本库中的头版本操作：git reset –hard 版本号</p>\n<p>注意这里可以用版本号的相对缩写法也可以直接写出版本号，例如git reset –hard HEAD^，或者git reset –hard 1094a，直接写版本号写前几个十六进制数字即可，git会自动搜索</p>\n</li>\n<li><p>打印所有历史git命令历史记录：git reflog</p>\n<p>这个命令会记录所有的记录</p>\n</li>\n<li><p>版本回退如果后悔了：用之前的版本号reset命令回去。如果关掉了终端导致丢失了之前的版本号，可以用git reflog命令查看一下记录，里面会有曾经从哪个先进版本号回退到哪个过去版本号的记录</p>\n</li>\n<li><p>版本回退的速度：版本回退速度很快，因为原理上只是把指向当前版本的HEAD指针往过去的版本指回去即可</p>\n</li>\n</ol>\n<h3 id=\"工作区和暂存区：\"><a href=\"#工作区和暂存区：\" class=\"headerlink\" title=\"工作区和暂存区：\"></a>工作区和暂存区：</h3><ol>\n<li><p>工作区：git相对其它版本控制系统的一个独特概念。工作区就是版本库根目录下除了.git文件夹下的所有目录和文件</p>\n</li>\n<li><p>版本库：git中的一个文件夹的名字。隐藏文件夹.git就是版本库，版本库就是git下一个文件夹的名字。版本库中存储的主要内容是1. 暂存区stage；2. master分支；3. 指向master分支的指针HEAD</p>\n</li>\n<li><p>暂存区&#x2F;stage：版本库中的主要内容之一，又名index。工作区中项目的修改被add命令会先添加到暂存区，暂存区的内容会在commit命令后被提交到master分支中</p>\n</li>\n</ol>\n<h3 id=\"管理修改：\"><a href=\"#管理修改：\" class=\"headerlink\" title=\"管理修改：\"></a>管理修改：</h3><h3 id=\"撤销修改：\"><a href=\"#撤销修改：\" class=\"headerlink\" title=\"撤销修改：\"></a>撤销修改：</h3><ol>\n<li><p>回退工作区中对文件的修改操作：git checkout – 文件名</p>\n<p>把工作区中已被编辑修改但还没add命令到暂存区中的指定文件，回退到暂存区中的版本，如果暂存区中没有这个文件的新版本就回退到上一次commit的文件版本</p>\n<p>这个命令可以用于误删工作区中的文件，从版本库的头版本中恢复</p>\n</li>\n<li><p>回退暂存区中对文件的修改操作：git reset HEAD readme.txt</p>\n<p>这是也是和“回退版本库中的头版本”操作一样使用了reset命令【“回退版本库中的头版本”操作的命令是git reset –hard 版本号】，即这个命令既可以用于版本库也可以用于暂存区。对暂存区使用reset命令后，暂存区中对文件的修改并不会丢失，而是向后回退到工作区文件</p>\n</li>\n</ol>\n<h3 id=\"删除文件：\"><a href=\"#删除文件：\" class=\"headerlink\" title=\"删除文件：\"></a>删除文件：</h3><ol>\n<li>删除版本库中头版本中的文件：git rm 文件名</li>\n</ol>\n<hr>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><h3 id=\"远程仓库：\"><a href=\"#远程仓库：\" class=\"headerlink\" title=\"远程仓库：\"></a>远程仓库：</h3><ol>\n<li><p>在github上设置SSH相关：本地git与github之间一般使用SSH协议进行数据传输，所以需要在github上设置一下你的个人计算机的非对称加密公钥以便建立SSH连接</p>\n<ol>\n<li><p>如果没有id_rsa和id_rsa.pub文件：找找你的电脑里的本用户目录的.ssh文件夹，一般这个文件夹下会有两个文件id_rsa和id_rsa.pub，这一个是非对称加密私钥一个是非对称加密公钥，如果没有的话创建一对就行，命令是在.ssh目录下运行ssh-keygen -t rsa -C “邮箱字符串”</p>\n</li>\n<li><p>在github上添加SSH key：登录github，打开account settings里的SSH Keys，把你的id_rsa.pub文件里的字符串全部粘贴进去就行，标题就是给这串公钥起个名，然后保存</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"添加远程库：\"><a href=\"#添加远程库：\" class=\"headerlink\" title=\"添加远程库：\"></a>添加远程库：</h3><ol>\n<li><p>远程库原理：让你本地电脑与github公司的服务器电脑结成分布式端到端连接，不仅可以让github服务器上的版本作为项目的备份，还能方便他人也通过github服务器结成分布式端到端连接，进行项目协作，其它基于git的代码托管平台同理</p>\n</li>\n<li><p>与github上的项目仓库远程库进行远程分布式端到端连接操作：git remote add 本地给远程仓库起的名 <a href=\"mailto:&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#x6d;\">&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#x6d;</a>:github账号username&#x2F;github仓库名.git</p>\n<p>例如git remote add origin <a href=\"mailto:&#x67;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;\">&#x67;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>:michaelliao&#x2F;learngit.git，就是把本地版本库与github账号michaelliao的learngit仓库进行了远程连接，这个远程仓库在本地设定为名字origin</p>\n</li>\n<li><p>git使用ssh连接远程仓库：git连接本地版本库与远程仓库的原理是使用ssh</p>\n</li>\n<li><p>把本地版本库上的头版本推送到远程库操作：git push -u origin master</p>\n<p>把本地的master分支头版本推送到起名为origin的远程仓库。因为git使用ssh连接远程仓库的缘故，如果第一次使用这个命令的时候有可能会弹出ssh警告，询问是否进行连接，这本质上是询问是否进行ssh连接，输入yes或者no即可，输入yes就会把github给的非对称加密公钥添加到本地信任列表</p>\n<p>-u参数的功能是把本地的master分支与远程的master分支进行关联，这种关联在第一次使用push命令的时候需要指定，在以后则可以进行省略，即第一次运行的时候是git push -u origin master，以后只需要git push origin master</p>\n</li>\n<li><p>查看所有的分布式端到端连接到的远程库操作：git remote -v</p>\n</li>\n<li><p>删除本地已完成分布式端到端连接的某远程库的连接操作：git remote rm 远程库名</p>\n<p>例如git remote rm origin就是把本地版本库对远程库origin的连接删掉，即解除本地版本库对远程库的绑定关系</p>\n</li>\n</ol>\n<h3 id=\"从远程库克隆：\"><a href=\"#从远程库克隆：\" class=\"headerlink\" title=\"从远程库克隆：\"></a>从远程库克隆：</h3><ol>\n<li><p>使用ssh协议把远程库里的头版本克隆到本地工作区操作：git clone <a href=\"mailto:&#x67;&#105;&#116;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;\">&#x67;&#105;&#116;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;</a>:github账号username&#x2F;github仓库名.git</p>\n<p>例如，git clone <a href=\"mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#109;\">&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#109;</a>:michaelliao&#x2F;gitskills.git，就是把github账号michaelliao的learngit仓库里的头版本克隆到本地工作区</p>\n<p>上述的git@格式的是进行ssh连接，github支持多种协议例如https，但https坏处是速度慢，而且每次推送必须输入一次密钥，当然好处是有些公司用服务器是禁止ssh端口的，只能使用ssh之外的协议</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><h3 id=\"分支管理：\"><a href=\"#分支管理：\" class=\"headerlink\" title=\"分支管理：\"></a>分支管理：</h3><ol>\n<li>SVN系统的分支管理功能的缺点：创建和切换分支巨慢让人无法忍受</li>\n</ol>\n<h3 id=\"创建与合并分支：\"><a href=\"#创建与合并分支：\" class=\"headerlink\" title=\"创建与合并分支：\"></a>创建与合并分支：</h3><ol>\n<li><p>HEAD指针指向的版本是什么：指向当前分支的头版本指针的指针</p>\n</li>\n<li><p>分支是什么：git中每次commit都会构造一个新的项目头版本，随着版本不断更新，头版本和旧版本穿成一条链，这条链就叫分支，每个分支附带一个指向该分支头版本的指针</p>\n</li>\n<li><p>创建一个新分支我们在创建什么：新分支创始之初，是创建了一个新的指向头版本的指针，你可以让HEAD指针指向这个新指针，然后每次commit的新版本会更新在这个新指针上，随着你在新的分支头版本指针上不断commit添加新版本，这个新的分支就跟着分支头版本指针越走越长</p>\n</li>\n<li><p>创建新分支操作：git branch 新分支名</p>\n</li>\n<li><p>切换到某分支操作：git checkout 分支名</p>\n</li>\n<li><p>创建新分支加切换到新分支融合快捷操作：git checkout -b 新分支名</p>\n<p>-b参数就是这个创建并切换的操作</p>\n</li>\n<li><p>打印所有分支操作：git branch</p>\n<p>这个命令会列出所有分支，并且在当前commit欲更新版本的分支的名字之前打出星号*</p>\n</li>\n<li><p>把指定分支名的头指针指向当前分支的头指针（分支合并）操作：git merge 分支名</p>\n<p>这个操作会重定向指定的分支头指针，将其指向当前分支头指针，所有的修改会被融合</p>\n</li>\n<li><p>删除分支：git branch -d 分支名</p>\n<p>之后还有个强制删除分支的命令</p>\n</li>\n<li><p>分支的用法：无论是在github上协作还是自己写项目，我们先自己弄一个分支，并且在这个分支上更新版本，最后去申请分支合并（即申请把github服务器上的项目仓库的HEAD指针指向自己的分支头版本指针）或自己进行分支合并，然后把为了完成任务创建的新分支删掉，这样会相比直接在master分支上工作安全。</p>\n</li>\n<li><p>switch命令：新版git觉得切换到某分支操作用checkout命令（切换到某分支操作：git checkout 分支名）以及回退工作区中对文件的修改操作也用checkout命令（回退工作区中对文件的修改操作：git checkout – 文件名）都共用checkout命令是令人迷惑的，因此新版本把切换分支单独开了个命令叫switch：</p>\n</li>\n<li><p>switch切换到某分支操作：git switch 分支名</p>\n</li>\n<li><p>switch创建新分支加切换到新分支融合快捷操作：git switch -c 新分支名</p>\n</li>\n</ol>\n<h3 id=\"解决冲突：\"><a href=\"#解决冲突：\" class=\"headerlink\" title=\"解决冲突：\"></a>解决冲突：</h3><ol>\n<li><p>冲突：两个分支如果都修改同一个文件后，对这两个分支进行分支合并操作，产生的一种冲突现象。具体而言，现在有两个分支，我们知道git跟踪的是修改，而且跟踪的是对行号的文本修改，那么如果两个不同分支都对同一个文件的相同行号进行了修改，然后分别对这两个分支进行了add和commit，正常而言两个分支的头指针都会往前延伸一个新版本，此时如果你尝试对两个分支进行分支合并（把指定分支名的头指针指向当前分支的头指针（分支合并）操作：git merge 分支名。这个操作会重定向指定的分支头指针，将其指向当前分支头指针），由于两个分支的这个相同文件的相同行号的修改内容不同，就会产生分支无法合并的冲突。</p>\n<p>如下是一个典型的冲突，有两个分支，feature1和master，都分别对同一文件进行不同修改，提交成了两个不同的版本，此时HEAD指针指向master，如果尝试合并feature1和master，就会产生冲突</p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://cdnjson.com/images/2024/04/15/Untitled56bba0107becb5d2.png\" alt=\"Untitled\"></p>\n</li>\n<li><p>如何解决冲突：尝试分支合并如果出现冲突，git会提示无法合并，并给出是哪个文件的什么内容出现了冲突，此时很简单手动处理即可，即把其中一个分支的冲突文件的冲突行改成和另一个分支一样就可以正常进行分支合并操作了</p>\n</li>\n<li><p>查看分支合并图操作：git log –graph</p>\n<p>使用这个命令将会看见分支合并的字符示意图</p>\n</li>\n</ol>\n<h3 id=\"分支管理策略：\"><a href=\"#分支管理策略：\" class=\"headerlink\" title=\"分支管理策略：\"></a>分支管理策略：</h3><ol>\n<li><p>fast forward：git的默认分支合并模式，又快速合并模式。快速的同时，分支合并后，会丢失其中一个分支的分支信息，即忘掉自己是从之前哪个分支合并而来的</p>\n</li>\n<li><p>强制禁用fast forward的分支合并操作：git merge –no-ff -m “merge with no-ff” 分支名</p>\n<p>其中–no-ff参数是指强制禁用fast forward。强制禁用fast forward进行分支合并会在合并的时候生成并commit一个新的版本，这样就可从分支历史上可以看出分支信息而不会丢失掉被合并的分支信息，也因为创建了一个新的版本并commit，所以需要加入-m参数并写入新版本的commit注释</p>\n</li>\n<li><p>分支管理策略：实践中，经常被遵循的几个基本的分支管理策略</p>\n<ol>\n<li><p>master：master分支仅用于发布新版本，即不用于写新的代码</p>\n</li>\n<li><p>dev：写新的代码的干活分支你就命名为dev就比较好，每次写完就合并丢弃掉</p>\n</li>\n<li><p>多人协作：如果多人协作写新的代码，那么你们都拥有自己的干活分支，然后集体往dev分支上合并自己的新代码，最后需要发布新版本的时候统一一次性把dev合并到master</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Bug分支：\"><a href=\"#Bug分支：\" class=\"headerlink\" title=\"Bug分支：\"></a>Bug分支：</h3><ol>\n<li><p>项目有bug怎么办：开一个新的临时分支，然后在临时分支上编写新的代码修复bug，完成之后合并分支，把临时分支删掉</p>\n</li>\n<li><p>如果正在开发一个新的feature到一半还不想去正式add并commit本次的半成品代码，这时候需要紧急修复一个恶性bug：使用gut的stash（贮藏）功能</p>\n</li>\n<li><p>stash：github提供的功能之一，功能是存档并回撤当前的工作区+暂存区修改，执行之后工作区将会回到上一个commit版本</p>\n<p>这个操作的意义其实是用于一个分支的工作还没做完时，不想去正式add和commit半成品代码，却由于另一个紧急任务需要开辟新的分支，那就先把当前分支给贮藏，然后开新分支完成紧急任务并合并掉，再通过恢复贮藏操作，恢复原先还没完成的半成品代码，注意，如果紧急任务是修复bug，那么你恢复贮藏的时候会回退到有bug的版本，因此可以配合执行一个“复制特定commit的所有修改到当前分支”操作，以把你用于修复bug的代码复制到你恢复贮藏后的还未完成工作的半成品版本当中</p>\n</li>\n<li><p>贮藏操作：git stash</p>\n</li>\n<li><p>打印所有贮藏的列表操作：git stash list</p>\n<p>这个命令将会打印出所有的贮藏的列表，贮藏名是stash@{0}格式的</p>\n</li>\n<li><p>单纯恢复某指定贮藏操作：git stash apply 贮藏名</p>\n<p>这个命令不会删掉贮藏本身</p>\n<p>如果你只有一个贮藏，那么不用写贮藏名也可以，git知道你只有一个可恢复的贮藏</p>\n</li>\n<li><p>删除某指定贮藏操作：git stash drop</p>\n</li>\n<li><p>恢复并删除某指定贮藏操作：git stash pop</p>\n</li>\n<li><p>复制特定commit的所有修改到当前分支操作：cherry-pick</p>\n<p>这个操作本质是一次自动commit，因此当前分支的头版本会commit并前进一个含有被复制代码的新版本</p>\n</li>\n</ol>\n<h3 id=\"Feature分支：\"><a href=\"#Feature分支：\" class=\"headerlink\" title=\"Feature分支：\"></a>Feature分支：</h3><ol>\n<li><p>强制删除某指定分支操作：git branch -D 分支名</p>\n<p>之所以会有强制删除一说，是因为如果某分支的修改从未被合并到任何其它分支就面临删除，此时如果执行删除会彻底丢失掉在这个分支上的所有工作，git不会允许你直接删除</p>\n<p>不过听说根本就不存在彻底丢弃任何工作的场景，因为以防万一</p>\n</li>\n</ol>\n<h3 id=\"多人协作：\"><a href=\"#多人协作：\" class=\"headerlink\" title=\"多人协作：\"></a>多人协作：</h3><ol>\n<li><p>查看远程仓库的信息操作：git remote</p>\n</li>\n<li><p>查看所有远程仓库的详细信息操作：git remote -v</p>\n<p>注意这个命令会在行末的括号里分别显示具有可以抓取和推送权限的远程仓库，如下图</p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://cdnjson.com/images/2024/04/15/Untitled-18f48d74ca5621b64.png\" alt=\"Untitled\"></p>\n</li>\n<li><p>推送本地指定分支的头版本到指定远程仓库：git push 指定远程仓库名 指定分支名</p>\n<p>本地的默认远程仓库名称是origin</p>\n</li>\n<li><p>多人协作下的远程仓库推送冲突及解决办法：如果你和协作者都对同一文件进行了修改工作，对方先把对方的修改工作推送到了远程仓库的dev分支，此时你再尝试把自己对这个文件的修改工作推送到远程仓库的dev分支将会失败，解决办法先把自己本地的dev分支与远程仓库的dev分支进行同步，即把协作者的最新修改工作下载到你的本地dev分支，再本地将你的修改工作分支与你本地的dev分支合并，此时推送你本地的dev分支将不再冲突</p>\n</li>\n</ol>\n<h3 id=\"Rebase：\"><a href=\"#Rebase：\" class=\"headerlink\" title=\"Rebase：\"></a>Rebase：</h3><ol>\n<li><p>rebase的应用场景：基于之前的版本开发了一个新版本尚未提交上去时，之前的版本已经前进了两个版本，此时我们想提交我们开发的版本，但出于某种原因，我们需要基于最新的头版本提交我们开发的新的版本，而不是基于之前的版本（比如我们需要依赖新版本的几个特性），那么可以先从远程仓库把最新版本拉下来，然后执行rebase命令，这会重新指定基版本，然后再提交就行</p>\n</li>\n<li><p>rebase操作：git rebase</p>\n</li>\n<li><p>rebase的实质原理：实际上是把你基于之前版本的那些修改数据给丢弃掉了，但在此之前，会先自动创建一些基于较新版本的内容一样的新的修改</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"标签管理\"><a href=\"#标签管理\" class=\"headerlink\" title=\"标签管理\"></a>标签管理</h2><h3 id=\"标签管理：\"><a href=\"#标签管理：\" class=\"headerlink\" title=\"标签管理：\"></a>标签管理：</h3><ol>\n<li>标签：commit的时候一同被提交的一个类似备注的数据结构。我们有了备注还要标签，是因为这个标签的作用是作为commit id的别名，一般是用来写版本号的，比如v1.2之类的</li>\n</ol>\n<h3 id=\"创建标签：\"><a href=\"#创建标签：\" class=\"headerlink\" title=\"创建标签：\"></a>创建标签：</h3><ol>\n<li><p>给当前分支的最新版本打标签操作：git tag 标签名</p>\n<p>这个标签名一般就是v1.0之类的</p>\n</li>\n<li><p>给当前分支的指定版本打标签操作：git tag 标签名 版本号</p>\n<p>此处版本号也可以使用版本号的相对缩写法</p>\n</li>\n<li><p>查看所有标签列表操作：git tag</p>\n<p>注意这里的列表是按字母顺序排列，而非时间顺序</p>\n</li>\n<li><p>给当前分支的指定版本打标签顺便写评论操作：git tag -a 标签名 -m “评论字符串” 版本号</p>\n</li>\n<li><p>查看指定标签的详细信息操作：git show 标签名</p>\n</li>\n</ol>\n<h3 id=\"操作标签：\"><a href=\"#操作标签：\" class=\"headerlink\" title=\"操作标签：\"></a>操作标签：</h3><ol>\n<li><p>删除标签操作：git tag -d 标签名</p>\n</li>\n<li><p>推送指定标签到远程仓库操作：git push 远程仓库名 标签名</p>\n</li>\n<li><p>推送所有标签到远程仓库操作：git push origin –tags</p>\n</li>\n<li><p>删除远程仓库的指定标签：先删除本地标签，然后git push origin :refs&#x2F;tags&#x2F;标签名</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"使用GitHub\"><a href=\"#使用GitHub\" class=\"headerlink\" title=\"使用GitHub\"></a>使用GitHub</h2><h3 id=\"使用GitHub：\"><a href=\"#使用GitHub：\" class=\"headerlink\" title=\"使用GitHub：\"></a>使用GitHub：</h3><ol>\n<li>如何参与他人的开源社区项目：先把其他的开源项目的仓库fork一下到自己的账户名下，这样自己名下就有一个同样的该远程仓库了，然后把本地个人计算机与自己的账户名下的该远程仓库进行连接和clone，接下来对准自己的账户名下的该远程仓库进行工作即可，如果觉得完成了工作就发起一个pull request，如果对方接受，就会把你的工作合并到官方</li>\n</ol>\n<hr>\n<h2 id=\"使用Gitee\"><a href=\"#使用Gitee\" class=\"headerlink\" title=\"使用Gitee\"></a>使用Gitee</h2><hr>\n<h2 id=\"自定义Git\"><a href=\"#自定义Git\" class=\"headerlink\" title=\"自定义Git\"></a>自定义Git</h2><h3 id=\"自定义Git：\"><a href=\"#自定义Git：\" class=\"headerlink\" title=\"自定义Git：\"></a>自定义Git：</h3><ol>\n<li><p>自定义Git是什么：git作为一个软件，有很多可配置的本地个性化可配置项</p>\n</li>\n<li><p>git本身的配置文件在哪：</p>\n<ol>\n<li><p>对每个项目，其git的配置文件在该项目根目录，即.git&#x2F;config</p>\n</li>\n<li><p>对当前用户，即所有项目，其git配置文件在用户主目录下，即~&#x2F;.gitconfig</p>\n</li>\n</ol>\n</li>\n<li><p>让Git的终端输出显示颜色：git config –global color.ui true</p>\n<p>其中–global参数是指对当前用户所有仓库作用，如果没有–global参数则默认只对当前仓库生效</p>\n</li>\n</ol>\n<h3 id=\"忽略特殊文件：\"><a href=\"#忽略特殊文件：\" class=\"headerlink\" title=\"忽略特殊文件：\"></a>忽略特殊文件：</h3><ol>\n<li><p>忽略特殊文件的作用：有些比如密码文件之类的必须放到工作区，但肯定不能提交到新版本中，因此可以手动指定，让git对某些工作区文件进行忽略</p>\n</li>\n<li><p>如何忽略特殊文件：在工作区根目录下手动创建一个叫.gitignore的文件，把所有要忽略的文件名写进去即可，只要写名字不需要写目录，而且可以使用通配符例如星号*，可以对某指定规则开头使用取反符号!，注释的语法是井号#。</p>\n</li>\n<li><p>.gitignore文件本身不能忽略：.gitignore文件本身不能忽略，即其本身应该被git管理，因为所有的协作者都应该使用同样的.gitignore文件</p>\n</li>\n<li><p>哪些文件需要被忽略：</p>\n<ol>\n<li><p>操作系统自动生成的二级附带文件：缩略图等</p>\n</li>\n<li><p>中间文件：如果某个文件会自动生成一些二级文件，那么就没有必要把这些二级文件放进版本库中。常见编译过程产生的文件，例如java编译会产生.class二级文件</p>\n</li>\n<li><p>敏感信息：带有敏感信息的文件，例如口令、带密码的配置文件</p>\n</li>\n</ol>\n</li>\n<li><p>git官方的忽略文件：市面上有很多常见项目比如maven，archlinux什么的，项目又复杂，需要忽略的文件已经被github官方整理好成现成的.gitignore文件在<a href=\"https://github.com/github/gitignore%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E7%BB%84%E5%90%88%E5%8D%B3%E5%8F%AF\">https://github.com/github/gitignore，只需要组合即可</a></p>\n</li>\n<li><p>windows系统无法在资源管理器下新建一个名字叫.gitignore的文件：未知原因，反正就是提醒让你必须输入文件名，必须通过文本编辑器等其它软件手动通过保存或者另存为之类的方式创建，总之windows自带的资源管理器就是不行</p>\n</li>\n<li><p>强制add某被忽略文件操作：git add -f 文件名</p>\n<p>使用该命令将会把被忽略的文件add进版本中</p>\n</li>\n<li><p>检查某文件是否被忽略操作：git check-ignore -v 文件名</p>\n<p>git会定位并返回是.gitignore文件的哪一行的什么规则导致该文件名被忽略</p>\n</li>\n<li><p>一个项目可以具有多个.gitignore文件：.gitignore文件具有可见域属性，具体而言，其放在哪个目录下，则该目录及其子目录都会受到该.gitignore文件的影响</p>\n</li>\n</ol>\n<h3 id=\"配置别名：\"><a href=\"#配置别名：\" class=\"headerlink\" title=\"配置别名：\"></a>配置别名：</h3><ol>\n<li><p>别名的意义：git大部分都命令都太长了，官方设置了一套命令的别名功能</p>\n</li>\n<li><p>设定别名：git config –global alias.别名 原名</p>\n<p>例如git config –global alias.st status，意思是，把git status用git st指代</p>\n</li>\n<li><p>常见别名：</p>\n<ol>\n<li><p>co是checkout的别名</p>\n</li>\n<li><p>ci是commit的别名</p>\n</li>\n<li><p>br是branch的别名</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"搭建Git服务器：\"><a href=\"#搭建Git服务器：\" class=\"headerlink\" title=\"搭建Git服务器：\"></a>搭建Git服务器：</h3><ol>\n<li><p>搭建Git服务器的作用：使用git控制版本，但不想用github等托管平台</p>\n</li>\n<li><p>搭建Git服务器的步骤：因为不需要，就不学了</p>\n</li>\n<li><p>Gitolite：git本身没有对协作者的读写权限控制功能，但git支持钩子hook，可以用其在自己搭建的git服务器上编写一系列脚本来控制协作者的读写权限到具体分支、具体目录，有些公司需要这个功能</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"使用Source-Tree\"><a href=\"#使用Source-Tree\" class=\"headerlink\" title=\"使用Source Tree\"></a>使用Source Tree</h2><h3 id=\"使用Source-Tree：\"><a href=\"#使用Source-Tree：\" class=\"headerlink\" title=\"使用Source Tree：\"></a>使用Source Tree：</h3><ol>\n<li>Source Tree是什么：Atlassian开发的免费的图形用户界面Git工具</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本教程是廖雪峰的官方网站中的Git教程的完整笔记<br> <br> <a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">https://www.liaoxuefeng.com/wiki/896043488029600</a><br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 1. 笔记会做到基本完整记录书中所有知识点不会有任何遗漏<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>总之就是，同样的项目，git同时维护了工作区版本、暂存区版本和版本库头版本三份项目，这种维护是从逻辑上维护的而非存储了全部的文件，做到这一点是从设计上只存储对每个文件的修改而非存储全量的所有文件，运行的时候，只有工作区是一份完整的项目文件，程序员对工作区内的项目文件进行新的编辑，然后提交到暂存区，此时git会计算修改然后被提交到暂存区的不是文件而是修改，最后从暂存区发射命令，一次性把暂存区中的修改正式提交到版本库。</p>\n<p>最后，所学的这些命令基本就是对工作区、暂存区、版本库的增删改查</p>\n<h2 id=\"Git简介\"><a href=\"#Git简介\" class=\"headerlink\" title=\"Git简介\"></a>Git简介</h2><h3 id=\"Git的诞生：\"><a href=\"#Git的诞生：\" class=\"headerlink\" title=\"Git的诞生：\"></a>Git的诞生：</h3><ol>\n<li><p>git的发展历史沿革：从1991年开始，手工合并11年，用BitKeeper管理3年，然后闹掰写出了git</p>\n<ol>\n<li><p>1991年：Linus创建了开源linux系统</p>\n</li>\n<li><p>2002年之前：世界各地开源贡献者手动发送给Linus，Linus用一个叫diff的文本差异比较软件手工合并代码，因为那时Linus反对当时的集中式版本控制系统例如CVS和SVN，这又是因为这种软件速度慢而且必须联网的缺点，总之就是不好用</p>\n</li>\n<li><p>2002年到2005年：由于代码实在太庞大无法继续手工合并，社区给了Linus压力，Linus找到商业版本控制系统软件开发公司BitMover公司，让Linux社区获得了免费使用BitKeeper软件的权限</p>\n</li>\n<li><p>2005年，社区里一个叫Andrew的尝试破解BitKeeper软件然后被发现，BitMover公司要求收回对Linux社区的免费使用权限→Linux不道歉，花了2周时间用C写了一个分布式版本控制系统Git</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"集中式vs分布式：\"><a href=\"#集中式vs分布式：\" class=\"headerlink\" title=\"集中式vs分布式：\"></a>集中式vs分布式：</h3><ol>\n<li><p>集中式版本控制系统：一种版本控制系统的分类。</p>\n<ol>\n<li><p>集中式版本控制系统的工作方式：版本库（软件所有版本的集合）集中存放在中央服务器，程序员编码则使用自己的电脑，每次写代码之前先从中央服务器同步下来最新的版本，然后写代码，写完了代码把本地的版本推送到中央服务器。</p>\n</li>\n<li><p>集中式版本控制系统的缺点：必须联网才能工作，在互联网上，网速慢的话提交文件很痛苦。</p>\n</li>\n</ol>\n</li>\n<li><p>分布式版本控制系统：一种版本控制系统的分类。</p>\n<ol>\n<li><p>分布式版本控制系统的工作方式：每个人的电脑上存放一个完整的版本库（软件所有版本的集合），写代码的话直接就着本地的版本库开写，多人协作的话就互相把对文件的修改推送给协作编码的所有人</p>\n</li>\n<li><p>分布式版本控制系统的的优点：相比于集中式版本控制系统会安全一些，因为所有协作者的电脑都存储了完整的版本库，任一人的电脑坏掉，只需要把别人的版本库复制过来即可，但集中式版本控制系统的中央服务器如果出问题基本这项目就告别了</p>\n</li>\n<li><p>实际中分布式版本控制系统也需要一个用于交换修改之处的中央服务器：实际中，很少让项目中协作者进行端到端互相推送这种事情，一般会设定一个中央服务器，用于交换修改，和集中式版本控制系统的区别是每次编码之前不用先从中央服务器上同步下才能开始工作，直接可以开始干活，而且哪怕没有用于交换的中央服务器，也照样可以协作，只是交换修改会不太方便</p>\n</li>\n</ol>\n</li>\n<li><p>CVS：一种开源、免费的集中式版本控制系统。最早的集中式版本控制系统，至今还有人使用，但是本身有一些问题，容易提交文件不完整，版本库莫名损坏</p>\n</li>\n<li><p>SVN：一种开源、免费的集中式版本控制系统。比CVS好在稳定得多，在集中式版本控制系统中份额最大</p>\n</li>\n<li><p>ClearCase：一种收费的集中式版本控制系统。IBM公司从Rational公司手里收购而来，缺点非常突出，安装包比windows还大，运行比蜗牛还慢，只有比较人傻钱多的那种世界500强会用</p>\n</li>\n<li><p>VSS：一种集中式版本控制系统。微软开发的集中式版本控制系统，在Visual Studio中内置，但不好用，连微软自己都不用</p>\n</li>\n<li><p>常见的分布式版本控制系统：Git、BitKeeper、Mercurial、Bazaar</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><ol>\n<li><p>名字和电子邮箱：安装Git所必须执行的最后一步。</p>\n<ol>\n<li><p>名字和电子邮箱的作用：用于分布式版本控制系统用于自报家门，但也不用担心被冒充</p>\n</li>\n<li><p>可以对不同仓库分别指定名字和电子邮箱：可以对不同仓库分别指定名字和电子邮箱</p>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h2><ol>\n<li><p>版本库：受GIt追踪的用于存储项目的仓库。</p>\n</li>\n<li><p>修改：git中的一个单位。对文件的一次增删改就算作一次修改。</p>\n</li>\n<li><p>Git究竟追踪了版本库的什么：追踪修改。这也是为什么Git比其他版本控制系统设计得优秀的原因，其追踪修改而非追踪文件</p>\n</li>\n<li><p>创建版本库的步骤：</p>\n<ol>\n<li><p>命令行cd到版本库根目录下</p>\n</li>\n<li><p>初始化版本库根目录为受Git追踪的仓库：git init</p>\n</li>\n</ol>\n<p>此时版本库根目录会多出一个叫.git的隐藏子文件夹，其用于跟踪版本库</p>\n</li>\n<li><p>Git只能追踪文本文件的修改：包括git在内的所有版本控制系统，能够被追踪修改的只有文本文件，即二进制文件的修改不可被追踪【想想也知道视频或图片文件肯定无法被字符级追踪】，而且具体而言，是以行为单位，跟踪具体的某一文件某一行号的修改</p>\n</li>\n<li><p>Word文件是二进制格式文件：值得注意的是word文件不属于文本文件，而是一种二进制文件，所以word文件不能被git追踪</p>\n</li>\n<li><p>建议使用UTF-8文本编码：标准编码，支持万国语言</p>\n</li>\n<li><p>不要使用windows自带的记事本对文本文件进行编辑：windows自带的记事本会为每个被编辑的文件开头增加一行，这行只有一个0xefbbbf字符，，造成的问题一般有1. 网页第一行显示一个问号；程序编译报错</p>\n</li>\n<li><p>把文件同步到本地版本库操作：</p>\n<ol>\n<li><p>把readme.txt文件添加入暂存区：git add 文件名1 文件名2 文件名3<br>在把文件和文件修改提交到版本库之前设定一个暂存区的目的是，你可以add很多个文件，然后下一步一次性提交到版本库，例如上述示例中就add了三个文件</p>\n<p>这一步如果成功会没有任何提示因为Unix哲学是“没有任何消息就是好消息”</p>\n</li>\n<li><p>把文件提交到本地版本库：git commit -m “wrote a readme file”</p>\n<p>其中-m属性及其后面的字符串参数，是指对本次提交的文字说明，必须写，但是有办法可以不写，但最好还是每次写一下</p>\n<p>这一步如果成功将会打印仓库变动的一份简略报告，例如3 file changed是三个文件被修改，2 insertions是插入了2行新的内容</p>\n</li>\n</ol>\n</li>\n<li><p>一次性把根目录塞到暂存区的操作：git add .</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"时光机穿梭\"><a href=\"#时光机穿梭\" class=\"headerlink\" title=\"时光机穿梭\"></a>时光机穿梭</h2><h3 id=\"时光机穿梭：\"><a href=\"#时光机穿梭：\" class=\"headerlink\" title=\"时光机穿梭：\"></a>时光机穿梭：</h3><ol>\n<li><p>查看当前工作区【git相对其它版本控制系统的一个独特概念。工作区就是版本库根目录下除了.git文件夹下的所有目录和文件】的状态操作：git status</p>\n<p>这个目录将会打印当前仓库的状态信息，包括在哪个分支里、是否存在已修改但未提交到版本库的修改（以及具体是哪些文件被修改了），示例如下：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\"></span><br><span class=\"line\">(use <span class=\"string\">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">(use <span class=\"string\">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class=\"keyword\">in</span> working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">modified: readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use <span class=\"string\">&quot;git add&quot;</span> and/or <span class=\"string\">&quot;git commit -a&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>查看某文件的修改情况：git diff 文件名</p>\n<p>会以unix通用的diff格式打印出文件的修改情况</p>\n</li>\n</ol>\n<h3 id=\"版本回退：\"><a href=\"#版本回退：\" class=\"headerlink\" title=\"版本回退：\"></a>版本回退：</h3><ol>\n<li><p>查看本地版本库提交记录：git log</p>\n<p>这个命令将会打印所有的commit的提交记录，包括每次commit的版本号（十六进制哈希编码）、每次commit的作者是谁、日期时间、commit时的的注释</p>\n</li>\n<li><p>版本号使用哈希编码的原因：对集中式版本控制系统SVN而言commit id是顺序的1、2、3编号，但分布式版本控制系统由于是分布式协作，所以必须使用哈希来给每一次提交编号，防止不同的人的不同提交却使用同样的提交号</p>\n</li>\n<li><p>版本号的相对缩写法：</p>\n<ol>\n<li><p>HEAD：HEAD表示当前的最新的版本</p>\n</li>\n<li><p>幂符号：HEAD后每加一个幂符号^表示第前一个版本，即HEAD^表示上个版本，HEAD^^表示第前两个版本</p>\n</li>\n<li><p>幂数：HEAD可以直接用幂数标注“第前多少个版本”，即HEAD^100表示第前100个版本</p>\n</li>\n</ol>\n</li>\n<li><p>回退版本库中的头版本操作：git reset –hard 版本号</p>\n<p>注意这里可以用版本号的相对缩写法也可以直接写出版本号，例如git reset –hard HEAD^，或者git reset –hard 1094a，直接写版本号写前几个十六进制数字即可，git会自动搜索</p>\n</li>\n<li><p>打印所有历史git命令历史记录：git reflog</p>\n<p>这个命令会记录所有的记录</p>\n</li>\n<li><p>版本回退如果后悔了：用之前的版本号reset命令回去。如果关掉了终端导致丢失了之前的版本号，可以用git reflog命令查看一下记录，里面会有曾经从哪个先进版本号回退到哪个过去版本号的记录</p>\n</li>\n<li><p>版本回退的速度：版本回退速度很快，因为原理上只是把指向当前版本的HEAD指针往过去的版本指回去即可</p>\n</li>\n</ol>\n<h3 id=\"工作区和暂存区：\"><a href=\"#工作区和暂存区：\" class=\"headerlink\" title=\"工作区和暂存区：\"></a>工作区和暂存区：</h3><ol>\n<li><p>工作区：git相对其它版本控制系统的一个独特概念。工作区就是版本库根目录下除了.git文件夹下的所有目录和文件</p>\n</li>\n<li><p>版本库：git中的一个文件夹的名字。隐藏文件夹.git就是版本库，版本库就是git下一个文件夹的名字。版本库中存储的主要内容是1. 暂存区stage；2. master分支；3. 指向master分支的指针HEAD</p>\n</li>\n<li><p>暂存区&#x2F;stage：版本库中的主要内容之一，又名index。工作区中项目的修改被add命令会先添加到暂存区，暂存区的内容会在commit命令后被提交到master分支中</p>\n</li>\n</ol>\n<h3 id=\"管理修改：\"><a href=\"#管理修改：\" class=\"headerlink\" title=\"管理修改：\"></a>管理修改：</h3><h3 id=\"撤销修改：\"><a href=\"#撤销修改：\" class=\"headerlink\" title=\"撤销修改：\"></a>撤销修改：</h3><ol>\n<li><p>回退工作区中对文件的修改操作：git checkout – 文件名</p>\n<p>把工作区中已被编辑修改但还没add命令到暂存区中的指定文件，回退到暂存区中的版本，如果暂存区中没有这个文件的新版本就回退到上一次commit的文件版本</p>\n<p>这个命令可以用于误删工作区中的文件，从版本库的头版本中恢复</p>\n</li>\n<li><p>回退暂存区中对文件的修改操作：git reset HEAD readme.txt</p>\n<p>这是也是和“回退版本库中的头版本”操作一样使用了reset命令【“回退版本库中的头版本”操作的命令是git reset –hard 版本号】，即这个命令既可以用于版本库也可以用于暂存区。对暂存区使用reset命令后，暂存区中对文件的修改并不会丢失，而是向后回退到工作区文件</p>\n</li>\n</ol>\n<h3 id=\"删除文件：\"><a href=\"#删除文件：\" class=\"headerlink\" title=\"删除文件：\"></a>删除文件：</h3><ol>\n<li>删除版本库中头版本中的文件：git rm 文件名</li>\n</ol>\n<hr>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><h3 id=\"远程仓库：\"><a href=\"#远程仓库：\" class=\"headerlink\" title=\"远程仓库：\"></a>远程仓库：</h3><ol>\n<li><p>在github上设置SSH相关：本地git与github之间一般使用SSH协议进行数据传输，所以需要在github上设置一下你的个人计算机的非对称加密公钥以便建立SSH连接</p>\n<ol>\n<li><p>如果没有id_rsa和id_rsa.pub文件：找找你的电脑里的本用户目录的.ssh文件夹，一般这个文件夹下会有两个文件id_rsa和id_rsa.pub，这一个是非对称加密私钥一个是非对称加密公钥，如果没有的话创建一对就行，命令是在.ssh目录下运行ssh-keygen -t rsa -C “邮箱字符串”</p>\n</li>\n<li><p>在github上添加SSH key：登录github，打开account settings里的SSH Keys，把你的id_rsa.pub文件里的字符串全部粘贴进去就行，标题就是给这串公钥起个名，然后保存</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"添加远程库：\"><a href=\"#添加远程库：\" class=\"headerlink\" title=\"添加远程库：\"></a>添加远程库：</h3><ol>\n<li><p>远程库原理：让你本地电脑与github公司的服务器电脑结成分布式端到端连接，不仅可以让github服务器上的版本作为项目的备份，还能方便他人也通过github服务器结成分布式端到端连接，进行项目协作，其它基于git的代码托管平台同理</p>\n</li>\n<li><p>与github上的项目仓库远程库进行远程分布式端到端连接操作：git remote add 本地给远程仓库起的名 <a href=\"mailto:&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#x6d;\">&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#x6d;</a>:github账号username&#x2F;github仓库名.git</p>\n<p>例如git remote add origin <a href=\"mailto:&#x67;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;\">&#x67;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>:michaelliao&#x2F;learngit.git，就是把本地版本库与github账号michaelliao的learngit仓库进行了远程连接，这个远程仓库在本地设定为名字origin</p>\n</li>\n<li><p>git使用ssh连接远程仓库：git连接本地版本库与远程仓库的原理是使用ssh</p>\n</li>\n<li><p>把本地版本库上的头版本推送到远程库操作：git push -u origin master</p>\n<p>把本地的master分支头版本推送到起名为origin的远程仓库。因为git使用ssh连接远程仓库的缘故，如果第一次使用这个命令的时候有可能会弹出ssh警告，询问是否进行连接，这本质上是询问是否进行ssh连接，输入yes或者no即可，输入yes就会把github给的非对称加密公钥添加到本地信任列表</p>\n<p>-u参数的功能是把本地的master分支与远程的master分支进行关联，这种关联在第一次使用push命令的时候需要指定，在以后则可以进行省略，即第一次运行的时候是git push -u origin master，以后只需要git push origin master</p>\n</li>\n<li><p>查看所有的分布式端到端连接到的远程库操作：git remote -v</p>\n</li>\n<li><p>删除本地已完成分布式端到端连接的某远程库的连接操作：git remote rm 远程库名</p>\n<p>例如git remote rm origin就是把本地版本库对远程库origin的连接删掉，即解除本地版本库对远程库的绑定关系</p>\n</li>\n</ol>\n<h3 id=\"从远程库克隆：\"><a href=\"#从远程库克隆：\" class=\"headerlink\" title=\"从远程库克隆：\"></a>从远程库克隆：</h3><ol>\n<li><p>使用ssh协议把远程库里的头版本克隆到本地工作区操作：git clone <a href=\"mailto:&#x67;&#105;&#116;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;\">&#x67;&#105;&#116;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;</a>:github账号username&#x2F;github仓库名.git</p>\n<p>例如，git clone <a href=\"mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#109;\">&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#109;</a>:michaelliao&#x2F;gitskills.git，就是把github账号michaelliao的learngit仓库里的头版本克隆到本地工作区</p>\n<p>上述的git@格式的是进行ssh连接，github支持多种协议例如https，但https坏处是速度慢，而且每次推送必须输入一次密钥，当然好处是有些公司用服务器是禁止ssh端口的，只能使用ssh之外的协议</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><h3 id=\"分支管理：\"><a href=\"#分支管理：\" class=\"headerlink\" title=\"分支管理：\"></a>分支管理：</h3><ol>\n<li>SVN系统的分支管理功能的缺点：创建和切换分支巨慢让人无法忍受</li>\n</ol>\n<h3 id=\"创建与合并分支：\"><a href=\"#创建与合并分支：\" class=\"headerlink\" title=\"创建与合并分支：\"></a>创建与合并分支：</h3><ol>\n<li><p>HEAD指针指向的版本是什么：指向当前分支的头版本指针的指针</p>\n</li>\n<li><p>分支是什么：git中每次commit都会构造一个新的项目头版本，随着版本不断更新，头版本和旧版本穿成一条链，这条链就叫分支，每个分支附带一个指向该分支头版本的指针</p>\n</li>\n<li><p>创建一个新分支我们在创建什么：新分支创始之初，是创建了一个新的指向头版本的指针，你可以让HEAD指针指向这个新指针，然后每次commit的新版本会更新在这个新指针上，随着你在新的分支头版本指针上不断commit添加新版本，这个新的分支就跟着分支头版本指针越走越长</p>\n</li>\n<li><p>创建新分支操作：git branch 新分支名</p>\n</li>\n<li><p>切换到某分支操作：git checkout 分支名</p>\n</li>\n<li><p>创建新分支加切换到新分支融合快捷操作：git checkout -b 新分支名</p>\n<p>-b参数就是这个创建并切换的操作</p>\n</li>\n<li><p>打印所有分支操作：git branch</p>\n<p>这个命令会列出所有分支，并且在当前commit欲更新版本的分支的名字之前打出星号*</p>\n</li>\n<li><p>把指定分支名的头指针指向当前分支的头指针（分支合并）操作：git merge 分支名</p>\n<p>这个操作会重定向指定的分支头指针，将其指向当前分支头指针，所有的修改会被融合</p>\n</li>\n<li><p>删除分支：git branch -d 分支名</p>\n<p>之后还有个强制删除分支的命令</p>\n</li>\n<li><p>分支的用法：无论是在github上协作还是自己写项目，我们先自己弄一个分支，并且在这个分支上更新版本，最后去申请分支合并（即申请把github服务器上的项目仓库的HEAD指针指向自己的分支头版本指针）或自己进行分支合并，然后把为了完成任务创建的新分支删掉，这样会相比直接在master分支上工作安全。</p>\n</li>\n<li><p>switch命令：新版git觉得切换到某分支操作用checkout命令（切换到某分支操作：git checkout 分支名）以及回退工作区中对文件的修改操作也用checkout命令（回退工作区中对文件的修改操作：git checkout – 文件名）都共用checkout命令是令人迷惑的，因此新版本把切换分支单独开了个命令叫switch：</p>\n</li>\n<li><p>switch切换到某分支操作：git switch 分支名</p>\n</li>\n<li><p>switch创建新分支加切换到新分支融合快捷操作：git switch -c 新分支名</p>\n</li>\n</ol>\n<h3 id=\"解决冲突：\"><a href=\"#解决冲突：\" class=\"headerlink\" title=\"解决冲突：\"></a>解决冲突：</h3><ol>\n<li><p>冲突：两个分支如果都修改同一个文件后，对这两个分支进行分支合并操作，产生的一种冲突现象。具体而言，现在有两个分支，我们知道git跟踪的是修改，而且跟踪的是对行号的文本修改，那么如果两个不同分支都对同一个文件的相同行号进行了修改，然后分别对这两个分支进行了add和commit，正常而言两个分支的头指针都会往前延伸一个新版本，此时如果你尝试对两个分支进行分支合并（把指定分支名的头指针指向当前分支的头指针（分支合并）操作：git merge 分支名。这个操作会重定向指定的分支头指针，将其指向当前分支头指针），由于两个分支的这个相同文件的相同行号的修改内容不同，就会产生分支无法合并的冲突。</p>\n<p>如下是一个典型的冲突，有两个分支，feature1和master，都分别对同一文件进行不同修改，提交成了两个不同的版本，此时HEAD指针指向master，如果尝试合并feature1和master，就会产生冲突</p>\n<p><img src=\"https://cdnjson.com/images/2024/04/15/Untitled56bba0107becb5d2.png\" alt=\"Untitled\"></p>\n</li>\n<li><p>如何解决冲突：尝试分支合并如果出现冲突，git会提示无法合并，并给出是哪个文件的什么内容出现了冲突，此时很简单手动处理即可，即把其中一个分支的冲突文件的冲突行改成和另一个分支一样就可以正常进行分支合并操作了</p>\n</li>\n<li><p>查看分支合并图操作：git log –graph</p>\n<p>使用这个命令将会看见分支合并的字符示意图</p>\n</li>\n</ol>\n<h3 id=\"分支管理策略：\"><a href=\"#分支管理策略：\" class=\"headerlink\" title=\"分支管理策略：\"></a>分支管理策略：</h3><ol>\n<li><p>fast forward：git的默认分支合并模式，又快速合并模式。快速的同时，分支合并后，会丢失其中一个分支的分支信息，即忘掉自己是从之前哪个分支合并而来的</p>\n</li>\n<li><p>强制禁用fast forward的分支合并操作：git merge –no-ff -m “merge with no-ff” 分支名</p>\n<p>其中–no-ff参数是指强制禁用fast forward。强制禁用fast forward进行分支合并会在合并的时候生成并commit一个新的版本，这样就可从分支历史上可以看出分支信息而不会丢失掉被合并的分支信息，也因为创建了一个新的版本并commit，所以需要加入-m参数并写入新版本的commit注释</p>\n</li>\n<li><p>分支管理策略：实践中，经常被遵循的几个基本的分支管理策略</p>\n<ol>\n<li><p>master：master分支仅用于发布新版本，即不用于写新的代码</p>\n</li>\n<li><p>dev：写新的代码的干活分支你就命名为dev就比较好，每次写完就合并丢弃掉</p>\n</li>\n<li><p>多人协作：如果多人协作写新的代码，那么你们都拥有自己的干活分支，然后集体往dev分支上合并自己的新代码，最后需要发布新版本的时候统一一次性把dev合并到master</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Bug分支：\"><a href=\"#Bug分支：\" class=\"headerlink\" title=\"Bug分支：\"></a>Bug分支：</h3><ol>\n<li><p>项目有bug怎么办：开一个新的临时分支，然后在临时分支上编写新的代码修复bug，完成之后合并分支，把临时分支删掉</p>\n</li>\n<li><p>如果正在开发一个新的feature到一半还不想去正式add并commit本次的半成品代码，这时候需要紧急修复一个恶性bug：使用gut的stash（贮藏）功能</p>\n</li>\n<li><p>stash：github提供的功能之一，功能是存档并回撤当前的工作区+暂存区修改，执行之后工作区将会回到上一个commit版本</p>\n<p>这个操作的意义其实是用于一个分支的工作还没做完时，不想去正式add和commit半成品代码，却由于另一个紧急任务需要开辟新的分支，那就先把当前分支给贮藏，然后开新分支完成紧急任务并合并掉，再通过恢复贮藏操作，恢复原先还没完成的半成品代码，注意，如果紧急任务是修复bug，那么你恢复贮藏的时候会回退到有bug的版本，因此可以配合执行一个“复制特定commit的所有修改到当前分支”操作，以把你用于修复bug的代码复制到你恢复贮藏后的还未完成工作的半成品版本当中</p>\n</li>\n<li><p>贮藏操作：git stash</p>\n</li>\n<li><p>打印所有贮藏的列表操作：git stash list</p>\n<p>这个命令将会打印出所有的贮藏的列表，贮藏名是stash@{0}格式的</p>\n</li>\n<li><p>单纯恢复某指定贮藏操作：git stash apply 贮藏名</p>\n<p>这个命令不会删掉贮藏本身</p>\n<p>如果你只有一个贮藏，那么不用写贮藏名也可以，git知道你只有一个可恢复的贮藏</p>\n</li>\n<li><p>删除某指定贮藏操作：git stash drop</p>\n</li>\n<li><p>恢复并删除某指定贮藏操作：git stash pop</p>\n</li>\n<li><p>复制特定commit的所有修改到当前分支操作：cherry-pick</p>\n<p>这个操作本质是一次自动commit，因此当前分支的头版本会commit并前进一个含有被复制代码的新版本</p>\n</li>\n</ol>\n<h3 id=\"Feature分支：\"><a href=\"#Feature分支：\" class=\"headerlink\" title=\"Feature分支：\"></a>Feature分支：</h3><ol>\n<li><p>强制删除某指定分支操作：git branch -D 分支名</p>\n<p>之所以会有强制删除一说，是因为如果某分支的修改从未被合并到任何其它分支就面临删除，此时如果执行删除会彻底丢失掉在这个分支上的所有工作，git不会允许你直接删除</p>\n<p>不过听说根本就不存在彻底丢弃任何工作的场景，因为以防万一</p>\n</li>\n</ol>\n<h3 id=\"多人协作：\"><a href=\"#多人协作：\" class=\"headerlink\" title=\"多人协作：\"></a>多人协作：</h3><ol>\n<li><p>查看远程仓库的信息操作：git remote</p>\n</li>\n<li><p>查看所有远程仓库的详细信息操作：git remote -v</p>\n<p>注意这个命令会在行末的括号里分别显示具有可以抓取和推送权限的远程仓库，如下图</p>\n<p><img src=\"https://cdnjson.com/images/2024/04/15/Untitled-18f48d74ca5621b64.png\" alt=\"Untitled\"></p>\n</li>\n<li><p>推送本地指定分支的头版本到指定远程仓库：git push 指定远程仓库名 指定分支名</p>\n<p>本地的默认远程仓库名称是origin</p>\n</li>\n<li><p>多人协作下的远程仓库推送冲突及解决办法：如果你和协作者都对同一文件进行了修改工作，对方先把对方的修改工作推送到了远程仓库的dev分支，此时你再尝试把自己对这个文件的修改工作推送到远程仓库的dev分支将会失败，解决办法先把自己本地的dev分支与远程仓库的dev分支进行同步，即把协作者的最新修改工作下载到你的本地dev分支，再本地将你的修改工作分支与你本地的dev分支合并，此时推送你本地的dev分支将不再冲突</p>\n</li>\n</ol>\n<h3 id=\"Rebase：\"><a href=\"#Rebase：\" class=\"headerlink\" title=\"Rebase：\"></a>Rebase：</h3><ol>\n<li><p>rebase的应用场景：基于之前的版本开发了一个新版本尚未提交上去时，之前的版本已经前进了两个版本，此时我们想提交我们开发的版本，但出于某种原因，我们需要基于最新的头版本提交我们开发的新的版本，而不是基于之前的版本（比如我们需要依赖新版本的几个特性），那么可以先从远程仓库把最新版本拉下来，然后执行rebase命令，这会重新指定基版本，然后再提交就行</p>\n</li>\n<li><p>rebase操作：git rebase</p>\n</li>\n<li><p>rebase的实质原理：实际上是把你基于之前版本的那些修改数据给丢弃掉了，但在此之前，会先自动创建一些基于较新版本的内容一样的新的修改</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"标签管理\"><a href=\"#标签管理\" class=\"headerlink\" title=\"标签管理\"></a>标签管理</h2><h3 id=\"标签管理：\"><a href=\"#标签管理：\" class=\"headerlink\" title=\"标签管理：\"></a>标签管理：</h3><ol>\n<li>标签：commit的时候一同被提交的一个类似备注的数据结构。我们有了备注还要标签，是因为这个标签的作用是作为commit id的别名，一般是用来写版本号的，比如v1.2之类的</li>\n</ol>\n<h3 id=\"创建标签：\"><a href=\"#创建标签：\" class=\"headerlink\" title=\"创建标签：\"></a>创建标签：</h3><ol>\n<li><p>给当前分支的最新版本打标签操作：git tag 标签名</p>\n<p>这个标签名一般就是v1.0之类的</p>\n</li>\n<li><p>给当前分支的指定版本打标签操作：git tag 标签名 版本号</p>\n<p>此处版本号也可以使用版本号的相对缩写法</p>\n</li>\n<li><p>查看所有标签列表操作：git tag</p>\n<p>注意这里的列表是按字母顺序排列，而非时间顺序</p>\n</li>\n<li><p>给当前分支的指定版本打标签顺便写评论操作：git tag -a 标签名 -m “评论字符串” 版本号</p>\n</li>\n<li><p>查看指定标签的详细信息操作：git show 标签名</p>\n</li>\n</ol>\n<h3 id=\"操作标签：\"><a href=\"#操作标签：\" class=\"headerlink\" title=\"操作标签：\"></a>操作标签：</h3><ol>\n<li><p>删除标签操作：git tag -d 标签名</p>\n</li>\n<li><p>推送指定标签到远程仓库操作：git push 远程仓库名 标签名</p>\n</li>\n<li><p>推送所有标签到远程仓库操作：git push origin –tags</p>\n</li>\n<li><p>删除远程仓库的指定标签：先删除本地标签，然后git push origin :refs&#x2F;tags&#x2F;标签名</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"使用GitHub\"><a href=\"#使用GitHub\" class=\"headerlink\" title=\"使用GitHub\"></a>使用GitHub</h2><h3 id=\"使用GitHub：\"><a href=\"#使用GitHub：\" class=\"headerlink\" title=\"使用GitHub：\"></a>使用GitHub：</h3><ol>\n<li>如何参与他人的开源社区项目：先把其他的开源项目的仓库fork一下到自己的账户名下，这样自己名下就有一个同样的该远程仓库了，然后把本地个人计算机与自己的账户名下的该远程仓库进行连接和clone，接下来对准自己的账户名下的该远程仓库进行工作即可，如果觉得完成了工作就发起一个pull request，如果对方接受，就会把你的工作合并到官方</li>\n</ol>\n<hr>\n<h2 id=\"使用Gitee\"><a href=\"#使用Gitee\" class=\"headerlink\" title=\"使用Gitee\"></a>使用Gitee</h2><hr>\n<h2 id=\"自定义Git\"><a href=\"#自定义Git\" class=\"headerlink\" title=\"自定义Git\"></a>自定义Git</h2><h3 id=\"自定义Git：\"><a href=\"#自定义Git：\" class=\"headerlink\" title=\"自定义Git：\"></a>自定义Git：</h3><ol>\n<li><p>自定义Git是什么：git作为一个软件，有很多可配置的本地个性化可配置项</p>\n</li>\n<li><p>git本身的配置文件在哪：</p>\n<ol>\n<li><p>对每个项目，其git的配置文件在该项目根目录，即.git&#x2F;config</p>\n</li>\n<li><p>对当前用户，即所有项目，其git配置文件在用户主目录下，即~&#x2F;.gitconfig</p>\n</li>\n</ol>\n</li>\n<li><p>让Git的终端输出显示颜色：git config –global color.ui true</p>\n<p>其中–global参数是指对当前用户所有仓库作用，如果没有–global参数则默认只对当前仓库生效</p>\n</li>\n</ol>\n<h3 id=\"忽略特殊文件：\"><a href=\"#忽略特殊文件：\" class=\"headerlink\" title=\"忽略特殊文件：\"></a>忽略特殊文件：</h3><ol>\n<li><p>忽略特殊文件的作用：有些比如密码文件之类的必须放到工作区，但肯定不能提交到新版本中，因此可以手动指定，让git对某些工作区文件进行忽略</p>\n</li>\n<li><p>如何忽略特殊文件：在工作区根目录下手动创建一个叫.gitignore的文件，把所有要忽略的文件名写进去即可，只要写名字不需要写目录，而且可以使用通配符例如星号*，可以对某指定规则开头使用取反符号!，注释的语法是井号#。</p>\n</li>\n<li><p>.gitignore文件本身不能忽略：.gitignore文件本身不能忽略，即其本身应该被git管理，因为所有的协作者都应该使用同样的.gitignore文件</p>\n</li>\n<li><p>哪些文件需要被忽略：</p>\n<ol>\n<li><p>操作系统自动生成的二级附带文件：缩略图等</p>\n</li>\n<li><p>中间文件：如果某个文件会自动生成一些二级文件，那么就没有必要把这些二级文件放进版本库中。常见编译过程产生的文件，例如java编译会产生.class二级文件</p>\n</li>\n<li><p>敏感信息：带有敏感信息的文件，例如口令、带密码的配置文件</p>\n</li>\n</ol>\n</li>\n<li><p>git官方的忽略文件：市面上有很多常见项目比如maven，archlinux什么的，项目又复杂，需要忽略的文件已经被github官方整理好成现成的.gitignore文件在<a href=\"https://github.com/github/gitignore%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E7%BB%84%E5%90%88%E5%8D%B3%E5%8F%AF\">https://github.com/github/gitignore，只需要组合即可</a></p>\n</li>\n<li><p>windows系统无法在资源管理器下新建一个名字叫.gitignore的文件：未知原因，反正就是提醒让你必须输入文件名，必须通过文本编辑器等其它软件手动通过保存或者另存为之类的方式创建，总之windows自带的资源管理器就是不行</p>\n</li>\n<li><p>强制add某被忽略文件操作：git add -f 文件名</p>\n<p>使用该命令将会把被忽略的文件add进版本中</p>\n</li>\n<li><p>检查某文件是否被忽略操作：git check-ignore -v 文件名</p>\n<p>git会定位并返回是.gitignore文件的哪一行的什么规则导致该文件名被忽略</p>\n</li>\n<li><p>一个项目可以具有多个.gitignore文件：.gitignore文件具有可见域属性，具体而言，其放在哪个目录下，则该目录及其子目录都会受到该.gitignore文件的影响</p>\n</li>\n</ol>\n<h3 id=\"配置别名：\"><a href=\"#配置别名：\" class=\"headerlink\" title=\"配置别名：\"></a>配置别名：</h3><ol>\n<li><p>别名的意义：git大部分都命令都太长了，官方设置了一套命令的别名功能</p>\n</li>\n<li><p>设定别名：git config –global alias.别名 原名</p>\n<p>例如git config –global alias.st status，意思是，把git status用git st指代</p>\n</li>\n<li><p>常见别名：</p>\n<ol>\n<li><p>co是checkout的别名</p>\n</li>\n<li><p>ci是commit的别名</p>\n</li>\n<li><p>br是branch的别名</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"搭建Git服务器：\"><a href=\"#搭建Git服务器：\" class=\"headerlink\" title=\"搭建Git服务器：\"></a>搭建Git服务器：</h3><ol>\n<li><p>搭建Git服务器的作用：使用git控制版本，但不想用github等托管平台</p>\n</li>\n<li><p>搭建Git服务器的步骤：因为不需要，就不学了</p>\n</li>\n<li><p>Gitolite：git本身没有对协作者的读写权限控制功能，但git支持钩子hook，可以用其在自己搭建的git服务器上编写一系列脚本来控制协作者的读写权限到具体分支、具体目录，有些公司需要这个功能</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"使用Source-Tree\"><a href=\"#使用Source-Tree\" class=\"headerlink\" title=\"使用Source Tree\"></a>使用Source Tree</h2><h3 id=\"使用Source-Tree：\"><a href=\"#使用Source-Tree：\" class=\"headerlink\" title=\"使用Source Tree：\"></a>使用Source Tree：</h3><ol>\n<li>Source Tree是什么：Atlassian开发的免费的图形用户界面Git工具</li>\n</ol>\n"},{"title":"河西走廊","date":"2023-04-15T19:47:46.000Z","auto_excerpt":"true","_content":"\n  ## 前言和概述\n\n 本文是央视纪录片《河西走廊》的笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n评：\n\n这也是一部早期笔记，好在它的呈现方式是脉络式的，对汉朝的这些事儿你可以看见脉络，而不是一个点，一个面，让人明显感觉片面。不幸的是当年居然没有时间看完，而现在——现在就更没有时间啦（很多更重要的事）。\n\n至于被人称赞的制作精美，我只能说那都是榨菜好吗？让我们吃主食。\n\n\n\n---\n\n**第一集 使者**\n\n月氏人（读月支，而且历史上真的叫月支）和匈奴有仇，所以找汉武帝帮忙，汉朝只知道河西走廊通向西域，所以找人去河西走廊，但是河西走廊控制在匈奴王朝手里，而且月氏不知道在哪，27岁山西城固人张骞，举孝廉当了宫廷侍卫，报名去找月氏建功立业，汉武帝刘彻给他亲自挑了随从，和一个匈奴导游。\n\n张骞刚开始渡过黄河来到扁都口，扁都口是青海进河西走廊的位置，出扁都口来到河西走廊的戈壁，已去长安一千多公里，而在河西走廊被俘，押送到了匈奴王庭（今呼和浩特）。\n\n匈奴因为想套汉朝情报，还想策反张骞，所以没杀，而张骞貌似归顺，还颇有人格魅力，因此匈奴放松了管制，而张骞趁机了解匈奴人的生活与备战，在匈奴，马是军民两用，人不带盾而穿甲，最后，单于撮合了张骞娶匈奴媳妇。\n\n祁连在匈奴语言是天的意思，是匈奴神山。\n\n汉武帝失去耐心，已经积极备战五年，召开庭议攻打匈奴，计划亲征30万大军用和亲套路匈奴，也就是马邑之谋，最后情报泄露没有成功。几年后汉朝四路大军反抗匈奴，三路失败了，卫青这一路却杀到了匈奴腹地，史又称龙城之战。\n\n张骞来匈奴第九年，有一天和堂邑父以外出打猎之名成功逃跑，接着找月氏。这九年来月氏人被匈奴狂揍分散成两股，大部分去了中亚叫大月氏，少数和羌人在一起生活，叫小月氏。张骞穿越塔克拉玛干沙漠，翻越帕米尔高原，找到大月氏所在，大月氏王倾佩张骞，但已不感兴趣打仗，张骞一年多没得到王的回答，于是回家。\n\n回家没走河西走廊，绕路走了青海的羌人地盘，沿途帕米尔高原，昆仑山，莎车，和田，只可惜羌人已对匈奴服软，所以张骞又被俘虏，抓回老婆边，但张骞又抓住单于病死，和老婆成功一起逃回去长安。\n\n13年后终于回家，此时公元前126年，司马迁称赞张骞有凿空之功，而张骞被封太中大夫，老婆却仅一年后病故。\n\n三年后，卫青将军率六路大军两次打匈奴，让张骞校尉军衔当向导行军，因为张骞熟悉大漠里的水草之地，战后张骞被封博望侯。\n\n此时罗马帝国崛起，罗马东征与汉朝西征，在历史上同时开始。\n\n***\n\n**第二集 通道**\n\n霍去病是刘彻的姐姐女仆的儿子，后来姨母卫子夫当了皇后，霍去病就成了皇室成员，而舅舅是卫青。\n\n汉朝和匈奴都在备战，霍去病经常和舅舅卫青在羽林营训练，这让汉武帝熟悉并喜欢上了霍去病。\n\n卫青先通过打仗解除了对长安的威胁。此时单于把河西走廊东封给了休屠（除）王，西封给了浑邪（爷）王。\n\n霍去病率领八百骑兵孤军深入立下人生第一个奇功被封冠军候，而轻骑兵快速突骑这种战术在和匈奴的对仗中慢慢磨练成熟。\n\n汉武帝为河西走廊发起河西战役，起用霍去病，乌鞘岭是河西走廊东起点，公元前121年春，霍去病带一万轻骑兵走过乌鞘岭，六天扫荡匈奴五个部落，深入匈奴五百多公里，休屠和浑邪王逃跑，一直打到敦煌才走。回汉朝后霍去病和汉武帝制定了新的歼灭匈奴主力计划，让公孙敖东面佯攻，霍去病绕后西攻，张骞李广两路切断匈奴援军。\n\n战争开始，匈奴单于开始南下打汉朝围魏救赵，而公孙敖迷失了方向没有会师霍去病令霍去病变成孤军，霍去病反而决定铤而走险单挑二王，最后匈奴部队遭到毁灭性打击。\n\n霍去病战后接手了焉支山（祁连山一条山脉，水草丰富，匈奴人用来养马），为汉朝养马，却不要房子，说匈奴未灭，何以家为。但李广和张骞两路部队陷入重围斗争失败，这让张骞被免博望侯削为平民。\n\n匈奴战败想杀掉二王，二王于是心生投降汉朝，此时二王却还有几万军队，汉武帝疑似有诈，令霍去病带兵在河西走廊受降，中途二王果然反悔，浑邪王杀了休屠王并收编部队，但其本身也举棋不定，最后浑邪王被霍去病的手段折服，安心投降，此时霍去病刚刚19岁，此后霍去病又征战匈奴，杀光了匈奴主力，22岁一直杀到匈奴圣山狼居胥山，然后封狼居胥，这场河西之战打开了汉朝对西方的视野。\n\n汉武帝战后召张骞任中郎将，第二次出使西域与各国做茶叶瓷器等生意。张骞来到乌孙国结盟，派人访问天山附近的国家建立外交，西域国家的特产和使者也都来汉朝，霍去病却23岁突然去世，而张骞第二次去西域结束后被封大行令，一年后也死了。\n\n汉武帝给河西走廊设立四个郡，两个军事要塞（玉门关和阳关），后又打下了河西走廊另一头的中亚地盘，此时，汉朝和罗马中间只有安息和贵霜。\n\n为了防御北方游牧民族，固守河西走廊，汉朝修建了一段河西走廊北向的长城（这段汉长城是用戈壁上的草修的）。\n\n安息国当时在今伊朗，汉朝使者走到这里献出丝绸，在海运兴起之前，这里都是东西文明沟通的唯一通道，历史学家称丝绸之路。\n\n***","source":"_posts/影音/河西走廊.md","raw":"---\ntitle: 河西走廊\ndate: 2023-04-16 03:47:46\ntags: \ncategories:\n  - - 影音\nauto_excerpt: \"true\"\n---\n\n  ## 前言和概述\n\n 本文是央视纪录片《河西走廊》的笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n评：\n\n这也是一部早期笔记，好在它的呈现方式是脉络式的，对汉朝的这些事儿你可以看见脉络，而不是一个点，一个面，让人明显感觉片面。不幸的是当年居然没有时间看完，而现在——现在就更没有时间啦（很多更重要的事）。\n\n至于被人称赞的制作精美，我只能说那都是榨菜好吗？让我们吃主食。\n\n\n\n---\n\n**第一集 使者**\n\n月氏人（读月支，而且历史上真的叫月支）和匈奴有仇，所以找汉武帝帮忙，汉朝只知道河西走廊通向西域，所以找人去河西走廊，但是河西走廊控制在匈奴王朝手里，而且月氏不知道在哪，27岁山西城固人张骞，举孝廉当了宫廷侍卫，报名去找月氏建功立业，汉武帝刘彻给他亲自挑了随从，和一个匈奴导游。\n\n张骞刚开始渡过黄河来到扁都口，扁都口是青海进河西走廊的位置，出扁都口来到河西走廊的戈壁，已去长安一千多公里，而在河西走廊被俘，押送到了匈奴王庭（今呼和浩特）。\n\n匈奴因为想套汉朝情报，还想策反张骞，所以没杀，而张骞貌似归顺，还颇有人格魅力，因此匈奴放松了管制，而张骞趁机了解匈奴人的生活与备战，在匈奴，马是军民两用，人不带盾而穿甲，最后，单于撮合了张骞娶匈奴媳妇。\n\n祁连在匈奴语言是天的意思，是匈奴神山。\n\n汉武帝失去耐心，已经积极备战五年，召开庭议攻打匈奴，计划亲征30万大军用和亲套路匈奴，也就是马邑之谋，最后情报泄露没有成功。几年后汉朝四路大军反抗匈奴，三路失败了，卫青这一路却杀到了匈奴腹地，史又称龙城之战。\n\n张骞来匈奴第九年，有一天和堂邑父以外出打猎之名成功逃跑，接着找月氏。这九年来月氏人被匈奴狂揍分散成两股，大部分去了中亚叫大月氏，少数和羌人在一起生活，叫小月氏。张骞穿越塔克拉玛干沙漠，翻越帕米尔高原，找到大月氏所在，大月氏王倾佩张骞，但已不感兴趣打仗，张骞一年多没得到王的回答，于是回家。\n\n回家没走河西走廊，绕路走了青海的羌人地盘，沿途帕米尔高原，昆仑山，莎车，和田，只可惜羌人已对匈奴服软，所以张骞又被俘虏，抓回老婆边，但张骞又抓住单于病死，和老婆成功一起逃回去长安。\n\n13年后终于回家，此时公元前126年，司马迁称赞张骞有凿空之功，而张骞被封太中大夫，老婆却仅一年后病故。\n\n三年后，卫青将军率六路大军两次打匈奴，让张骞校尉军衔当向导行军，因为张骞熟悉大漠里的水草之地，战后张骞被封博望侯。\n\n此时罗马帝国崛起，罗马东征与汉朝西征，在历史上同时开始。\n\n***\n\n**第二集 通道**\n\n霍去病是刘彻的姐姐女仆的儿子，后来姨母卫子夫当了皇后，霍去病就成了皇室成员，而舅舅是卫青。\n\n汉朝和匈奴都在备战，霍去病经常和舅舅卫青在羽林营训练，这让汉武帝熟悉并喜欢上了霍去病。\n\n卫青先通过打仗解除了对长安的威胁。此时单于把河西走廊东封给了休屠（除）王，西封给了浑邪（爷）王。\n\n霍去病率领八百骑兵孤军深入立下人生第一个奇功被封冠军候，而轻骑兵快速突骑这种战术在和匈奴的对仗中慢慢磨练成熟。\n\n汉武帝为河西走廊发起河西战役，起用霍去病，乌鞘岭是河西走廊东起点，公元前121年春，霍去病带一万轻骑兵走过乌鞘岭，六天扫荡匈奴五个部落，深入匈奴五百多公里，休屠和浑邪王逃跑，一直打到敦煌才走。回汉朝后霍去病和汉武帝制定了新的歼灭匈奴主力计划，让公孙敖东面佯攻，霍去病绕后西攻，张骞李广两路切断匈奴援军。\n\n战争开始，匈奴单于开始南下打汉朝围魏救赵，而公孙敖迷失了方向没有会师霍去病令霍去病变成孤军，霍去病反而决定铤而走险单挑二王，最后匈奴部队遭到毁灭性打击。\n\n霍去病战后接手了焉支山（祁连山一条山脉，水草丰富，匈奴人用来养马），为汉朝养马，却不要房子，说匈奴未灭，何以家为。但李广和张骞两路部队陷入重围斗争失败，这让张骞被免博望侯削为平民。\n\n匈奴战败想杀掉二王，二王于是心生投降汉朝，此时二王却还有几万军队，汉武帝疑似有诈，令霍去病带兵在河西走廊受降，中途二王果然反悔，浑邪王杀了休屠王并收编部队，但其本身也举棋不定，最后浑邪王被霍去病的手段折服，安心投降，此时霍去病刚刚19岁，此后霍去病又征战匈奴，杀光了匈奴主力，22岁一直杀到匈奴圣山狼居胥山，然后封狼居胥，这场河西之战打开了汉朝对西方的视野。\n\n汉武帝战后召张骞任中郎将，第二次出使西域与各国做茶叶瓷器等生意。张骞来到乌孙国结盟，派人访问天山附近的国家建立外交，西域国家的特产和使者也都来汉朝，霍去病却23岁突然去世，而张骞第二次去西域结束后被封大行令，一年后也死了。\n\n汉武帝给河西走廊设立四个郡，两个军事要塞（玉门关和阳关），后又打下了河西走廊另一头的中亚地盘，此时，汉朝和罗马中间只有安息和贵霜。\n\n为了防御北方游牧民族，固守河西走廊，汉朝修建了一段河西走廊北向的长城（这段汉长城是用戈壁上的草修的）。\n\n安息国当时在今伊朗，汉朝使者走到这里献出丝绸，在海运兴起之前，这里都是东西文明沟通的唯一通道，历史学家称丝绸之路。\n\n***","slug":"影音/河西走廊","published":1,"updated":"2024-04-15T19:48:45.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnr9000chk8z25dygf88","content":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是央视纪录片《河西走廊》的笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>评：</p>\n<p>这也是一部早期笔记，好在它的呈现方式是脉络式的，对汉朝的这些事儿你可以看见脉络，而不是一个点，一个面，让人明显感觉片面。不幸的是当年居然没有时间看完，而现在——现在就更没有时间啦（很多更重要的事）。</p>\n<p>至于被人称赞的制作精美，我只能说那都是榨菜好吗？让我们吃主食。</p>\n<hr>\n<p><strong>第一集 使者</strong></p>\n<p>月氏人（读月支，而且历史上真的叫月支）和匈奴有仇，所以找汉武帝帮忙，汉朝只知道河西走廊通向西域，所以找人去河西走廊，但是河西走廊控制在匈奴王朝手里，而且月氏不知道在哪，27岁山西城固人张骞，举孝廉当了宫廷侍卫，报名去找月氏建功立业，汉武帝刘彻给他亲自挑了随从，和一个匈奴导游。</p>\n<p>张骞刚开始渡过黄河来到扁都口，扁都口是青海进河西走廊的位置，出扁都口来到河西走廊的戈壁，已去长安一千多公里，而在河西走廊被俘，押送到了匈奴王庭（今呼和浩特）。</p>\n<p>匈奴因为想套汉朝情报，还想策反张骞，所以没杀，而张骞貌似归顺，还颇有人格魅力，因此匈奴放松了管制，而张骞趁机了解匈奴人的生活与备战，在匈奴，马是军民两用，人不带盾而穿甲，最后，单于撮合了张骞娶匈奴媳妇。</p>\n<p>祁连在匈奴语言是天的意思，是匈奴神山。</p>\n<p>汉武帝失去耐心，已经积极备战五年，召开庭议攻打匈奴，计划亲征30万大军用和亲套路匈奴，也就是马邑之谋，最后情报泄露没有成功。几年后汉朝四路大军反抗匈奴，三路失败了，卫青这一路却杀到了匈奴腹地，史又称龙城之战。</p>\n<p>张骞来匈奴第九年，有一天和堂邑父以外出打猎之名成功逃跑，接着找月氏。这九年来月氏人被匈奴狂揍分散成两股，大部分去了中亚叫大月氏，少数和羌人在一起生活，叫小月氏。张骞穿越塔克拉玛干沙漠，翻越帕米尔高原，找到大月氏所在，大月氏王倾佩张骞，但已不感兴趣打仗，张骞一年多没得到王的回答，于是回家。</p>\n<p>回家没走河西走廊，绕路走了青海的羌人地盘，沿途帕米尔高原，昆仑山，莎车，和田，只可惜羌人已对匈奴服软，所以张骞又被俘虏，抓回老婆边，但张骞又抓住单于病死，和老婆成功一起逃回去长安。</p>\n<p>13年后终于回家，此时公元前126年，司马迁称赞张骞有凿空之功，而张骞被封太中大夫，老婆却仅一年后病故。</p>\n<p>三年后，卫青将军率六路大军两次打匈奴，让张骞校尉军衔当向导行军，因为张骞熟悉大漠里的水草之地，战后张骞被封博望侯。</p>\n<p>此时罗马帝国崛起，罗马东征与汉朝西征，在历史上同时开始。</p>\n<hr>\n<p><strong>第二集 通道</strong></p>\n<p>霍去病是刘彻的姐姐女仆的儿子，后来姨母卫子夫当了皇后，霍去病就成了皇室成员，而舅舅是卫青。</p>\n<p>汉朝和匈奴都在备战，霍去病经常和舅舅卫青在羽林营训练，这让汉武帝熟悉并喜欢上了霍去病。</p>\n<p>卫青先通过打仗解除了对长安的威胁。此时单于把河西走廊东封给了休屠（除）王，西封给了浑邪（爷）王。</p>\n<p>霍去病率领八百骑兵孤军深入立下人生第一个奇功被封冠军候，而轻骑兵快速突骑这种战术在和匈奴的对仗中慢慢磨练成熟。</p>\n<p>汉武帝为河西走廊发起河西战役，起用霍去病，乌鞘岭是河西走廊东起点，公元前121年春，霍去病带一万轻骑兵走过乌鞘岭，六天扫荡匈奴五个部落，深入匈奴五百多公里，休屠和浑邪王逃跑，一直打到敦煌才走。回汉朝后霍去病和汉武帝制定了新的歼灭匈奴主力计划，让公孙敖东面佯攻，霍去病绕后西攻，张骞李广两路切断匈奴援军。</p>\n<p>战争开始，匈奴单于开始南下打汉朝围魏救赵，而公孙敖迷失了方向没有会师霍去病令霍去病变成孤军，霍去病反而决定铤而走险单挑二王，最后匈奴部队遭到毁灭性打击。</p>\n<p>霍去病战后接手了焉支山（祁连山一条山脉，水草丰富，匈奴人用来养马），为汉朝养马，却不要房子，说匈奴未灭，何以家为。但李广和张骞两路部队陷入重围斗争失败，这让张骞被免博望侯削为平民。</p>\n<p>匈奴战败想杀掉二王，二王于是心生投降汉朝，此时二王却还有几万军队，汉武帝疑似有诈，令霍去病带兵在河西走廊受降，中途二王果然反悔，浑邪王杀了休屠王并收编部队，但其本身也举棋不定，最后浑邪王被霍去病的手段折服，安心投降，此时霍去病刚刚19岁，此后霍去病又征战匈奴，杀光了匈奴主力，22岁一直杀到匈奴圣山狼居胥山，然后封狼居胥，这场河西之战打开了汉朝对西方的视野。</p>\n<p>汉武帝战后召张骞任中郎将，第二次出使西域与各国做茶叶瓷器等生意。张骞来到乌孙国结盟，派人访问天山附近的国家建立外交，西域国家的特产和使者也都来汉朝，霍去病却23岁突然去世，而张骞第二次去西域结束后被封大行令，一年后也死了。</p>\n<p>汉武帝给河西走廊设立四个郡，两个军事要塞（玉门关和阳关），后又打下了河西走廊另一头的中亚地盘，此时，汉朝和罗马中间只有安息和贵霜。</p>\n<p>为了防御北方游牧民族，固守河西走廊，汉朝修建了一段河西走廊北向的长城（这段汉长城是用戈壁上的草修的）。</p>\n<p>安息国当时在今伊朗，汉朝使者走到这里献出丝绸，在海运兴起之前，这里都是东西文明沟通的唯一通道，历史学家称丝绸之路。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是央视纪录片《河西走廊》的笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>评：</p>\n<p>这也是一部早期笔记，好在它的呈现方式是脉络式的，对汉朝的这些事儿你可以看见脉络，而不是一个点，一个面，让人明显感觉片面。不幸的是当年居然没有时间看完，而现在——现在就更没有时间啦（很多更重要的事）。</p>\n<p>至于被人称赞的制作精美，我只能说那都是榨菜好吗？让我们吃主食。</p>\n<hr>\n<p><strong>第一集 使者</strong></p>\n<p>月氏人（读月支，而且历史上真的叫月支）和匈奴有仇，所以找汉武帝帮忙，汉朝只知道河西走廊通向西域，所以找人去河西走廊，但是河西走廊控制在匈奴王朝手里，而且月氏不知道在哪，27岁山西城固人张骞，举孝廉当了宫廷侍卫，报名去找月氏建功立业，汉武帝刘彻给他亲自挑了随从，和一个匈奴导游。</p>\n<p>张骞刚开始渡过黄河来到扁都口，扁都口是青海进河西走廊的位置，出扁都口来到河西走廊的戈壁，已去长安一千多公里，而在河西走廊被俘，押送到了匈奴王庭（今呼和浩特）。</p>\n<p>匈奴因为想套汉朝情报，还想策反张骞，所以没杀，而张骞貌似归顺，还颇有人格魅力，因此匈奴放松了管制，而张骞趁机了解匈奴人的生活与备战，在匈奴，马是军民两用，人不带盾而穿甲，最后，单于撮合了张骞娶匈奴媳妇。</p>\n<p>祁连在匈奴语言是天的意思，是匈奴神山。</p>\n<p>汉武帝失去耐心，已经积极备战五年，召开庭议攻打匈奴，计划亲征30万大军用和亲套路匈奴，也就是马邑之谋，最后情报泄露没有成功。几年后汉朝四路大军反抗匈奴，三路失败了，卫青这一路却杀到了匈奴腹地，史又称龙城之战。</p>\n<p>张骞来匈奴第九年，有一天和堂邑父以外出打猎之名成功逃跑，接着找月氏。这九年来月氏人被匈奴狂揍分散成两股，大部分去了中亚叫大月氏，少数和羌人在一起生活，叫小月氏。张骞穿越塔克拉玛干沙漠，翻越帕米尔高原，找到大月氏所在，大月氏王倾佩张骞，但已不感兴趣打仗，张骞一年多没得到王的回答，于是回家。</p>\n<p>回家没走河西走廊，绕路走了青海的羌人地盘，沿途帕米尔高原，昆仑山，莎车，和田，只可惜羌人已对匈奴服软，所以张骞又被俘虏，抓回老婆边，但张骞又抓住单于病死，和老婆成功一起逃回去长安。</p>\n<p>13年后终于回家，此时公元前126年，司马迁称赞张骞有凿空之功，而张骞被封太中大夫，老婆却仅一年后病故。</p>\n<p>三年后，卫青将军率六路大军两次打匈奴，让张骞校尉军衔当向导行军，因为张骞熟悉大漠里的水草之地，战后张骞被封博望侯。</p>\n<p>此时罗马帝国崛起，罗马东征与汉朝西征，在历史上同时开始。</p>\n<hr>\n<p><strong>第二集 通道</strong></p>\n<p>霍去病是刘彻的姐姐女仆的儿子，后来姨母卫子夫当了皇后，霍去病就成了皇室成员，而舅舅是卫青。</p>\n<p>汉朝和匈奴都在备战，霍去病经常和舅舅卫青在羽林营训练，这让汉武帝熟悉并喜欢上了霍去病。</p>\n<p>卫青先通过打仗解除了对长安的威胁。此时单于把河西走廊东封给了休屠（除）王，西封给了浑邪（爷）王。</p>\n<p>霍去病率领八百骑兵孤军深入立下人生第一个奇功被封冠军候，而轻骑兵快速突骑这种战术在和匈奴的对仗中慢慢磨练成熟。</p>\n<p>汉武帝为河西走廊发起河西战役，起用霍去病，乌鞘岭是河西走廊东起点，公元前121年春，霍去病带一万轻骑兵走过乌鞘岭，六天扫荡匈奴五个部落，深入匈奴五百多公里，休屠和浑邪王逃跑，一直打到敦煌才走。回汉朝后霍去病和汉武帝制定了新的歼灭匈奴主力计划，让公孙敖东面佯攻，霍去病绕后西攻，张骞李广两路切断匈奴援军。</p>\n<p>战争开始，匈奴单于开始南下打汉朝围魏救赵，而公孙敖迷失了方向没有会师霍去病令霍去病变成孤军，霍去病反而决定铤而走险单挑二王，最后匈奴部队遭到毁灭性打击。</p>\n<p>霍去病战后接手了焉支山（祁连山一条山脉，水草丰富，匈奴人用来养马），为汉朝养马，却不要房子，说匈奴未灭，何以家为。但李广和张骞两路部队陷入重围斗争失败，这让张骞被免博望侯削为平民。</p>\n<p>匈奴战败想杀掉二王，二王于是心生投降汉朝，此时二王却还有几万军队，汉武帝疑似有诈，令霍去病带兵在河西走廊受降，中途二王果然反悔，浑邪王杀了休屠王并收编部队，但其本身也举棋不定，最后浑邪王被霍去病的手段折服，安心投降，此时霍去病刚刚19岁，此后霍去病又征战匈奴，杀光了匈奴主力，22岁一直杀到匈奴圣山狼居胥山，然后封狼居胥，这场河西之战打开了汉朝对西方的视野。</p>\n<p>汉武帝战后召张骞任中郎将，第二次出使西域与各国做茶叶瓷器等生意。张骞来到乌孙国结盟，派人访问天山附近的国家建立外交，西域国家的特产和使者也都来汉朝，霍去病却23岁突然去世，而张骞第二次去西域结束后被封大行令，一年后也死了。</p>\n<p>汉武帝给河西走廊设立四个郡，两个军事要塞（玉门关和阳关），后又打下了河西走廊另一头的中亚地盘，此时，汉朝和罗马中间只有安息和贵霜。</p>\n<p>为了防御北方游牧民族，固守河西走廊，汉朝修建了一段河西走廊北向的长城（这段汉长城是用戈壁上的草修的）。</p>\n<p>安息国当时在今伊朗，汉朝使者走到这里献出丝绸，在海运兴起之前，这里都是东西文明沟通的唯一通道，历史学家称丝绸之路。</p>\n<hr>\n"},{"title":"极简Solidity语法总结","date":"2023-04-06T11:59:00.000Z","auto_excerpt":"true","_content":"## **常规语法**\n\n文件结构：【预编译导入，合约库接口】\n\n1. 预编译：指定编译器版本，语法为 `pragma Solidity ^0.4.19;`，^是可选的脱字符号，意为这是此主版本号的最新版本\n2. 导入：导入的是其它solidity文件，语法 `import ‘xxx.sol’;`，还可以用“/”引用目录，“.”符号引用当前目录，“..”引用父目录\n3. 合约：`contract 合约名 [is 继承语句] {xxx}`\n4. 库：`library 库名 {xxx}`\n5. 接口：`interface 接口名{xxx}`\n6. 函数：`function 函数名([形参表列]) 限定符 [return语句] {xxx}`\n\n注释：\n\n1. 单行注释 `//`，多行注释 `/* */`\n\n自定义数据类型：\n\n1. 结构体：语法为 `struct 结构体名{数据类型 变量名; \\n 数据类型 变量名; }`，实例化一个结构体语法是 `结构体名 = 变量名(”ritesh”,10,true, new unit[](3));`\n\n基本数据类型：\n\n1. 概述：基本数据类型还分为值类型和引用类型两种，前者符号memory后者storage，但不是运行在pc里而是EVM网络，值类型存在节点计算机内存里，用完就销毁，索引的时候也是和其它计算机语言一样根据标识符寻找，引用类型经常又称状态变量【应该是借用自函数式编程里面的类似概念】，存储在区块链上网络上，永久存在，根据指针索引。即函数外部声明的变量存储在stoage，内部变量存储在memory\n2. 对引用类型的变量（数组、结构体、字符串、映射），在声明的时候必须指定存储位置\n3. 值类型：\n   1. 布尔型 `boll`，不能转换为整型，默认false\n   2. 无符整型 `uint`和有符整型 `int`按8递加，例如最低 `uint 8`，最高 `uint 256`，int同\n   3. 地址类型 `address`，20字节，有隐式的balance属性和发送以太币的transfer函数、返回发送以太币是否成功布尔值的send函数、调用合约函数的Call函数、DelegateCall函数、Callcode函数\n   4. 数组类型可以任意数据类型，声明语法 `数据类型[数量] 数组名`，初始化方法在声明的时候 `int[5] age = [1,2,3,4,5];`，或者先声明 `int[5] = 数组名;`，再写 `数组名 = [1,2,3,4,5];`。\n      1. 动态数组：声明的时候不写有多少元素个数 `int[] 数组名;`，初始化的时候用new关键字 `数组名 = new int[] (5);`\n      2. 字节数组：可以容纳任意数量字符的动态数组，声明语法和初始化语法与动态数组一样 `bytes[] 数组名;`和 `数组名 = new bytes[] (5);`另外有一种初始化语法是声明语句之后使用赋值语句 `数组名 = “xxx”;`\n      3. 字符串数组\n      4. 数组里有三个隐式成员属性，但不是每种数组都具有，index只有字符串数组没有，但只有动态数组、固定数组、字节型数组支持写入指定元素index属性，push只有动态数组支持，length只有字符串数组没有，但只有动态数组和字节型数组支持写入此属性\n   5. 枚举类型声明语法 `enum 变量名{枚举值1,枚举值2}`，初始化语法太抽象了没看懂，枚举类型不能在函数中声明只能在合约中声明\n   6. 字节类型声明的时候要写多少个字节数量，示例 `bytes 变量名;`，默认值0x00，如果byte1也可以用byte表示，可以用按位操作符\n   7. 枚举类型至少声明一个枚举值，第一个编号0，第二个编号1，以此类推\n4. 引用类型有数组、结构体、字符串、映射，其中映射就是键值对，声明语法 `Mapping (键数据类型 => 值数据类型) 变量名;`，读值语法 `变量名[序号]`，写值语法变量名 `[序号] = <<值>>`，映射类型调用是要gas的所以使用时要避免迭代和循环\n5. 字面量：不同字面量的表示方法不同，整型没什么，字符串型单引号或者双引号，地址型0x开头，十六进制数用hex开头并用双引号包裹 `hex”1A2B3F”`，十进制小数直接点号即可 `3.14`\n\n运算符：\n\n1. 比较：相等 `==`，不相等 `!=`，大于 `>`，小于 `<`，大于等于 `>=`，小于等于 `<=`\n2. 逻辑：与 `&&`或 `||`非 `!`\n\n程序结构：\n\n1. 选择：`if(条件句1) {xxx}   else if(条件句2) {xxx}   else{xxx}`\n2. 循环：`while(条件句) {xxx}`，`for(初始化;条件句;自增减) {xxx}`，`do{xxx}    while(条件句)`\n3. break和continue：和C一样\n\n返回：\n\n1. 如果函数要有返回值，必须在形参和大括号之间写 `returns(返回值类型)`，注意有个s，然后在函数体内写return语句 `return 变量名;`，第二个方法可以允许写多个返回值，这叫元组返回\n\n面向对象：\n\n1. 封装：Solidity通过可见性修改器，即限定符来实现封装\n2. 继承：继承会继承所有public和internal的状态变量、函数、修改器、事件，写法是写合约的时候使用is关键字 `contract 子合约名 is 父合约名{xxx}`，多重继承遵循C3线性化顺序，Solidity合约里所有函数全部具有虚函数性，对没有按默认顺序继承的合约一样可以用 `合约名.函数名()`来调用函数\n3. 多态：多态即重载，Solidity分函数和合约两种重载，函数多态写法直接写同名函数即可，合约多态实现方法是合约继承\n\n构造函数：想重写构造函数直接写一个和合约名一样的函数即可，但限定符只能是public或internal，构造函数没有返回值，只在合约部署的时候执行一次【这里也是Solidity和其它计算机语言的区别，前者编译的是区块链上永久存在的字节码，其它语言编译的只是运行的时候用完就丢的二进制编码】。0.4.22之后这种写法被废除，必须使用构造器constructor(),写法是 `constructor(…) { … }`，不用function，中间也可以加函数限定符public, internal，但是如果合约是继承自父合约，“在派生合约构造函数中添加基合约所需要的参数”，写法是 `constructor(…)constructor2(…) { … }`，其中 `constructor2(…)`是父合约的构造函数。两个构造函数都需要指定可见性限定符。\n\n错误处理：以前只用throw语句进行错误处理，会消耗掉所有gas然后把状态回退到刚初始化，所以4.10版本之后被标记过时，现在使用几个错误处理函数，require函数写在函数体的刚开始，语法 `require(条件句);`条件句为true接着运行false抛出异常；assert函数语法和作用和require函数一样，用于require函数之后的第二次再判断，但是和throw语句一样会消耗掉所有gas然后把状态回退到刚初始化；revert()语法 `assert();`作用类似循环体中的berak语句，一般配合if条件判断，满足条件就直接break整个函数体\n\n---\n\n## **语言特性**\n\n1. 以太坊自然规范注释法：格式为 `/// @xxx 注释`文本，其中 `xxx`如果是title意为标题，author意为作者，notice用于解释函数或者合约的作用，dev用于向开发者诉说的话，param用于解释关于形参的信息，return用于解释返回值的信息\n2. var类型：隐式类型变量，只能在函数体中使用，会通知编译器为第一次赋予它的值的类型，一旦通知不可修改\n3. Solidity不强制规定变量声明和使用的顺序，因为编译器生成字节码的时候第一步会先提取所有变量声明放在顶部\n4. 数据位置：因为Solidity运行在EVM虚拟机上，所以变量有不同存放位置，状态变量放在存储位置，其永久存在所有节点上，内存位置是所有函数都能访问的本地内存，函数执行完就销毁，传参放在调用位置上，使用以太坊指令集的变量和中间值会存在堆栈位置\n5. fallback函数：无名函数，如果调用的函数根本不存在或合约没有收到任何数据例如只收到打过来的以太币时触发，没有名字，无法显式调用，没有传参和返回值，默认消耗2300gas，如果要用它接收以太币要标记payable\n6. 修改器：修改器专门承接判断某些值以及要不要执行函数这些工作，语法 `modifier 修改器名(){xxx}`，一般里面接if判断句，其中有个语法糖，`_`意为替代目标函数，使用修改器写函数首部的形参和大括号之间，语法 `function 函数名() 修改器名() 限定符 {xxx}`\n7. 事件：链上有一个特殊数据结构叫日志，专门用来记载区块中发生的事件信息，智能合约不能访问，其提供一个事件接口，事件是一个触发器，条件发声就存储抛出异常到交易日志中，声明语法 `event 事件名(抛出异常);`，其中抛出异常可以是数据类型或者字符串，事件声明之后在整个合约范围内有效，使用方法在函数里写 `事件名(所要抛出异常);`即可\n8. 隐式转换：支持从较小类型到较大类型的隐式转换，直接赋值即可\n9. 显式转换：不鼓励显式转换因为容易出错，但是提供几个显式转换函数，ConvertionExplicitUINT8toUINT256函数、ConvertionExplicitUINT256toUINT8函数、ConvertionExplicitUINT256toUINT81函数分别按函数名字面意思提供从前到后的类型转换，还有一个conversions函数不太明白\n10. 散列函数：solidity提供散列函数将输入转换为散列，SHA2算法是sha256()，SHA3算法是sha3()和keccak256()，后者是SHA3算法的别名。语法 `sha256(”r”)`、`sha3(”r”)`和 `keccak256(”r”)`\n11. 地址数据类型：外部地址和合约地址都有5个全局函数和一个余额成员变量\n\n    1. ddress.transfer(uint256 amount)：向指定地址发送以wei做单位的以太币，返回成功与否的布尔值\n    2. address.send(uint256 amount)：向指定地址发送以wei做单位的以太币，返回成功与否的布尔值\n    3. address.call(…)：调用低级别的call函数，返回成功与否的布尔值\n    4. address.callcode(…)：调用低级别的callcode函数，返回成功与否的布尔值\n    5. address.delegatecall(…)：调用低级别的delegatecall函数，返回成功与否的布尔值\n12. 合约数据类型：合约数据类型提供一个this成员和selfdestruct函数，接收一个地址把钱全部转过去\n13. 合约内调用已创建合约的两种方法：如果是同一个文件里写了两个合约，第二个合约里用new创建一个新的对象，语法 `Hellw world myobj = new Helloworld();`。如果想要调用已经部署过的合约，直接把这个合约的地址赋值给地址类型数据即可。\n14. 方法覆盖对同名函数追加view关键字，这个关键字意思是承诺不修改状态，语法 `function 函数名() public view returns(uint){ }`\n15. 抽象合约：抽象合约的用途只有被继承，无法创建合约实例，语法是依旧正常的合约结构，但是所有的函数都没有大括号的函数体只有一个分号，例如 `function 函数名(形参) public;`\n16. 截断模式和检查模式：0.8的新特性，前者使用unchecked关键字后者使用checked，在算数运算中，后者会对运算结果进行溢出（超过数据结构定义的数字上下限）检查，如果超过就抛出异常然后回退，而前者不会，所以前者需要调用第三方库如openzeppelin的safemath.sol。语法上是 `unchecked{xxx运算语句}`和 `checked{xxx运算语句}`\n17. 内联汇编：编译的时候solc会优化二进制代码，但有时候尤其是循环语句的时候这种优化是负优化，使用内联汇编语句可以阻止优化\n\n    ```solidity\n    assembly{\n     内联汇编语句\n    }\n    ```\n18. abi编码函数：\n19. 区块和交易全局变量：因为合约无权访问整个账本所以提供一些关于区块和交易的全局变量以供调用，并且没有在合约当中显式声明\n\n| 变量名称                          | 描述                                     |\n| --------------------------------- | ---------------------------------------- |\n| block.coinbase(address)           | 与etherbase相同，指矿工的地址            |\n| block.difficulty(uint)            | 当前区块难度等级                         |\n| block.gaslimit(unit)              | 当前区块gas限制                          |\n| block.number(unit)                | 顺序表示的区块编号                       |\n| block.timestamp(unit)             | 区块创建时间                             |\n| msg.data(bytes)                   | 与创建交易相关的函数及其参考信息         |\n| msg.gas(uint)                     | 执行交易后未花费gas                      |\n| msg.sender(address)               | 调用函数的地址                           |\n| msg.sig(bytes4)                   | 函数标识符使用散列函数签名后的前四个字节 |\n| msg.value(uint)                   | 随交易发送的以太币数量，以wei作为单位    |\n| now(uint)                         | 当前时间                                 |\n| tx.gasprice(uint)                 | 调用者准备支付的每一种gas单位下的gas价格 |\n| tx.origin(address)                | 交易的发起者                             |\n| block.blockhash(uint blockNumber) | 包含交易的区块散列值                     |\n| returns(bytes32)                  | 包含交易的区块散列值                     |\n| string.concat                     | 0.8.13版本的新全局变量（可能有误）       |\n| abi.encodeCall                    | 0.8.13版本的新全局变量（可能有误）       |\n","source":"_posts/Solidity/极简Solidity语法总结.md","raw":"---\ntitle: 极简Solidity语法总结\ndate: 2023-04-06 19:59:00\ntags: \ncategories:\n  - - Solidity\nauto_excerpt: \"true\"\n---\n## **常规语法**\n\n文件结构：【预编译导入，合约库接口】\n\n1. 预编译：指定编译器版本，语法为 `pragma Solidity ^0.4.19;`，^是可选的脱字符号，意为这是此主版本号的最新版本\n2. 导入：导入的是其它solidity文件，语法 `import ‘xxx.sol’;`，还可以用“/”引用目录，“.”符号引用当前目录，“..”引用父目录\n3. 合约：`contract 合约名 [is 继承语句] {xxx}`\n4. 库：`library 库名 {xxx}`\n5. 接口：`interface 接口名{xxx}`\n6. 函数：`function 函数名([形参表列]) 限定符 [return语句] {xxx}`\n\n注释：\n\n1. 单行注释 `//`，多行注释 `/* */`\n\n自定义数据类型：\n\n1. 结构体：语法为 `struct 结构体名{数据类型 变量名; \\n 数据类型 变量名; }`，实例化一个结构体语法是 `结构体名 = 变量名(”ritesh”,10,true, new unit[](3));`\n\n基本数据类型：\n\n1. 概述：基本数据类型还分为值类型和引用类型两种，前者符号memory后者storage，但不是运行在pc里而是EVM网络，值类型存在节点计算机内存里，用完就销毁，索引的时候也是和其它计算机语言一样根据标识符寻找，引用类型经常又称状态变量【应该是借用自函数式编程里面的类似概念】，存储在区块链上网络上，永久存在，根据指针索引。即函数外部声明的变量存储在stoage，内部变量存储在memory\n2. 对引用类型的变量（数组、结构体、字符串、映射），在声明的时候必须指定存储位置\n3. 值类型：\n   1. 布尔型 `boll`，不能转换为整型，默认false\n   2. 无符整型 `uint`和有符整型 `int`按8递加，例如最低 `uint 8`，最高 `uint 256`，int同\n   3. 地址类型 `address`，20字节，有隐式的balance属性和发送以太币的transfer函数、返回发送以太币是否成功布尔值的send函数、调用合约函数的Call函数、DelegateCall函数、Callcode函数\n   4. 数组类型可以任意数据类型，声明语法 `数据类型[数量] 数组名`，初始化方法在声明的时候 `int[5] age = [1,2,3,4,5];`，或者先声明 `int[5] = 数组名;`，再写 `数组名 = [1,2,3,4,5];`。\n      1. 动态数组：声明的时候不写有多少元素个数 `int[] 数组名;`，初始化的时候用new关键字 `数组名 = new int[] (5);`\n      2. 字节数组：可以容纳任意数量字符的动态数组，声明语法和初始化语法与动态数组一样 `bytes[] 数组名;`和 `数组名 = new bytes[] (5);`另外有一种初始化语法是声明语句之后使用赋值语句 `数组名 = “xxx”;`\n      3. 字符串数组\n      4. 数组里有三个隐式成员属性，但不是每种数组都具有，index只有字符串数组没有，但只有动态数组、固定数组、字节型数组支持写入指定元素index属性，push只有动态数组支持，length只有字符串数组没有，但只有动态数组和字节型数组支持写入此属性\n   5. 枚举类型声明语法 `enum 变量名{枚举值1,枚举值2}`，初始化语法太抽象了没看懂，枚举类型不能在函数中声明只能在合约中声明\n   6. 字节类型声明的时候要写多少个字节数量，示例 `bytes 变量名;`，默认值0x00，如果byte1也可以用byte表示，可以用按位操作符\n   7. 枚举类型至少声明一个枚举值，第一个编号0，第二个编号1，以此类推\n4. 引用类型有数组、结构体、字符串、映射，其中映射就是键值对，声明语法 `Mapping (键数据类型 => 值数据类型) 变量名;`，读值语法 `变量名[序号]`，写值语法变量名 `[序号] = <<值>>`，映射类型调用是要gas的所以使用时要避免迭代和循环\n5. 字面量：不同字面量的表示方法不同，整型没什么，字符串型单引号或者双引号，地址型0x开头，十六进制数用hex开头并用双引号包裹 `hex”1A2B3F”`，十进制小数直接点号即可 `3.14`\n\n运算符：\n\n1. 比较：相等 `==`，不相等 `!=`，大于 `>`，小于 `<`，大于等于 `>=`，小于等于 `<=`\n2. 逻辑：与 `&&`或 `||`非 `!`\n\n程序结构：\n\n1. 选择：`if(条件句1) {xxx}   else if(条件句2) {xxx}   else{xxx}`\n2. 循环：`while(条件句) {xxx}`，`for(初始化;条件句;自增减) {xxx}`，`do{xxx}    while(条件句)`\n3. break和continue：和C一样\n\n返回：\n\n1. 如果函数要有返回值，必须在形参和大括号之间写 `returns(返回值类型)`，注意有个s，然后在函数体内写return语句 `return 变量名;`，第二个方法可以允许写多个返回值，这叫元组返回\n\n面向对象：\n\n1. 封装：Solidity通过可见性修改器，即限定符来实现封装\n2. 继承：继承会继承所有public和internal的状态变量、函数、修改器、事件，写法是写合约的时候使用is关键字 `contract 子合约名 is 父合约名{xxx}`，多重继承遵循C3线性化顺序，Solidity合约里所有函数全部具有虚函数性，对没有按默认顺序继承的合约一样可以用 `合约名.函数名()`来调用函数\n3. 多态：多态即重载，Solidity分函数和合约两种重载，函数多态写法直接写同名函数即可，合约多态实现方法是合约继承\n\n构造函数：想重写构造函数直接写一个和合约名一样的函数即可，但限定符只能是public或internal，构造函数没有返回值，只在合约部署的时候执行一次【这里也是Solidity和其它计算机语言的区别，前者编译的是区块链上永久存在的字节码，其它语言编译的只是运行的时候用完就丢的二进制编码】。0.4.22之后这种写法被废除，必须使用构造器constructor(),写法是 `constructor(…) { … }`，不用function，中间也可以加函数限定符public, internal，但是如果合约是继承自父合约，“在派生合约构造函数中添加基合约所需要的参数”，写法是 `constructor(…)constructor2(…) { … }`，其中 `constructor2(…)`是父合约的构造函数。两个构造函数都需要指定可见性限定符。\n\n错误处理：以前只用throw语句进行错误处理，会消耗掉所有gas然后把状态回退到刚初始化，所以4.10版本之后被标记过时，现在使用几个错误处理函数，require函数写在函数体的刚开始，语法 `require(条件句);`条件句为true接着运行false抛出异常；assert函数语法和作用和require函数一样，用于require函数之后的第二次再判断，但是和throw语句一样会消耗掉所有gas然后把状态回退到刚初始化；revert()语法 `assert();`作用类似循环体中的berak语句，一般配合if条件判断，满足条件就直接break整个函数体\n\n---\n\n## **语言特性**\n\n1. 以太坊自然规范注释法：格式为 `/// @xxx 注释`文本，其中 `xxx`如果是title意为标题，author意为作者，notice用于解释函数或者合约的作用，dev用于向开发者诉说的话，param用于解释关于形参的信息，return用于解释返回值的信息\n2. var类型：隐式类型变量，只能在函数体中使用，会通知编译器为第一次赋予它的值的类型，一旦通知不可修改\n3. Solidity不强制规定变量声明和使用的顺序，因为编译器生成字节码的时候第一步会先提取所有变量声明放在顶部\n4. 数据位置：因为Solidity运行在EVM虚拟机上，所以变量有不同存放位置，状态变量放在存储位置，其永久存在所有节点上，内存位置是所有函数都能访问的本地内存，函数执行完就销毁，传参放在调用位置上，使用以太坊指令集的变量和中间值会存在堆栈位置\n5. fallback函数：无名函数，如果调用的函数根本不存在或合约没有收到任何数据例如只收到打过来的以太币时触发，没有名字，无法显式调用，没有传参和返回值，默认消耗2300gas，如果要用它接收以太币要标记payable\n6. 修改器：修改器专门承接判断某些值以及要不要执行函数这些工作，语法 `modifier 修改器名(){xxx}`，一般里面接if判断句，其中有个语法糖，`_`意为替代目标函数，使用修改器写函数首部的形参和大括号之间，语法 `function 函数名() 修改器名() 限定符 {xxx}`\n7. 事件：链上有一个特殊数据结构叫日志，专门用来记载区块中发生的事件信息，智能合约不能访问，其提供一个事件接口，事件是一个触发器，条件发声就存储抛出异常到交易日志中，声明语法 `event 事件名(抛出异常);`，其中抛出异常可以是数据类型或者字符串，事件声明之后在整个合约范围内有效，使用方法在函数里写 `事件名(所要抛出异常);`即可\n8. 隐式转换：支持从较小类型到较大类型的隐式转换，直接赋值即可\n9. 显式转换：不鼓励显式转换因为容易出错，但是提供几个显式转换函数，ConvertionExplicitUINT8toUINT256函数、ConvertionExplicitUINT256toUINT8函数、ConvertionExplicitUINT256toUINT81函数分别按函数名字面意思提供从前到后的类型转换，还有一个conversions函数不太明白\n10. 散列函数：solidity提供散列函数将输入转换为散列，SHA2算法是sha256()，SHA3算法是sha3()和keccak256()，后者是SHA3算法的别名。语法 `sha256(”r”)`、`sha3(”r”)`和 `keccak256(”r”)`\n11. 地址数据类型：外部地址和合约地址都有5个全局函数和一个余额成员变量\n\n    1. ddress.transfer(uint256 amount)：向指定地址发送以wei做单位的以太币，返回成功与否的布尔值\n    2. address.send(uint256 amount)：向指定地址发送以wei做单位的以太币，返回成功与否的布尔值\n    3. address.call(…)：调用低级别的call函数，返回成功与否的布尔值\n    4. address.callcode(…)：调用低级别的callcode函数，返回成功与否的布尔值\n    5. address.delegatecall(…)：调用低级别的delegatecall函数，返回成功与否的布尔值\n12. 合约数据类型：合约数据类型提供一个this成员和selfdestruct函数，接收一个地址把钱全部转过去\n13. 合约内调用已创建合约的两种方法：如果是同一个文件里写了两个合约，第二个合约里用new创建一个新的对象，语法 `Hellw world myobj = new Helloworld();`。如果想要调用已经部署过的合约，直接把这个合约的地址赋值给地址类型数据即可。\n14. 方法覆盖对同名函数追加view关键字，这个关键字意思是承诺不修改状态，语法 `function 函数名() public view returns(uint){ }`\n15. 抽象合约：抽象合约的用途只有被继承，无法创建合约实例，语法是依旧正常的合约结构，但是所有的函数都没有大括号的函数体只有一个分号，例如 `function 函数名(形参) public;`\n16. 截断模式和检查模式：0.8的新特性，前者使用unchecked关键字后者使用checked，在算数运算中，后者会对运算结果进行溢出（超过数据结构定义的数字上下限）检查，如果超过就抛出异常然后回退，而前者不会，所以前者需要调用第三方库如openzeppelin的safemath.sol。语法上是 `unchecked{xxx运算语句}`和 `checked{xxx运算语句}`\n17. 内联汇编：编译的时候solc会优化二进制代码，但有时候尤其是循环语句的时候这种优化是负优化，使用内联汇编语句可以阻止优化\n\n    ```solidity\n    assembly{\n     内联汇编语句\n    }\n    ```\n18. abi编码函数：\n19. 区块和交易全局变量：因为合约无权访问整个账本所以提供一些关于区块和交易的全局变量以供调用，并且没有在合约当中显式声明\n\n| 变量名称                          | 描述                                     |\n| --------------------------------- | ---------------------------------------- |\n| block.coinbase(address)           | 与etherbase相同，指矿工的地址            |\n| block.difficulty(uint)            | 当前区块难度等级                         |\n| block.gaslimit(unit)              | 当前区块gas限制                          |\n| block.number(unit)                | 顺序表示的区块编号                       |\n| block.timestamp(unit)             | 区块创建时间                             |\n| msg.data(bytes)                   | 与创建交易相关的函数及其参考信息         |\n| msg.gas(uint)                     | 执行交易后未花费gas                      |\n| msg.sender(address)               | 调用函数的地址                           |\n| msg.sig(bytes4)                   | 函数标识符使用散列函数签名后的前四个字节 |\n| msg.value(uint)                   | 随交易发送的以太币数量，以wei作为单位    |\n| now(uint)                         | 当前时间                                 |\n| tx.gasprice(uint)                 | 调用者准备支付的每一种gas单位下的gas价格 |\n| tx.origin(address)                | 交易的发起者                             |\n| block.blockhash(uint blockNumber) | 包含交易的区块散列值                     |\n| returns(bytes32)                  | 包含交易的区块散列值                     |\n| string.concat                     | 0.8.13版本的新全局变量（可能有误）       |\n| abi.encodeCall                    | 0.8.13版本的新全局变量（可能有误）       |\n","slug":"Solidity/极简Solidity语法总结","published":1,"updated":"2024-04-14T15:31:01.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnr9000ehk8z40mf8y33","content":"<h2 id=\"常规语法\"><a href=\"#常规语法\" class=\"headerlink\" title=\"常规语法\"></a><strong>常规语法</strong></h2><p>文件结构：【预编译导入，合约库接口】</p>\n<ol>\n<li>预编译：指定编译器版本，语法为 <code>pragma Solidity ^0.4.19;</code>，^是可选的脱字符号，意为这是此主版本号的最新版本</li>\n<li>导入：导入的是其它solidity文件，语法 <code>import ‘xxx.sol’;</code>，还可以用“&#x2F;”引用目录，“.”符号引用当前目录，“..”引用父目录</li>\n<li>合约：<code>contract 合约名 [is 继承语句] &#123;xxx&#125;</code></li>\n<li>库：<code>library 库名 &#123;xxx&#125;</code></li>\n<li>接口：<code>interface 接口名&#123;xxx&#125;</code></li>\n<li>函数：<code>function 函数名([形参表列]) 限定符 [return语句] &#123;xxx&#125;</code></li>\n</ol>\n<p>注释：</p>\n<ol>\n<li>单行注释 <code>//</code>，多行注释 <code>/* */</code></li>\n</ol>\n<p>自定义数据类型：</p>\n<ol>\n<li>结构体：语法为 <code>struct 结构体名&#123;数据类型 变量名; \\n 数据类型 变量名; &#125;</code>，实例化一个结构体语法是 <code>结构体名 = 变量名(”ritesh”,10,true, new unit[](3));</code></li>\n</ol>\n<p>基本数据类型：</p>\n<ol>\n<li>概述：基本数据类型还分为值类型和引用类型两种，前者符号memory后者storage，但不是运行在pc里而是EVM网络，值类型存在节点计算机内存里，用完就销毁，索引的时候也是和其它计算机语言一样根据标识符寻找，引用类型经常又称状态变量【应该是借用自函数式编程里面的类似概念】，存储在区块链上网络上，永久存在，根据指针索引。即函数外部声明的变量存储在stoage，内部变量存储在memory</li>\n<li>对引用类型的变量（数组、结构体、字符串、映射），在声明的时候必须指定存储位置</li>\n<li>值类型：<ol>\n<li>布尔型 <code>boll</code>，不能转换为整型，默认false</li>\n<li>无符整型 <code>uint</code>和有符整型 <code>int</code>按8递加，例如最低 <code>uint 8</code>，最高 <code>uint 256</code>，int同</li>\n<li>地址类型 <code>address</code>，20字节，有隐式的balance属性和发送以太币的transfer函数、返回发送以太币是否成功布尔值的send函数、调用合约函数的Call函数、DelegateCall函数、Callcode函数</li>\n<li>数组类型可以任意数据类型，声明语法 <code>数据类型[数量] 数组名</code>，初始化方法在声明的时候 <code>int[5] age = [1,2,3,4,5];</code>，或者先声明 <code>int[5] = 数组名;</code>，再写 <code>数组名 = [1,2,3,4,5];</code>。<ol>\n<li>动态数组：声明的时候不写有多少元素个数 <code>int[] 数组名;</code>，初始化的时候用new关键字 <code>数组名 = new int[] (5);</code></li>\n<li>字节数组：可以容纳任意数量字符的动态数组，声明语法和初始化语法与动态数组一样 <code>bytes[] 数组名;</code>和 <code>数组名 = new bytes[] (5);</code>另外有一种初始化语法是声明语句之后使用赋值语句 <code>数组名 = “xxx”;</code></li>\n<li>字符串数组</li>\n<li>数组里有三个隐式成员属性，但不是每种数组都具有，index只有字符串数组没有，但只有动态数组、固定数组、字节型数组支持写入指定元素index属性，push只有动态数组支持，length只有字符串数组没有，但只有动态数组和字节型数组支持写入此属性</li>\n</ol>\n</li>\n<li>枚举类型声明语法 <code>enum 变量名&#123;枚举值1,枚举值2&#125;</code>，初始化语法太抽象了没看懂，枚举类型不能在函数中声明只能在合约中声明</li>\n<li>字节类型声明的时候要写多少个字节数量，示例 <code>bytes 变量名;</code>，默认值0x00，如果byte1也可以用byte表示，可以用按位操作符</li>\n<li>枚举类型至少声明一个枚举值，第一个编号0，第二个编号1，以此类推</li>\n</ol>\n</li>\n<li>引用类型有数组、结构体、字符串、映射，其中映射就是键值对，声明语法 <code>Mapping (键数据类型 =&gt; 值数据类型) 变量名;</code>，读值语法 <code>变量名[序号]</code>，写值语法变量名 <code>[序号] = &lt;&lt;值&gt;&gt;</code>，映射类型调用是要gas的所以使用时要避免迭代和循环</li>\n<li>字面量：不同字面量的表示方法不同，整型没什么，字符串型单引号或者双引号，地址型0x开头，十六进制数用hex开头并用双引号包裹 <code>hex”1A2B3F”</code>，十进制小数直接点号即可 <code>3.14</code></li>\n</ol>\n<p>运算符：</p>\n<ol>\n<li>比较：相等 <code>==</code>，不相等 <code>!=</code>，大于 <code>&gt;</code>，小于 <code>&lt;</code>，大于等于 <code>&gt;=</code>，小于等于 <code>&lt;=</code></li>\n<li>逻辑：与 <code>&amp;&amp;</code>或 <code>||</code>非 <code>!</code></li>\n</ol>\n<p>程序结构：</p>\n<ol>\n<li>选择：<code>if(条件句1) &#123;xxx&#125;   else if(条件句2) &#123;xxx&#125;   else&#123;xxx&#125;</code></li>\n<li>循环：<code>while(条件句) &#123;xxx&#125;</code>，<code>for(初始化;条件句;自增减) &#123;xxx&#125;</code>，<code>do&#123;xxx&#125;    while(条件句)</code></li>\n<li>break和continue：和C一样</li>\n</ol>\n<p>返回：</p>\n<ol>\n<li>如果函数要有返回值，必须在形参和大括号之间写 <code>returns(返回值类型)</code>，注意有个s，然后在函数体内写return语句 <code>return 变量名;</code>，第二个方法可以允许写多个返回值，这叫元组返回</li>\n</ol>\n<p>面向对象：</p>\n<ol>\n<li>封装：Solidity通过可见性修改器，即限定符来实现封装</li>\n<li>继承：继承会继承所有public和internal的状态变量、函数、修改器、事件，写法是写合约的时候使用is关键字 <code>contract 子合约名 is 父合约名&#123;xxx&#125;</code>，多重继承遵循C3线性化顺序，Solidity合约里所有函数全部具有虚函数性，对没有按默认顺序继承的合约一样可以用 <code>合约名.函数名()</code>来调用函数</li>\n<li>多态：多态即重载，Solidity分函数和合约两种重载，函数多态写法直接写同名函数即可，合约多态实现方法是合约继承</li>\n</ol>\n<p>构造函数：想重写构造函数直接写一个和合约名一样的函数即可，但限定符只能是public或internal，构造函数没有返回值，只在合约部署的时候执行一次【这里也是Solidity和其它计算机语言的区别，前者编译的是区块链上永久存在的字节码，其它语言编译的只是运行的时候用完就丢的二进制编码】。0.4.22之后这种写法被废除，必须使用构造器constructor(),写法是 <code>constructor(…) &#123; … &#125;</code>，不用function，中间也可以加函数限定符public, internal，但是如果合约是继承自父合约，“在派生合约构造函数中添加基合约所需要的参数”，写法是 <code>constructor(…)constructor2(…) &#123; … &#125;</code>，其中 <code>constructor2(…)</code>是父合约的构造函数。两个构造函数都需要指定可见性限定符。</p>\n<p>错误处理：以前只用throw语句进行错误处理，会消耗掉所有gas然后把状态回退到刚初始化，所以4.10版本之后被标记过时，现在使用几个错误处理函数，require函数写在函数体的刚开始，语法 <code>require(条件句);</code>条件句为true接着运行false抛出异常；assert函数语法和作用和require函数一样，用于require函数之后的第二次再判断，但是和throw语句一样会消耗掉所有gas然后把状态回退到刚初始化；revert()语法 <code>assert();</code>作用类似循环体中的berak语句，一般配合if条件判断，满足条件就直接break整个函数体</p>\n<hr>\n<h2 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a><strong>语言特性</strong></h2><ol>\n<li><p>以太坊自然规范注释法：格式为 <code>/// @xxx 注释</code>文本，其中 <code>xxx</code>如果是title意为标题，author意为作者，notice用于解释函数或者合约的作用，dev用于向开发者诉说的话，param用于解释关于形参的信息，return用于解释返回值的信息</p>\n</li>\n<li><p>var类型：隐式类型变量，只能在函数体中使用，会通知编译器为第一次赋予它的值的类型，一旦通知不可修改</p>\n</li>\n<li><p>Solidity不强制规定变量声明和使用的顺序，因为编译器生成字节码的时候第一步会先提取所有变量声明放在顶部</p>\n</li>\n<li><p>数据位置：因为Solidity运行在EVM虚拟机上，所以变量有不同存放位置，状态变量放在存储位置，其永久存在所有节点上，内存位置是所有函数都能访问的本地内存，函数执行完就销毁，传参放在调用位置上，使用以太坊指令集的变量和中间值会存在堆栈位置</p>\n</li>\n<li><p>fallback函数：无名函数，如果调用的函数根本不存在或合约没有收到任何数据例如只收到打过来的以太币时触发，没有名字，无法显式调用，没有传参和返回值，默认消耗2300gas，如果要用它接收以太币要标记payable</p>\n</li>\n<li><p>修改器：修改器专门承接判断某些值以及要不要执行函数这些工作，语法 <code>modifier 修改器名()&#123;xxx&#125;</code>，一般里面接if判断句，其中有个语法糖，<code>_</code>意为替代目标函数，使用修改器写函数首部的形参和大括号之间，语法 <code>function 函数名() 修改器名() 限定符 &#123;xxx&#125;</code></p>\n</li>\n<li><p>事件：链上有一个特殊数据结构叫日志，专门用来记载区块中发生的事件信息，智能合约不能访问，其提供一个事件接口，事件是一个触发器，条件发声就存储抛出异常到交易日志中，声明语法 <code>event 事件名(抛出异常);</code>，其中抛出异常可以是数据类型或者字符串，事件声明之后在整个合约范围内有效，使用方法在函数里写 <code>事件名(所要抛出异常);</code>即可</p>\n</li>\n<li><p>隐式转换：支持从较小类型到较大类型的隐式转换，直接赋值即可</p>\n</li>\n<li><p>显式转换：不鼓励显式转换因为容易出错，但是提供几个显式转换函数，ConvertionExplicitUINT8toUINT256函数、ConvertionExplicitUINT256toUINT8函数、ConvertionExplicitUINT256toUINT81函数分别按函数名字面意思提供从前到后的类型转换，还有一个conversions函数不太明白</p>\n</li>\n<li><p>散列函数：solidity提供散列函数将输入转换为散列，SHA2算法是sha256()，SHA3算法是sha3()和keccak256()，后者是SHA3算法的别名。语法 <code>sha256(”r”)</code>、<code>sha3(”r”)</code>和 <code>keccak256(”r”)</code></p>\n</li>\n<li><p>地址数据类型：外部地址和合约地址都有5个全局函数和一个余额成员变量</p>\n<ol>\n<li>ddress.transfer(uint256 amount)：向指定地址发送以wei做单位的以太币，返回成功与否的布尔值</li>\n<li>address.send(uint256 amount)：向指定地址发送以wei做单位的以太币，返回成功与否的布尔值</li>\n<li>address.call(…)：调用低级别的call函数，返回成功与否的布尔值</li>\n<li>address.callcode(…)：调用低级别的callcode函数，返回成功与否的布尔值</li>\n<li>address.delegatecall(…)：调用低级别的delegatecall函数，返回成功与否的布尔值</li>\n</ol>\n</li>\n<li><p>合约数据类型：合约数据类型提供一个this成员和selfdestruct函数，接收一个地址把钱全部转过去</p>\n</li>\n<li><p>合约内调用已创建合约的两种方法：如果是同一个文件里写了两个合约，第二个合约里用new创建一个新的对象，语法 <code>Hellw world myobj = new Helloworld();</code>。如果想要调用已经部署过的合约，直接把这个合约的地址赋值给地址类型数据即可。</p>\n</li>\n<li><p>方法覆盖对同名函数追加view关键字，这个关键字意思是承诺不修改状态，语法 <code>function 函数名() public view returns(uint)&#123; &#125;</code></p>\n</li>\n<li><p>抽象合约：抽象合约的用途只有被继承，无法创建合约实例，语法是依旧正常的合约结构，但是所有的函数都没有大括号的函数体只有一个分号，例如 <code>function 函数名(形参) public;</code></p>\n</li>\n<li><p>截断模式和检查模式：0.8的新特性，前者使用unchecked关键字后者使用checked，在算数运算中，后者会对运算结果进行溢出（超过数据结构定义的数字上下限）检查，如果超过就抛出异常然后回退，而前者不会，所以前者需要调用第三方库如openzeppelin的safemath.sol。语法上是 <code>unchecked&#123;xxx运算语句&#125;</code>和 <code>checked&#123;xxx运算语句&#125;</code></p>\n</li>\n<li><p>内联汇编：编译的时候solc会优化二进制代码，但有时候尤其是循环语句的时候这种优化是负优化，使用内联汇编语句可以阻止优化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assembly&#123;</span><br><span class=\"line\"> 内联汇编语句</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>abi编码函数：</p>\n</li>\n<li><p>区块和交易全局变量：因为合约无权访问整个账本所以提供一些关于区块和交易的全局变量以供调用，并且没有在合约当中显式声明</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>变量名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>block.coinbase(address)</td>\n<td>与etherbase相同，指矿工的地址</td>\n</tr>\n<tr>\n<td>block.difficulty(uint)</td>\n<td>当前区块难度等级</td>\n</tr>\n<tr>\n<td>block.gaslimit(unit)</td>\n<td>当前区块gas限制</td>\n</tr>\n<tr>\n<td>block.number(unit)</td>\n<td>顺序表示的区块编号</td>\n</tr>\n<tr>\n<td>block.timestamp(unit)</td>\n<td>区块创建时间</td>\n</tr>\n<tr>\n<td>msg.data(bytes)</td>\n<td>与创建交易相关的函数及其参考信息</td>\n</tr>\n<tr>\n<td>msg.gas(uint)</td>\n<td>执行交易后未花费gas</td>\n</tr>\n<tr>\n<td>msg.sender(address)</td>\n<td>调用函数的地址</td>\n</tr>\n<tr>\n<td>msg.sig(bytes4)</td>\n<td>函数标识符使用散列函数签名后的前四个字节</td>\n</tr>\n<tr>\n<td>msg.value(uint)</td>\n<td>随交易发送的以太币数量，以wei作为单位</td>\n</tr>\n<tr>\n<td>now(uint)</td>\n<td>当前时间</td>\n</tr>\n<tr>\n<td>tx.gasprice(uint)</td>\n<td>调用者准备支付的每一种gas单位下的gas价格</td>\n</tr>\n<tr>\n<td>tx.origin(address)</td>\n<td>交易的发起者</td>\n</tr>\n<tr>\n<td>block.blockhash(uint blockNumber)</td>\n<td>包含交易的区块散列值</td>\n</tr>\n<tr>\n<td>returns(bytes32)</td>\n<td>包含交易的区块散列值</td>\n</tr>\n<tr>\n<td>string.concat</td>\n<td>0.8.13版本的新全局变量（可能有误）</td>\n</tr>\n<tr>\n<td>abi.encodeCall</td>\n<td>0.8.13版本的新全局变量（可能有误）</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常规语法\"><a href=\"#常规语法\" class=\"headerlink\" title=\"常规语法\"></a><strong>常规语法</strong></h2><p>文件结构：【预编译导入，合约库接口】</p>\n<ol>\n<li>预编译：指定编译器版本，语法为 <code>pragma Solidity ^0.4.19;</code>，^是可选的脱字符号，意为这是此主版本号的最新版本</li>\n<li>导入：导入的是其它solidity文件，语法 <code>import ‘xxx.sol’;</code>，还可以用“&#x2F;”引用目录，“.”符号引用当前目录，“..”引用父目录</li>\n<li>合约：<code>contract 合约名 [is 继承语句] &#123;xxx&#125;</code></li>\n<li>库：<code>library 库名 &#123;xxx&#125;</code></li>\n<li>接口：<code>interface 接口名&#123;xxx&#125;</code></li>\n<li>函数：<code>function 函数名([形参表列]) 限定符 [return语句] &#123;xxx&#125;</code></li>\n</ol>\n<p>注释：</p>\n<ol>\n<li>单行注释 <code>//</code>，多行注释 <code>/* */</code></li>\n</ol>\n<p>自定义数据类型：</p>\n<ol>\n<li>结构体：语法为 <code>struct 结构体名&#123;数据类型 变量名; \\n 数据类型 变量名; &#125;</code>，实例化一个结构体语法是 <code>结构体名 = 变量名(”ritesh”,10,true, new unit[](3));</code></li>\n</ol>\n<p>基本数据类型：</p>\n<ol>\n<li>概述：基本数据类型还分为值类型和引用类型两种，前者符号memory后者storage，但不是运行在pc里而是EVM网络，值类型存在节点计算机内存里，用完就销毁，索引的时候也是和其它计算机语言一样根据标识符寻找，引用类型经常又称状态变量【应该是借用自函数式编程里面的类似概念】，存储在区块链上网络上，永久存在，根据指针索引。即函数外部声明的变量存储在stoage，内部变量存储在memory</li>\n<li>对引用类型的变量（数组、结构体、字符串、映射），在声明的时候必须指定存储位置</li>\n<li>值类型：<ol>\n<li>布尔型 <code>boll</code>，不能转换为整型，默认false</li>\n<li>无符整型 <code>uint</code>和有符整型 <code>int</code>按8递加，例如最低 <code>uint 8</code>，最高 <code>uint 256</code>，int同</li>\n<li>地址类型 <code>address</code>，20字节，有隐式的balance属性和发送以太币的transfer函数、返回发送以太币是否成功布尔值的send函数、调用合约函数的Call函数、DelegateCall函数、Callcode函数</li>\n<li>数组类型可以任意数据类型，声明语法 <code>数据类型[数量] 数组名</code>，初始化方法在声明的时候 <code>int[5] age = [1,2,3,4,5];</code>，或者先声明 <code>int[5] = 数组名;</code>，再写 <code>数组名 = [1,2,3,4,5];</code>。<ol>\n<li>动态数组：声明的时候不写有多少元素个数 <code>int[] 数组名;</code>，初始化的时候用new关键字 <code>数组名 = new int[] (5);</code></li>\n<li>字节数组：可以容纳任意数量字符的动态数组，声明语法和初始化语法与动态数组一样 <code>bytes[] 数组名;</code>和 <code>数组名 = new bytes[] (5);</code>另外有一种初始化语法是声明语句之后使用赋值语句 <code>数组名 = “xxx”;</code></li>\n<li>字符串数组</li>\n<li>数组里有三个隐式成员属性，但不是每种数组都具有，index只有字符串数组没有，但只有动态数组、固定数组、字节型数组支持写入指定元素index属性，push只有动态数组支持，length只有字符串数组没有，但只有动态数组和字节型数组支持写入此属性</li>\n</ol>\n</li>\n<li>枚举类型声明语法 <code>enum 变量名&#123;枚举值1,枚举值2&#125;</code>，初始化语法太抽象了没看懂，枚举类型不能在函数中声明只能在合约中声明</li>\n<li>字节类型声明的时候要写多少个字节数量，示例 <code>bytes 变量名;</code>，默认值0x00，如果byte1也可以用byte表示，可以用按位操作符</li>\n<li>枚举类型至少声明一个枚举值，第一个编号0，第二个编号1，以此类推</li>\n</ol>\n</li>\n<li>引用类型有数组、结构体、字符串、映射，其中映射就是键值对，声明语法 <code>Mapping (键数据类型 =&gt; 值数据类型) 变量名;</code>，读值语法 <code>变量名[序号]</code>，写值语法变量名 <code>[序号] = &lt;&lt;值&gt;&gt;</code>，映射类型调用是要gas的所以使用时要避免迭代和循环</li>\n<li>字面量：不同字面量的表示方法不同，整型没什么，字符串型单引号或者双引号，地址型0x开头，十六进制数用hex开头并用双引号包裹 <code>hex”1A2B3F”</code>，十进制小数直接点号即可 <code>3.14</code></li>\n</ol>\n<p>运算符：</p>\n<ol>\n<li>比较：相等 <code>==</code>，不相等 <code>!=</code>，大于 <code>&gt;</code>，小于 <code>&lt;</code>，大于等于 <code>&gt;=</code>，小于等于 <code>&lt;=</code></li>\n<li>逻辑：与 <code>&amp;&amp;</code>或 <code>||</code>非 <code>!</code></li>\n</ol>\n<p>程序结构：</p>\n<ol>\n<li>选择：<code>if(条件句1) &#123;xxx&#125;   else if(条件句2) &#123;xxx&#125;   else&#123;xxx&#125;</code></li>\n<li>循环：<code>while(条件句) &#123;xxx&#125;</code>，<code>for(初始化;条件句;自增减) &#123;xxx&#125;</code>，<code>do&#123;xxx&#125;    while(条件句)</code></li>\n<li>break和continue：和C一样</li>\n</ol>\n<p>返回：</p>\n<ol>\n<li>如果函数要有返回值，必须在形参和大括号之间写 <code>returns(返回值类型)</code>，注意有个s，然后在函数体内写return语句 <code>return 变量名;</code>，第二个方法可以允许写多个返回值，这叫元组返回</li>\n</ol>\n<p>面向对象：</p>\n<ol>\n<li>封装：Solidity通过可见性修改器，即限定符来实现封装</li>\n<li>继承：继承会继承所有public和internal的状态变量、函数、修改器、事件，写法是写合约的时候使用is关键字 <code>contract 子合约名 is 父合约名&#123;xxx&#125;</code>，多重继承遵循C3线性化顺序，Solidity合约里所有函数全部具有虚函数性，对没有按默认顺序继承的合约一样可以用 <code>合约名.函数名()</code>来调用函数</li>\n<li>多态：多态即重载，Solidity分函数和合约两种重载，函数多态写法直接写同名函数即可，合约多态实现方法是合约继承</li>\n</ol>\n<p>构造函数：想重写构造函数直接写一个和合约名一样的函数即可，但限定符只能是public或internal，构造函数没有返回值，只在合约部署的时候执行一次【这里也是Solidity和其它计算机语言的区别，前者编译的是区块链上永久存在的字节码，其它语言编译的只是运行的时候用完就丢的二进制编码】。0.4.22之后这种写法被废除，必须使用构造器constructor(),写法是 <code>constructor(…) &#123; … &#125;</code>，不用function，中间也可以加函数限定符public, internal，但是如果合约是继承自父合约，“在派生合约构造函数中添加基合约所需要的参数”，写法是 <code>constructor(…)constructor2(…) &#123; … &#125;</code>，其中 <code>constructor2(…)</code>是父合约的构造函数。两个构造函数都需要指定可见性限定符。</p>\n<p>错误处理：以前只用throw语句进行错误处理，会消耗掉所有gas然后把状态回退到刚初始化，所以4.10版本之后被标记过时，现在使用几个错误处理函数，require函数写在函数体的刚开始，语法 <code>require(条件句);</code>条件句为true接着运行false抛出异常；assert函数语法和作用和require函数一样，用于require函数之后的第二次再判断，但是和throw语句一样会消耗掉所有gas然后把状态回退到刚初始化；revert()语法 <code>assert();</code>作用类似循环体中的berak语句，一般配合if条件判断，满足条件就直接break整个函数体</p>\n<hr>\n<h2 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a><strong>语言特性</strong></h2><ol>\n<li><p>以太坊自然规范注释法：格式为 <code>/// @xxx 注释</code>文本，其中 <code>xxx</code>如果是title意为标题，author意为作者，notice用于解释函数或者合约的作用，dev用于向开发者诉说的话，param用于解释关于形参的信息，return用于解释返回值的信息</p>\n</li>\n<li><p>var类型：隐式类型变量，只能在函数体中使用，会通知编译器为第一次赋予它的值的类型，一旦通知不可修改</p>\n</li>\n<li><p>Solidity不强制规定变量声明和使用的顺序，因为编译器生成字节码的时候第一步会先提取所有变量声明放在顶部</p>\n</li>\n<li><p>数据位置：因为Solidity运行在EVM虚拟机上，所以变量有不同存放位置，状态变量放在存储位置，其永久存在所有节点上，内存位置是所有函数都能访问的本地内存，函数执行完就销毁，传参放在调用位置上，使用以太坊指令集的变量和中间值会存在堆栈位置</p>\n</li>\n<li><p>fallback函数：无名函数，如果调用的函数根本不存在或合约没有收到任何数据例如只收到打过来的以太币时触发，没有名字，无法显式调用，没有传参和返回值，默认消耗2300gas，如果要用它接收以太币要标记payable</p>\n</li>\n<li><p>修改器：修改器专门承接判断某些值以及要不要执行函数这些工作，语法 <code>modifier 修改器名()&#123;xxx&#125;</code>，一般里面接if判断句，其中有个语法糖，<code>_</code>意为替代目标函数，使用修改器写函数首部的形参和大括号之间，语法 <code>function 函数名() 修改器名() 限定符 &#123;xxx&#125;</code></p>\n</li>\n<li><p>事件：链上有一个特殊数据结构叫日志，专门用来记载区块中发生的事件信息，智能合约不能访问，其提供一个事件接口，事件是一个触发器，条件发声就存储抛出异常到交易日志中，声明语法 <code>event 事件名(抛出异常);</code>，其中抛出异常可以是数据类型或者字符串，事件声明之后在整个合约范围内有效，使用方法在函数里写 <code>事件名(所要抛出异常);</code>即可</p>\n</li>\n<li><p>隐式转换：支持从较小类型到较大类型的隐式转换，直接赋值即可</p>\n</li>\n<li><p>显式转换：不鼓励显式转换因为容易出错，但是提供几个显式转换函数，ConvertionExplicitUINT8toUINT256函数、ConvertionExplicitUINT256toUINT8函数、ConvertionExplicitUINT256toUINT81函数分别按函数名字面意思提供从前到后的类型转换，还有一个conversions函数不太明白</p>\n</li>\n<li><p>散列函数：solidity提供散列函数将输入转换为散列，SHA2算法是sha256()，SHA3算法是sha3()和keccak256()，后者是SHA3算法的别名。语法 <code>sha256(”r”)</code>、<code>sha3(”r”)</code>和 <code>keccak256(”r”)</code></p>\n</li>\n<li><p>地址数据类型：外部地址和合约地址都有5个全局函数和一个余额成员变量</p>\n<ol>\n<li>ddress.transfer(uint256 amount)：向指定地址发送以wei做单位的以太币，返回成功与否的布尔值</li>\n<li>address.send(uint256 amount)：向指定地址发送以wei做单位的以太币，返回成功与否的布尔值</li>\n<li>address.call(…)：调用低级别的call函数，返回成功与否的布尔值</li>\n<li>address.callcode(…)：调用低级别的callcode函数，返回成功与否的布尔值</li>\n<li>address.delegatecall(…)：调用低级别的delegatecall函数，返回成功与否的布尔值</li>\n</ol>\n</li>\n<li><p>合约数据类型：合约数据类型提供一个this成员和selfdestruct函数，接收一个地址把钱全部转过去</p>\n</li>\n<li><p>合约内调用已创建合约的两种方法：如果是同一个文件里写了两个合约，第二个合约里用new创建一个新的对象，语法 <code>Hellw world myobj = new Helloworld();</code>。如果想要调用已经部署过的合约，直接把这个合约的地址赋值给地址类型数据即可。</p>\n</li>\n<li><p>方法覆盖对同名函数追加view关键字，这个关键字意思是承诺不修改状态，语法 <code>function 函数名() public view returns(uint)&#123; &#125;</code></p>\n</li>\n<li><p>抽象合约：抽象合约的用途只有被继承，无法创建合约实例，语法是依旧正常的合约结构，但是所有的函数都没有大括号的函数体只有一个分号，例如 <code>function 函数名(形参) public;</code></p>\n</li>\n<li><p>截断模式和检查模式：0.8的新特性，前者使用unchecked关键字后者使用checked，在算数运算中，后者会对运算结果进行溢出（超过数据结构定义的数字上下限）检查，如果超过就抛出异常然后回退，而前者不会，所以前者需要调用第三方库如openzeppelin的safemath.sol。语法上是 <code>unchecked&#123;xxx运算语句&#125;</code>和 <code>checked&#123;xxx运算语句&#125;</code></p>\n</li>\n<li><p>内联汇编：编译的时候solc会优化二进制代码，但有时候尤其是循环语句的时候这种优化是负优化，使用内联汇编语句可以阻止优化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assembly&#123;</span><br><span class=\"line\"> 内联汇编语句</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>abi编码函数：</p>\n</li>\n<li><p>区块和交易全局变量：因为合约无权访问整个账本所以提供一些关于区块和交易的全局变量以供调用，并且没有在合约当中显式声明</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>变量名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>block.coinbase(address)</td>\n<td>与etherbase相同，指矿工的地址</td>\n</tr>\n<tr>\n<td>block.difficulty(uint)</td>\n<td>当前区块难度等级</td>\n</tr>\n<tr>\n<td>block.gaslimit(unit)</td>\n<td>当前区块gas限制</td>\n</tr>\n<tr>\n<td>block.number(unit)</td>\n<td>顺序表示的区块编号</td>\n</tr>\n<tr>\n<td>block.timestamp(unit)</td>\n<td>区块创建时间</td>\n</tr>\n<tr>\n<td>msg.data(bytes)</td>\n<td>与创建交易相关的函数及其参考信息</td>\n</tr>\n<tr>\n<td>msg.gas(uint)</td>\n<td>执行交易后未花费gas</td>\n</tr>\n<tr>\n<td>msg.sender(address)</td>\n<td>调用函数的地址</td>\n</tr>\n<tr>\n<td>msg.sig(bytes4)</td>\n<td>函数标识符使用散列函数签名后的前四个字节</td>\n</tr>\n<tr>\n<td>msg.value(uint)</td>\n<td>随交易发送的以太币数量，以wei作为单位</td>\n</tr>\n<tr>\n<td>now(uint)</td>\n<td>当前时间</td>\n</tr>\n<tr>\n<td>tx.gasprice(uint)</td>\n<td>调用者准备支付的每一种gas单位下的gas价格</td>\n</tr>\n<tr>\n<td>tx.origin(address)</td>\n<td>交易的发起者</td>\n</tr>\n<tr>\n<td>block.blockhash(uint blockNumber)</td>\n<td>包含交易的区块散列值</td>\n</tr>\n<tr>\n<td>returns(bytes32)</td>\n<td>包含交易的区块散列值</td>\n</tr>\n<tr>\n<td>string.concat</td>\n<td>0.8.13版本的新全局变量（可能有误）</td>\n</tr>\n<tr>\n<td>abi.encodeCall</td>\n<td>0.8.13版本的新全局变量（可能有误）</td>\n</tr>\n</tbody></table>\n"},{"title":"一道题理解动态规划、BFS、DFS","date":"2023-04-06T12:19:44.000Z","auto_excerpt":"true","_content":"## **题目**\n\n这里有一道能同时被动归、BFS、DFS解决的问题：\n\n> 给定一个m*n的网格和一个机器人的初始位置（0,0），机器人每次只能向下或者向右移动一步，问有多少种不同的路径可以到达网格右下角？\n\n---\n\n## **动态规划**\n\n自然语言过程：定义二维表，初始化，两个for，return\n\n口诀：表，初，for，return【表初 for return】\n\n```java\npublic int uniquePaths(int m, int n) {\n    //定义状态数组dp，dp[i][j]表示从(0,0)到(i,j)的不同路径数\n    int[][] dp = new int[m][n];\n  \n    //初始化第一行和第一列，因为只能向右或向下走，所以这些位置的路径数都是1\n    for(int i = 0; i < m; i++){\n        dp[i][0] = 1;\n    }\n    for(int j = 0; j < n; j++){\n        dp[0][j] = 1;\n    }\n  \n    //动态规划求解\n    for(int i = 1; i < m; i++){\n        for(int j = 1; j < n; j++){\n            dp[i][j] = dp[i-1][j] + dp[i][j-1];\n        }\n    }\n  \n    //返回最终结果，即从(0,0)到(m-1,n-1)的路径数\n    return dp[m-1][n-1];\n}\n```\n\n---\n\n## **BFS**\n\nBFS是用队列加塞的方式顺带记录遍历探索的分支\n\n自然语言过程：创建队列，添加起点，初始化计数器，非队空时循环，弹一个我就末尾计数，或者探索这个的周围并加塞\n\n口诀：声明队列，起点加塞，计数器，非空循环，弹一个计数或者探索周围\n\n```java\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class BFS {\n    // 定义一个方法，用来计算机器人在网格中从起点走到终点的路径数量\n    public int uniquePaths(int m, int n) {\n        // 创建一个队列，用来存储位置信息\n        Queue<int[]> queue = new LinkedList<>();\n        // 将起点(0,0)添加到队列中\n        queue.offer(new int[]{0, 0});\n        // 定义一个变量，用来计数路径的数量\n        int count = 0;\n        // 当队列不为空时循环，即还有位置未被搜索\n        while (!queue.isEmpty()) {\n            // 取出队列中的一个位置信息\n            int[] cur = queue.poll();\n            // 如果该位置是终点，则将路径计数器加1\n            if (cur[0] == m - 1 && cur[1] == n - 1) {\n                count++;\n            } else {\n                // 否则，将当前位置向下或向右移动，并将可能到达的位置添加到队列中\n                if (cur[0] + 1 < m) {\n                    queue.offer(new int[]{cur[0] + 1, cur[1]});\n                }\n                if (cur[1] + 1 < n) {\n                    queue.offer(new int[]{cur[0], cur[1] + 1});\n                }\n            }\n        }\n        // 返回计数器中存储的路径数量\n        return count;\n    }\n\n    // 主方法，用于测试uniquePaths方法\n    public static void main(String[] args) {\n        // 创建一个BFS对象\n        BFS solution = new BFS();\n        // 输出机器人在7 x 9网格上移动时到达右下角的不同路径数量\n        System.out.println(solution.uniquePaths(7,9));\n    }\n}\n```\n\n---\n\n## **DFS**\n\nDFS用递归的方式，在栈中记录下探索的分支\n\n自然语言过程：dfs函数，形参输入起点，如果到终点就计数且return，如果往下或者往右不越界就dfs下一个或者右一个\n\n定义dfs函数：以形参做起点，如果终点计数加return，不越界就dfs下一个位置\n\n```java\npublic class DFS{\n    // 定义网格的行数和列数\n    private int m, n;\n    // 定义计数器，用来记录不同路径的数量\n    private int count = 0;\n\n    public int uniquePaths(int m, int n) {\n        // 初始化网格的行数和列数\n        this.m = m;\n        this.n = n;\n        // 从起点（0,0）开始搜索\n        dfs(0, 0);\n        // 返回最终结果\n        return count;\n    }\n\n    private void dfs(int x, int y) {\n        // 如果到达终点，计数器加1\n        if (x == m - 1 && y == n - 1) {\n            count++;\n            return;\n        }\n\n        // 向右移动一步，如果没有越界，继续搜索\n        if (x + 1 < m) {\n            dfs(x + 1, y);\n        }\n\n        // 向下移动一步，如果没有越界，继续搜索\n        if (y + 1 < n) {\n            dfs(x, y + 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        DFS solution = new DFS();\n        System.out.println(solution.uniquePaths(4,11));\n    }\n}\n```\n\nBFS是弹出一个然后探索这个的周围并加塞，DFS是达不到就递归\n","source":"_posts/算法/一道题理解动态规划、BFS、DFS.md","raw":"---\ntitle: 一道题理解动态规划、BFS、DFS\ndate: 2023-04-06 20:19:44\ntags: \ncategories:\n  - - 算法\nauto_excerpt: \"true\"\n---\n## **题目**\n\n这里有一道能同时被动归、BFS、DFS解决的问题：\n\n> 给定一个m*n的网格和一个机器人的初始位置（0,0），机器人每次只能向下或者向右移动一步，问有多少种不同的路径可以到达网格右下角？\n\n---\n\n## **动态规划**\n\n自然语言过程：定义二维表，初始化，两个for，return\n\n口诀：表，初，for，return【表初 for return】\n\n```java\npublic int uniquePaths(int m, int n) {\n    //定义状态数组dp，dp[i][j]表示从(0,0)到(i,j)的不同路径数\n    int[][] dp = new int[m][n];\n  \n    //初始化第一行和第一列，因为只能向右或向下走，所以这些位置的路径数都是1\n    for(int i = 0; i < m; i++){\n        dp[i][0] = 1;\n    }\n    for(int j = 0; j < n; j++){\n        dp[0][j] = 1;\n    }\n  \n    //动态规划求解\n    for(int i = 1; i < m; i++){\n        for(int j = 1; j < n; j++){\n            dp[i][j] = dp[i-1][j] + dp[i][j-1];\n        }\n    }\n  \n    //返回最终结果，即从(0,0)到(m-1,n-1)的路径数\n    return dp[m-1][n-1];\n}\n```\n\n---\n\n## **BFS**\n\nBFS是用队列加塞的方式顺带记录遍历探索的分支\n\n自然语言过程：创建队列，添加起点，初始化计数器，非队空时循环，弹一个我就末尾计数，或者探索这个的周围并加塞\n\n口诀：声明队列，起点加塞，计数器，非空循环，弹一个计数或者探索周围\n\n```java\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class BFS {\n    // 定义一个方法，用来计算机器人在网格中从起点走到终点的路径数量\n    public int uniquePaths(int m, int n) {\n        // 创建一个队列，用来存储位置信息\n        Queue<int[]> queue = new LinkedList<>();\n        // 将起点(0,0)添加到队列中\n        queue.offer(new int[]{0, 0});\n        // 定义一个变量，用来计数路径的数量\n        int count = 0;\n        // 当队列不为空时循环，即还有位置未被搜索\n        while (!queue.isEmpty()) {\n            // 取出队列中的一个位置信息\n            int[] cur = queue.poll();\n            // 如果该位置是终点，则将路径计数器加1\n            if (cur[0] == m - 1 && cur[1] == n - 1) {\n                count++;\n            } else {\n                // 否则，将当前位置向下或向右移动，并将可能到达的位置添加到队列中\n                if (cur[0] + 1 < m) {\n                    queue.offer(new int[]{cur[0] + 1, cur[1]});\n                }\n                if (cur[1] + 1 < n) {\n                    queue.offer(new int[]{cur[0], cur[1] + 1});\n                }\n            }\n        }\n        // 返回计数器中存储的路径数量\n        return count;\n    }\n\n    // 主方法，用于测试uniquePaths方法\n    public static void main(String[] args) {\n        // 创建一个BFS对象\n        BFS solution = new BFS();\n        // 输出机器人在7 x 9网格上移动时到达右下角的不同路径数量\n        System.out.println(solution.uniquePaths(7,9));\n    }\n}\n```\n\n---\n\n## **DFS**\n\nDFS用递归的方式，在栈中记录下探索的分支\n\n自然语言过程：dfs函数，形参输入起点，如果到终点就计数且return，如果往下或者往右不越界就dfs下一个或者右一个\n\n定义dfs函数：以形参做起点，如果终点计数加return，不越界就dfs下一个位置\n\n```java\npublic class DFS{\n    // 定义网格的行数和列数\n    private int m, n;\n    // 定义计数器，用来记录不同路径的数量\n    private int count = 0;\n\n    public int uniquePaths(int m, int n) {\n        // 初始化网格的行数和列数\n        this.m = m;\n        this.n = n;\n        // 从起点（0,0）开始搜索\n        dfs(0, 0);\n        // 返回最终结果\n        return count;\n    }\n\n    private void dfs(int x, int y) {\n        // 如果到达终点，计数器加1\n        if (x == m - 1 && y == n - 1) {\n            count++;\n            return;\n        }\n\n        // 向右移动一步，如果没有越界，继续搜索\n        if (x + 1 < m) {\n            dfs(x + 1, y);\n        }\n\n        // 向下移动一步，如果没有越界，继续搜索\n        if (y + 1 < n) {\n            dfs(x, y + 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        DFS solution = new DFS();\n        System.out.println(solution.uniquePaths(4,11));\n    }\n}\n```\n\nBFS是弹出一个然后探索这个的周围并加塞，DFS是达不到就递归\n","slug":"算法/一道题理解动态规划、BFS、DFS","published":1,"updated":"2024-04-14T15:45:21.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnra000ghk8z4com8wjk","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a><strong>题目</strong></h2><p>这里有一道能同时被动归、BFS、DFS解决的问题：</p>\n<blockquote>\n<p>给定一个m*n的网格和一个机器人的初始位置（0,0），机器人每次只能向下或者向右移动一步，问有多少种不同的路径可以到达网格右下角？</p>\n</blockquote>\n<hr>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a><strong>动态规划</strong></h2><p>自然语言过程：定义二维表，初始化，两个for，return</p>\n<p>口诀：表，初，for，return【表初 for return】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义状态数组dp，dp[i][j]表示从(0,0)到(i,j)的不同路径数</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m][n];</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//初始化第一行和第一列，因为只能向右或向下走，所以这些位置的路径数都是1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//动态规划求解</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            dp[i][j] = dp[i-<span class=\"number\">1</span>][j] + dp[i][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//返回最终结果，即从(0,0)到(m-1,n-1)的路径数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"BFS\"><a href=\"#BFS\" class=\"headerlink\" title=\"BFS\"></a><strong>BFS</strong></h2><p>BFS是用队列加塞的方式顺带记录遍历探索的分支</p>\n<p>自然语言过程：创建队列，添加起点，初始化计数器，非队空时循环，弹一个我就末尾计数，或者探索这个的周围并加塞</p>\n<p>口诀：声明队列，起点加塞，计数器，非空循环，弹一个计数或者探索周围</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BFS</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义一个方法，用来计算机器人在网格中从起点走到终点的路径数量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个队列，用来存储位置信息</span></span><br><span class=\"line\">        Queue&lt;<span class=\"type\">int</span>[]&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 将起点(0,0)添加到队列中</span></span><br><span class=\"line\">        queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 定义一个变量，用来计数路径的数量</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 当队列不为空时循环，即还有位置未被搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 取出队列中的一个位置信息</span></span><br><span class=\"line\">            <span class=\"type\">int</span>[] cur = queue.poll();</span><br><span class=\"line\">            <span class=\"comment\">// 如果该位置是终点，则将路径计数器加1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur[<span class=\"number\">0</span>] == m - <span class=\"number\">1</span> &amp;&amp; cur[<span class=\"number\">1</span>] == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 否则，将当前位置向下或向右移动，并将可能到达的位置添加到队列中</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cur[<span class=\"number\">0</span>] + <span class=\"number\">1</span> &lt; m) &#123;</span><br><span class=\"line\">                    queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;cur[<span class=\"number\">0</span>] + <span class=\"number\">1</span>, cur[<span class=\"number\">1</span>]&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cur[<span class=\"number\">1</span>] + <span class=\"number\">1</span> &lt; n) &#123;</span><br><span class=\"line\">                    queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;cur[<span class=\"number\">0</span>], cur[<span class=\"number\">1</span>] + <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回计数器中存储的路径数量</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 主方法，用于测试uniquePaths方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个BFS对象</span></span><br><span class=\"line\">        <span class=\"type\">BFS</span> <span class=\"variable\">solution</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BFS</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 输出机器人在7 x 9网格上移动时到达右下角的不同路径数量</span></span><br><span class=\"line\">        System.out.println(solution.uniquePaths(<span class=\"number\">7</span>,<span class=\"number\">9</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a><strong>DFS</strong></h2><p>DFS用递归的方式，在栈中记录下探索的分支</p>\n<p>自然语言过程：dfs函数，形参输入起点，如果到终点就计数且return，如果往下或者往右不越界就dfs下一个或者右一个</p>\n<p>定义dfs函数：以形参做起点，如果终点计数加return，不越界就dfs下一个位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DFS</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义网格的行数和列数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> m, n;</span><br><span class=\"line\">    <span class=\"comment\">// 定义计数器，用来记录不同路径的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化网格的行数和列数</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.m = m;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.n = n;</span><br><span class=\"line\">        <span class=\"comment\">// 从起点（0,0）开始搜索</span></span><br><span class=\"line\">        dfs(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 返回最终结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果到达终点，计数器加1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == m - <span class=\"number\">1</span> &amp;&amp; y == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 向右移动一步，如果没有越界，继续搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x + <span class=\"number\">1</span> &lt; m) &#123;</span><br><span class=\"line\">            dfs(x + <span class=\"number\">1</span>, y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 向下移动一步，如果没有越界，继续搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y + <span class=\"number\">1</span> &lt; n) &#123;</span><br><span class=\"line\">            dfs(x, y + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DFS</span> <span class=\"variable\">solution</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DFS</span>();</span><br><span class=\"line\">        System.out.println(solution.uniquePaths(<span class=\"number\">4</span>,<span class=\"number\">11</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>BFS是弹出一个然后探索这个的周围并加塞，DFS是达不到就递归</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a><strong>题目</strong></h2><p>这里有一道能同时被动归、BFS、DFS解决的问题：</p>\n<blockquote>\n<p>给定一个m*n的网格和一个机器人的初始位置（0,0），机器人每次只能向下或者向右移动一步，问有多少种不同的路径可以到达网格右下角？</p>\n</blockquote>\n<hr>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a><strong>动态规划</strong></h2><p>自然语言过程：定义二维表，初始化，两个for，return</p>\n<p>口诀：表，初，for，return【表初 for return】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义状态数组dp，dp[i][j]表示从(0,0)到(i,j)的不同路径数</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m][n];</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//初始化第一行和第一列，因为只能向右或向下走，所以这些位置的路径数都是1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//动态规划求解</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            dp[i][j] = dp[i-<span class=\"number\">1</span>][j] + dp[i][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//返回最终结果，即从(0,0)到(m-1,n-1)的路径数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"BFS\"><a href=\"#BFS\" class=\"headerlink\" title=\"BFS\"></a><strong>BFS</strong></h2><p>BFS是用队列加塞的方式顺带记录遍历探索的分支</p>\n<p>自然语言过程：创建队列，添加起点，初始化计数器，非队空时循环，弹一个我就末尾计数，或者探索这个的周围并加塞</p>\n<p>口诀：声明队列，起点加塞，计数器，非空循环，弹一个计数或者探索周围</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BFS</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义一个方法，用来计算机器人在网格中从起点走到终点的路径数量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个队列，用来存储位置信息</span></span><br><span class=\"line\">        Queue&lt;<span class=\"type\">int</span>[]&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 将起点(0,0)添加到队列中</span></span><br><span class=\"line\">        queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 定义一个变量，用来计数路径的数量</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 当队列不为空时循环，即还有位置未被搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 取出队列中的一个位置信息</span></span><br><span class=\"line\">            <span class=\"type\">int</span>[] cur = queue.poll();</span><br><span class=\"line\">            <span class=\"comment\">// 如果该位置是终点，则将路径计数器加1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur[<span class=\"number\">0</span>] == m - <span class=\"number\">1</span> &amp;&amp; cur[<span class=\"number\">1</span>] == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 否则，将当前位置向下或向右移动，并将可能到达的位置添加到队列中</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cur[<span class=\"number\">0</span>] + <span class=\"number\">1</span> &lt; m) &#123;</span><br><span class=\"line\">                    queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;cur[<span class=\"number\">0</span>] + <span class=\"number\">1</span>, cur[<span class=\"number\">1</span>]&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cur[<span class=\"number\">1</span>] + <span class=\"number\">1</span> &lt; n) &#123;</span><br><span class=\"line\">                    queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;cur[<span class=\"number\">0</span>], cur[<span class=\"number\">1</span>] + <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回计数器中存储的路径数量</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 主方法，用于测试uniquePaths方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个BFS对象</span></span><br><span class=\"line\">        <span class=\"type\">BFS</span> <span class=\"variable\">solution</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BFS</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 输出机器人在7 x 9网格上移动时到达右下角的不同路径数量</span></span><br><span class=\"line\">        System.out.println(solution.uniquePaths(<span class=\"number\">7</span>,<span class=\"number\">9</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a><strong>DFS</strong></h2><p>DFS用递归的方式，在栈中记录下探索的分支</p>\n<p>自然语言过程：dfs函数，形参输入起点，如果到终点就计数且return，如果往下或者往右不越界就dfs下一个或者右一个</p>\n<p>定义dfs函数：以形参做起点，如果终点计数加return，不越界就dfs下一个位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DFS</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义网格的行数和列数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> m, n;</span><br><span class=\"line\">    <span class=\"comment\">// 定义计数器，用来记录不同路径的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化网格的行数和列数</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.m = m;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.n = n;</span><br><span class=\"line\">        <span class=\"comment\">// 从起点（0,0）开始搜索</span></span><br><span class=\"line\">        dfs(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 返回最终结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果到达终点，计数器加1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == m - <span class=\"number\">1</span> &amp;&amp; y == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 向右移动一步，如果没有越界，继续搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x + <span class=\"number\">1</span> &lt; m) &#123;</span><br><span class=\"line\">            dfs(x + <span class=\"number\">1</span>, y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 向下移动一步，如果没有越界，继续搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y + <span class=\"number\">1</span> &lt; n) &#123;</span><br><span class=\"line\">            dfs(x, y + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DFS</span> <span class=\"variable\">solution</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DFS</span>();</span><br><span class=\"line\">        System.out.println(solution.uniquePaths(<span class=\"number\">4</span>,<span class=\"number\">11</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>BFS是弹出一个然后探索这个的周围并加塞，DFS是达不到就递归</p>\n"},{"title":"二分查找","date":"2023-04-06T12:19:44.000Z","auto_excerpt":"true","_content":"## **概述**\n\n---\n\n**二分算法解决问题的使用条件**\n\n1. 有序：数据必须是有序的，不管是顺序表还是链，这不必多说\n2. 二段性：二分算法的判断条件必须具有二段性，通常是 “>” 或 “<”，人话说就是可以分为两部分，也可以说“查找的目标元素可以进行比较操作”\n\n> *在算法题中，用二分算法解决问题的充分条件是什么？*\n>\n> 1. 数据具有单调性：二分算法适用于有序数组或者单调性强的问题。在这种情况下，可以通过比较中间值和目标值的大小关系，排除一半的数据。\n> 2. 数据量较大：如果数据量较小，直接遍历整个数组即可。但如果数据量较大，二分算法可以节省大量时间复杂度，使算法效率更高。\n> 3. 没有重复元素：二分算法是基于元素唯一性的。如果存在重复元素，可能会出现一些问题，例如无法确定查找结果的唯一性。\n> 4. 可以随机访问元素：二分算法需要能够随机访问数组中的元素。如果数据结构不支持随机访问，例如链表，二分算法就无法使用。\n\n---\n\n## **模板代码**\n\n题目：\n\n> *一道二分查找题*\n>\n> 题干：满足 N ! 的末尾恰好有 K 个 0 的最小的 N 是多少?如果这样的 *N* 不存在输出 −1。\n>\n> 输入格式：一个整数K\n>\n> 输出格式：一个整数代表答案\n>\n> 样例输入：2\n>\n> 样例输出：10\n\n标准答案：\n\n```java\nimport java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n \npublic class Main {\n    //求阶乘末尾0的个数其实就是求阶乘因子中5的个数\n    static long calc(long x) {\n        long res = 0;\n        while(x!=0) {\n            res=res+x/5;\n            x/=5;\n        }\n        return res;\n    }\n  \n    public static void main(String[] args) {\n        //二分查找\n        Scanner scanner=new Scanner(System.in);\n        long k=scanner.nextLong();\n        long l=1,r=Long.MAX_VALUE-5;//l为最左边，r为最右边\n    \n        while(l<r) {\n            long mid=(l+r)/2;\n            if(k<=calc(mid)) {\n                r=mid;\n            }else {\n                l=mid+1;\n            }\n        }\n        if(calc(r)!=k) {\n            System.out.print(-1);\n        }else {\n            System.out.print(r);\n        }\n    \n    }\n}\n```\n\n答案代码中，关于二分查找的分析：\n\n```java\n//二分查找规定要求f(x)中的x是有序的\n\n//规定一个最小值和最大值的指针，但要注意后续两者相加后是否会超过基本数据类型范围上限\n//在此题中，l为最左边下标，r为最右边下标\nlong l=1,r=Long.MAX_VALUE-5;\n\n//当左下标小于右下标时循环\nwhile(l<r) {\n\t//每次循环之前算出中下标\n\tlong mid=(l+r)/2;\n\n\t//如果中下标的值，在题目要求中偏小，把左下标的值更新为中下标\n\tif(k<=calc(mid)) {\n\tr=mid;\n\t}else { //如果偏大，把右下标的值，更新为左下标\n\tl=mid+1;\n\t}\n}\n\n```\n\n---\n\n## **关于被查找的数组元素总数奇偶性的理解**\n\nGPT关于被查找的数组元素个数奇偶性的理解是：\n\n一句话就是，以上模板无论数组元素个数是奇是偶都适用，不过当元素个数为奇则最后只会剩下一个元素没有争议；元素个数为偶时最后剩下两个元素，两者都有可能是要找的目标\n\n> 这个二分查找算法是适用于所有元素个数为正整数的有序数组，无论数组元素个数是奇数还是偶数都可以使用这个模板。\n> 对于奇数个元素的数组，最后剩下的中间元素就是要查找的元素；\n> 对于偶数个元素的数组，则最后剩下的两个中间元素中任意一个都可能是要查找的元素。\n","source":"_posts/算法/二分查找.md","raw":"---\ntitle: 二分查找\ndate: 2023-04-06 20:19:44\ntags: \ncategories:\n  - - 算法\nauto_excerpt: \"true\"\n---\n## **概述**\n\n---\n\n**二分算法解决问题的使用条件**\n\n1. 有序：数据必须是有序的，不管是顺序表还是链，这不必多说\n2. 二段性：二分算法的判断条件必须具有二段性，通常是 “>” 或 “<”，人话说就是可以分为两部分，也可以说“查找的目标元素可以进行比较操作”\n\n> *在算法题中，用二分算法解决问题的充分条件是什么？*\n>\n> 1. 数据具有单调性：二分算法适用于有序数组或者单调性强的问题。在这种情况下，可以通过比较中间值和目标值的大小关系，排除一半的数据。\n> 2. 数据量较大：如果数据量较小，直接遍历整个数组即可。但如果数据量较大，二分算法可以节省大量时间复杂度，使算法效率更高。\n> 3. 没有重复元素：二分算法是基于元素唯一性的。如果存在重复元素，可能会出现一些问题，例如无法确定查找结果的唯一性。\n> 4. 可以随机访问元素：二分算法需要能够随机访问数组中的元素。如果数据结构不支持随机访问，例如链表，二分算法就无法使用。\n\n---\n\n## **模板代码**\n\n题目：\n\n> *一道二分查找题*\n>\n> 题干：满足 N ! 的末尾恰好有 K 个 0 的最小的 N 是多少?如果这样的 *N* 不存在输出 −1。\n>\n> 输入格式：一个整数K\n>\n> 输出格式：一个整数代表答案\n>\n> 样例输入：2\n>\n> 样例输出：10\n\n标准答案：\n\n```java\nimport java.util.Scanner;\n// 1:无需package\n// 2: 类名必须Main, 不可修改\n \npublic class Main {\n    //求阶乘末尾0的个数其实就是求阶乘因子中5的个数\n    static long calc(long x) {\n        long res = 0;\n        while(x!=0) {\n            res=res+x/5;\n            x/=5;\n        }\n        return res;\n    }\n  \n    public static void main(String[] args) {\n        //二分查找\n        Scanner scanner=new Scanner(System.in);\n        long k=scanner.nextLong();\n        long l=1,r=Long.MAX_VALUE-5;//l为最左边，r为最右边\n    \n        while(l<r) {\n            long mid=(l+r)/2;\n            if(k<=calc(mid)) {\n                r=mid;\n            }else {\n                l=mid+1;\n            }\n        }\n        if(calc(r)!=k) {\n            System.out.print(-1);\n        }else {\n            System.out.print(r);\n        }\n    \n    }\n}\n```\n\n答案代码中，关于二分查找的分析：\n\n```java\n//二分查找规定要求f(x)中的x是有序的\n\n//规定一个最小值和最大值的指针，但要注意后续两者相加后是否会超过基本数据类型范围上限\n//在此题中，l为最左边下标，r为最右边下标\nlong l=1,r=Long.MAX_VALUE-5;\n\n//当左下标小于右下标时循环\nwhile(l<r) {\n\t//每次循环之前算出中下标\n\tlong mid=(l+r)/2;\n\n\t//如果中下标的值，在题目要求中偏小，把左下标的值更新为中下标\n\tif(k<=calc(mid)) {\n\tr=mid;\n\t}else { //如果偏大，把右下标的值，更新为左下标\n\tl=mid+1;\n\t}\n}\n\n```\n\n---\n\n## **关于被查找的数组元素总数奇偶性的理解**\n\nGPT关于被查找的数组元素个数奇偶性的理解是：\n\n一句话就是，以上模板无论数组元素个数是奇是偶都适用，不过当元素个数为奇则最后只会剩下一个元素没有争议；元素个数为偶时最后剩下两个元素，两者都有可能是要找的目标\n\n> 这个二分查找算法是适用于所有元素个数为正整数的有序数组，无论数组元素个数是奇数还是偶数都可以使用这个模板。\n> 对于奇数个元素的数组，最后剩下的中间元素就是要查找的元素；\n> 对于偶数个元素的数组，则最后剩下的两个中间元素中任意一个都可能是要查找的元素。\n","slug":"算法/二分查找","published":1,"updated":"2024-04-14T15:30:54.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnra000jhk8zcu5s5nfz","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a><strong>概述</strong></h2><hr>\n<p><strong>二分算法解决问题的使用条件</strong></p>\n<ol>\n<li>有序：数据必须是有序的，不管是顺序表还是链，这不必多说</li>\n<li>二段性：二分算法的判断条件必须具有二段性，通常是 “&gt;” 或 “&lt;”，人话说就是可以分为两部分，也可以说“查找的目标元素可以进行比较操作”</li>\n</ol>\n<blockquote>\n<p><em>在算法题中，用二分算法解决问题的充分条件是什么？</em></p>\n<ol>\n<li>数据具有单调性：二分算法适用于有序数组或者单调性强的问题。在这种情况下，可以通过比较中间值和目标值的大小关系，排除一半的数据。</li>\n<li>数据量较大：如果数据量较小，直接遍历整个数组即可。但如果数据量较大，二分算法可以节省大量时间复杂度，使算法效率更高。</li>\n<li>没有重复元素：二分算法是基于元素唯一性的。如果存在重复元素，可能会出现一些问题，例如无法确定查找结果的唯一性。</li>\n<li>可以随机访问元素：二分算法需要能够随机访问数组中的元素。如果数据结构不支持随机访问，例如链表，二分算法就无法使用。</li>\n</ol>\n</blockquote>\n<hr>\n<h2 id=\"模板代码\"><a href=\"#模板代码\" class=\"headerlink\" title=\"模板代码\"></a><strong>模板代码</strong></h2><p>题目：</p>\n<blockquote>\n<p><em>一道二分查找题</em></p>\n<p>题干：满足 N ! 的末尾恰好有 K 个 0 的最小的 N 是多少?如果这样的 <em>N</em> 不存在输出 −1。</p>\n<p>输入格式：一个整数K</p>\n<p>输出格式：一个整数代表答案</p>\n<p>样例输入：2</p>\n<p>样例输出：10</p>\n</blockquote>\n<p>标准答案：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"comment\">// 1:无需package</span></span><br><span class=\"line\"><span class=\"comment\">// 2: 类名必须Main, 不可修改</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//求阶乘末尾0的个数其实就是求阶乘因子中5的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">long</span> <span class=\"title function_\">calc</span><span class=\"params\">(<span class=\"type\">long</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            res=res+x/<span class=\"number\">5</span>;</span><br><span class=\"line\">            x/=<span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//二分查找</span></span><br><span class=\"line\">        Scanner scanner=<span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"type\">long</span> k=scanner.nextLong();</span><br><span class=\"line\">        <span class=\"type\">long</span> l=<span class=\"number\">1</span>,r=Long.MAX_VALUE-<span class=\"number\">5</span>;<span class=\"comment\">//l为最左边，r为最右边</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(k&lt;=calc(mid)) &#123;</span><br><span class=\"line\">                r=mid;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(calc(r)!=k) &#123;</span><br><span class=\"line\">            System.out.print(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.print(r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案代码中，关于二分查找的分析：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//二分查找规定要求f(x)中的x是有序的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//规定一个最小值和最大值的指针，但要注意后续两者相加后是否会超过基本数据类型范围上限</span></span><br><span class=\"line\"><span class=\"comment\">//在此题中，l为最左边下标，r为最右边下标</span></span><br><span class=\"line\"><span class=\"type\">long</span> l=<span class=\"number\">1</span>,r=Long.MAX_VALUE-<span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当左下标小于右下标时循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(l&lt;r) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//每次循环之前算出中下标</span></span><br><span class=\"line\">\t<span class=\"type\">long</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//如果中下标的值，在题目要求中偏小，把左下标的值更新为中下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(k&lt;=calc(mid)) &#123;</span><br><span class=\"line\">\tr=mid;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果偏大，把右下标的值，更新为左下标</span></span><br><span class=\"line\">\tl=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"关于被查找的数组元素总数奇偶性的理解\"><a href=\"#关于被查找的数组元素总数奇偶性的理解\" class=\"headerlink\" title=\"关于被查找的数组元素总数奇偶性的理解\"></a><strong>关于被查找的数组元素总数奇偶性的理解</strong></h2><p>GPT关于被查找的数组元素个数奇偶性的理解是：</p>\n<p>一句话就是，以上模板无论数组元素个数是奇是偶都适用，不过当元素个数为奇则最后只会剩下一个元素没有争议；元素个数为偶时最后剩下两个元素，两者都有可能是要找的目标</p>\n<blockquote>\n<p>这个二分查找算法是适用于所有元素个数为正整数的有序数组，无论数组元素个数是奇数还是偶数都可以使用这个模板。<br>对于奇数个元素的数组，最后剩下的中间元素就是要查找的元素；<br>对于偶数个元素的数组，则最后剩下的两个中间元素中任意一个都可能是要查找的元素。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a><strong>概述</strong></h2><hr>\n<p><strong>二分算法解决问题的使用条件</strong></p>\n<ol>\n<li>有序：数据必须是有序的，不管是顺序表还是链，这不必多说</li>\n<li>二段性：二分算法的判断条件必须具有二段性，通常是 “&gt;” 或 “&lt;”，人话说就是可以分为两部分，也可以说“查找的目标元素可以进行比较操作”</li>\n</ol>\n<blockquote>\n<p><em>在算法题中，用二分算法解决问题的充分条件是什么？</em></p>\n<ol>\n<li>数据具有单调性：二分算法适用于有序数组或者单调性强的问题。在这种情况下，可以通过比较中间值和目标值的大小关系，排除一半的数据。</li>\n<li>数据量较大：如果数据量较小，直接遍历整个数组即可。但如果数据量较大，二分算法可以节省大量时间复杂度，使算法效率更高。</li>\n<li>没有重复元素：二分算法是基于元素唯一性的。如果存在重复元素，可能会出现一些问题，例如无法确定查找结果的唯一性。</li>\n<li>可以随机访问元素：二分算法需要能够随机访问数组中的元素。如果数据结构不支持随机访问，例如链表，二分算法就无法使用。</li>\n</ol>\n</blockquote>\n<hr>\n<h2 id=\"模板代码\"><a href=\"#模板代码\" class=\"headerlink\" title=\"模板代码\"></a><strong>模板代码</strong></h2><p>题目：</p>\n<blockquote>\n<p><em>一道二分查找题</em></p>\n<p>题干：满足 N ! 的末尾恰好有 K 个 0 的最小的 N 是多少?如果这样的 <em>N</em> 不存在输出 −1。</p>\n<p>输入格式：一个整数K</p>\n<p>输出格式：一个整数代表答案</p>\n<p>样例输入：2</p>\n<p>样例输出：10</p>\n</blockquote>\n<p>标准答案：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"comment\">// 1:无需package</span></span><br><span class=\"line\"><span class=\"comment\">// 2: 类名必须Main, 不可修改</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//求阶乘末尾0的个数其实就是求阶乘因子中5的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">long</span> <span class=\"title function_\">calc</span><span class=\"params\">(<span class=\"type\">long</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            res=res+x/<span class=\"number\">5</span>;</span><br><span class=\"line\">            x/=<span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//二分查找</span></span><br><span class=\"line\">        Scanner scanner=<span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"type\">long</span> k=scanner.nextLong();</span><br><span class=\"line\">        <span class=\"type\">long</span> l=<span class=\"number\">1</span>,r=Long.MAX_VALUE-<span class=\"number\">5</span>;<span class=\"comment\">//l为最左边，r为最右边</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(k&lt;=calc(mid)) &#123;</span><br><span class=\"line\">                r=mid;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(calc(r)!=k) &#123;</span><br><span class=\"line\">            System.out.print(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.print(r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案代码中，关于二分查找的分析：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//二分查找规定要求f(x)中的x是有序的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//规定一个最小值和最大值的指针，但要注意后续两者相加后是否会超过基本数据类型范围上限</span></span><br><span class=\"line\"><span class=\"comment\">//在此题中，l为最左边下标，r为最右边下标</span></span><br><span class=\"line\"><span class=\"type\">long</span> l=<span class=\"number\">1</span>,r=Long.MAX_VALUE-<span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当左下标小于右下标时循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(l&lt;r) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//每次循环之前算出中下标</span></span><br><span class=\"line\">\t<span class=\"type\">long</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//如果中下标的值，在题目要求中偏小，把左下标的值更新为中下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(k&lt;=calc(mid)) &#123;</span><br><span class=\"line\">\tr=mid;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果偏大，把右下标的值，更新为左下标</span></span><br><span class=\"line\">\tl=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"关于被查找的数组元素总数奇偶性的理解\"><a href=\"#关于被查找的数组元素总数奇偶性的理解\" class=\"headerlink\" title=\"关于被查找的数组元素总数奇偶性的理解\"></a><strong>关于被查找的数组元素总数奇偶性的理解</strong></h2><p>GPT关于被查找的数组元素个数奇偶性的理解是：</p>\n<p>一句话就是，以上模板无论数组元素个数是奇是偶都适用，不过当元素个数为奇则最后只会剩下一个元素没有争议；元素个数为偶时最后剩下两个元素，两者都有可能是要找的目标</p>\n<blockquote>\n<p>这个二分查找算法是适用于所有元素个数为正整数的有序数组，无论数组元素个数是奇数还是偶数都可以使用这个模板。<br>对于奇数个元素的数组，最后剩下的中间元素就是要查找的元素；<br>对于偶数个元素的数组，则最后剩下的两个中间元素中任意一个都可能是要查找的元素。</p>\n</blockquote>\n"},{"title":"宝贝，来春天玩","date":"2023-04-06T12:19:44.000Z","auto_excerpt":"true","_content":"宝贝，来春天玩\n\n春天有好多好玩的风，雨，云\n\n一起携手，在草原上放野\n\n一起飞翔\n\n飞掠一无所有的城市\n\n飞掠平凡庸碌的一辈子\n\n今天的你就像花儿一样\n\n你一定在等这一刻绽放等了一辈子\n\n我早已看到，你心里一定有灿烂的火苗\n","source":"_posts/诗/宝贝，来春天玩.md","raw":"---\ntitle: 宝贝，来春天玩\ndate: 2023-04-06 20:19:44\ntags: \ncategories:\n  - - 诗\nauto_excerpt: \"true\"\n---\n宝贝，来春天玩\n\n春天有好多好玩的风，雨，云\n\n一起携手，在草原上放野\n\n一起飞翔\n\n飞掠一无所有的城市\n\n飞掠平凡庸碌的一辈子\n\n今天的你就像花儿一样\n\n你一定在等这一刻绽放等了一辈子\n\n我早已看到，你心里一定有灿烂的火苗\n","slug":"诗/宝贝，来春天玩","published":1,"updated":"2024-04-14T15:33:04.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnrb000lhk8z1rqh97dh","content":"<p>宝贝，来春天玩</p>\n<p>春天有好多好玩的风，雨，云</p>\n<p>一起携手，在草原上放野</p>\n<p>一起飞翔</p>\n<p>飞掠一无所有的城市</p>\n<p>飞掠平凡庸碌的一辈子</p>\n<p>今天的你就像花儿一样</p>\n<p>你一定在等这一刻绽放等了一辈子</p>\n<p>我早已看到，你心里一定有灿烂的火苗</p>\n","site":{"data":{}},"excerpt":"","more":"<p>宝贝，来春天玩</p>\n<p>春天有好多好玩的风，雨，云</p>\n<p>一起携手，在草原上放野</p>\n<p>一起飞翔</p>\n<p>飞掠一无所有的城市</p>\n<p>飞掠平凡庸碌的一辈子</p>\n<p>今天的你就像花儿一样</p>\n<p>你一定在等这一刻绽放等了一辈子</p>\n<p>我早已看到，你心里一定有灿烂的火苗</p>\n"},{"title":"我心中有","date":"2023-04-06T12:19:44.000Z","auto_excerpt":"true","_content":"我心中有很多奇妙幻想和飞扬的点子\n\n在最深沉最黑暗的夜里才会开花\n\n当我意识到我是人的时候\n\n喜悦溢满流出我的胸膛\n\n\n<br/>\n\n\n纵然我是颗尘埃无人注意\n\n但总算和你们有了奇妙分别\n\n如果你能牵着我思绪的一边线头\n\n就能和我一起傲游到宇宙尽头\n\n\n<br/>\n\n\n我的幸福分享给你\n\n一半 便可填满整个宇宙\n\n2021年05月16日\n","source":"_posts/诗/我心中有.md","raw":"---\ntitle: 我心中有\ndate: 2023-04-06 20:19:44\ntags: \ncategories:\n  - - 诗\nauto_excerpt: \"true\"\n---\n我心中有很多奇妙幻想和飞扬的点子\n\n在最深沉最黑暗的夜里才会开花\n\n当我意识到我是人的时候\n\n喜悦溢满流出我的胸膛\n\n\n<br/>\n\n\n纵然我是颗尘埃无人注意\n\n但总算和你们有了奇妙分别\n\n如果你能牵着我思绪的一边线头\n\n就能和我一起傲游到宇宙尽头\n\n\n<br/>\n\n\n我的幸福分享给你\n\n一半 便可填满整个宇宙\n\n2021年05月16日\n","slug":"诗/我心中有","published":1,"updated":"2024-04-14T15:32:40.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnrb000nhk8z3kgl6sa7","content":"<p>我心中有很多奇妙幻想和飞扬的点子</p>\n<p>在最深沉最黑暗的夜里才会开花</p>\n<p>当我意识到我是人的时候</p>\n<p>喜悦溢满流出我的胸膛</p>\n<br/>\n\n\n<p>纵然我是颗尘埃无人注意</p>\n<p>但总算和你们有了奇妙分别</p>\n<p>如果你能牵着我思绪的一边线头</p>\n<p>就能和我一起傲游到宇宙尽头</p>\n<br/>\n\n\n<p>我的幸福分享给你</p>\n<p>一半 便可填满整个宇宙</p>\n<p>2021年05月16日</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我心中有很多奇妙幻想和飞扬的点子</p>\n<p>在最深沉最黑暗的夜里才会开花</p>\n<p>当我意识到我是人的时候</p>\n<p>喜悦溢满流出我的胸膛</p>\n<br/>\n\n\n<p>纵然我是颗尘埃无人注意</p>\n<p>但总算和你们有了奇妙分别</p>\n<p>如果你能牵着我思绪的一边线头</p>\n<p>就能和我一起傲游到宇宙尽头</p>\n<br/>\n\n\n<p>我的幸福分享给你</p>\n<p>一半 便可填满整个宇宙</p>\n<p>2021年05月16日</p>\n"},{"title":"站在阳光里","date":"2023-04-06T12:19:44.000Z","auto_excerpt":"true","_content":"站在阳光里\n\n我会不会 过度思念的缘故\n\n消融在这暖暖阳光\n\n呆看飞絮红尘\n","source":"_posts/诗/站在阳光里.md","raw":"---\ntitle: 站在阳光里\ndate: 2023-04-06 20:19:44\ntags: \ncategories:\n  - - 诗\nauto_excerpt: \"true\"\n---\n站在阳光里\n\n我会不会 过度思念的缘故\n\n消融在这暖暖阳光\n\n呆看飞絮红尘\n","slug":"诗/站在阳光里","published":1,"updated":"2024-04-14T15:50:45.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnrb000phk8z0er07q6u","content":"<p>站在阳光里</p>\n<p>我会不会 过度思念的缘故</p>\n<p>消融在这暖暖阳光</p>\n<p>呆看飞絮红尘</p>\n","site":{"data":{}},"excerpt":"","more":"<p>站在阳光里</p>\n<p>我会不会 过度思念的缘故</p>\n<p>消融在这暖暖阳光</p>\n<p>呆看飞絮红尘</p>\n"},{"title":"秋水","date":"2023-04-06T12:19:44.000Z","auto_excerpt":"true","_content":"秋水是一种纯洁的颜料，涂抹你的心里，洁白\n\n我站在小雨的九月，不会祈求命运赐予任何\n\n抓住一颗星星，我要送给我爱的人\n\n搏得一朵鲜花，你是一种无言的芬芳\n\n磨碎星星和花，和我的喜悦的心情\n\n带去沉默的信，和一满瓶纯洁的秋水\n\n愿爱人喜欢这一切，绘制在青空的蓝色纸张\n\n而我也会握你的手，轻轻呼唤\n\n一起洗礼吧，在雨中，爱人\n\n你愿意吗\n\n2020.9.16\n","source":"_posts/诗/秋水.md","raw":"---\ntitle: 秋水\ndate: 2023-04-06 20:19:44\ntags: \ncategories:\n  - - 诗\nauto_excerpt: \"true\"\n---\n秋水是一种纯洁的颜料，涂抹你的心里，洁白\n\n我站在小雨的九月，不会祈求命运赐予任何\n\n抓住一颗星星，我要送给我爱的人\n\n搏得一朵鲜花，你是一种无言的芬芳\n\n磨碎星星和花，和我的喜悦的心情\n\n带去沉默的信，和一满瓶纯洁的秋水\n\n愿爱人喜欢这一切，绘制在青空的蓝色纸张\n\n而我也会握你的手，轻轻呼唤\n\n一起洗礼吧，在雨中，爱人\n\n你愿意吗\n\n2020.9.16\n","slug":"诗/秋水","published":1,"updated":"2024-04-14T15:32:50.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnrb000rhk8zcgxdg22e","content":"<p>秋水是一种纯洁的颜料，涂抹你的心里，洁白</p>\n<p>我站在小雨的九月，不会祈求命运赐予任何</p>\n<p>抓住一颗星星，我要送给我爱的人</p>\n<p>搏得一朵鲜花，你是一种无言的芬芳</p>\n<p>磨碎星星和花，和我的喜悦的心情</p>\n<p>带去沉默的信，和一满瓶纯洁的秋水</p>\n<p>愿爱人喜欢这一切，绘制在青空的蓝色纸张</p>\n<p>而我也会握你的手，轻轻呼唤</p>\n<p>一起洗礼吧，在雨中，爱人</p>\n<p>你愿意吗</p>\n<p>2020.9.16</p>\n","site":{"data":{}},"excerpt":"","more":"<p>秋水是一种纯洁的颜料，涂抹你的心里，洁白</p>\n<p>我站在小雨的九月，不会祈求命运赐予任何</p>\n<p>抓住一颗星星，我要送给我爱的人</p>\n<p>搏得一朵鲜花，你是一种无言的芬芳</p>\n<p>磨碎星星和花，和我的喜悦的心情</p>\n<p>带去沉默的信，和一满瓶纯洁的秋水</p>\n<p>愿爱人喜欢这一切，绘制在青空的蓝色纸张</p>\n<p>而我也会握你的手，轻轻呼唤</p>\n<p>一起洗礼吧，在雨中，爱人</p>\n<p>你愿意吗</p>\n<p>2020.9.16</p>\n"},{"title":"镜子","date":"2023-04-06T12:19:44.000Z","auto_excerpt":"true","_content":"世界上的一切都是镜子\n\n物质的映出现实的自己\n\n虚幻的映出理想的自己\n\n远方是天而脚下的是地\n\n\n<br/>\n\n\n\n我是一只徜徉在镜的鱼\n\n梦想是此生只照哈哈镜\n\n世界很大前途悠远无尽\n\n漫看云朵卷舒怡然自乐\n\n2021年05月13日\n","source":"_posts/诗/镜子.md","raw":"---\ntitle: 镜子\ndate: 2023-04-06 20:19:44\ntags: \ncategories:\n  - - 诗\nauto_excerpt: \"true\"\n---\n世界上的一切都是镜子\n\n物质的映出现实的自己\n\n虚幻的映出理想的自己\n\n远方是天而脚下的是地\n\n\n<br/>\n\n\n\n我是一只徜徉在镜的鱼\n\n梦想是此生只照哈哈镜\n\n世界很大前途悠远无尽\n\n漫看云朵卷舒怡然自乐\n\n2021年05月13日\n","slug":"诗/镜子","published":1,"updated":"2024-04-14T15:33:01.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnrc000uhk8z0sph1zox","content":"<p>世界上的一切都是镜子</p>\n<p>物质的映出现实的自己</p>\n<p>虚幻的映出理想的自己</p>\n<p>远方是天而脚下的是地</p>\n<br/>\n\n\n\n<p>我是一只徜徉在镜的鱼</p>\n<p>梦想是此生只照哈哈镜</p>\n<p>世界很大前途悠远无尽</p>\n<p>漫看云朵卷舒怡然自乐</p>\n<p>2021年05月13日</p>\n","site":{"data":{}},"excerpt":"","more":"<p>世界上的一切都是镜子</p>\n<p>物质的映出现实的自己</p>\n<p>虚幻的映出理想的自己</p>\n<p>远方是天而脚下的是地</p>\n<br/>\n\n\n\n<p>我是一只徜徉在镜的鱼</p>\n<p>梦想是此生只照哈哈镜</p>\n<p>世界很大前途悠远无尽</p>\n<p>漫看云朵卷舒怡然自乐</p>\n<p>2021年05月13日</p>\n"},{"title":"众元教育网课 7天快速通过计算机网络期末考试","date":"2023-04-15T19:15:46.000Z","auto_excerpt":"true","_content":"\n  ## 前言和概述\n\n 本文是b站视频《众元教育网课 7天快速通过计算机网络期末考试》的网课笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n评：\n\n本文也是早期笔记了，顾名思义，如果你想7天通过计算机网络考试，那么就对它进行学习，这是一份言简意赅处处要点的笔记。如果计算机网络是一座山，那么它就是地基上那层薄薄的土。\n\n放上来其实也没有什么意义，不过是一份旧笔记的存档，毕竟后来我们为了408，还有一份5万字的重磅笔记。而且我敢打包票，5万字笔记也概括不了计算机网络世界里的地基上薄薄的那层土。\n\n---\n\n\n**计算机网络概论**\n\n<u>计算机网络的概念：</u>\n\n1. 计算机网络定义：计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。\n\n2. 地理位置不同的独立主机，通信线路连接实现资源共享。\n\n3. 计算机网络的组成：通信子网和资源子网\n\n4. 负责通信的包括光纤就是通信子网，所有你以为是资源的，就是资源子网\n\n5. 通信子网提供网络节点和线路，资源子网提供需要的数据\n\n6. 计算机网络的类型，分为三点。\n\n1. 拓扑结构分，星型（一个点散射），树型，总线型（一根主线，其他人从它那里牵直接分线），环型(总线型 只是首尾闭合)，网状结构\n\n2. 范围分类。局域网LAN（几百米到十几公里），城域网MAN（覆盖一个城市），广域网WAN（一个国家，一个大省），个人区域网PAN（个人网络，蓝牙耳机，可穿戴设备之类的）\n\n3. 传输方式分类。有线网络和无线网络。\n\n<u>计算机网络体系结构：</u>\n\n1. 计算机网络体系结构，分传输方向分类，传输对象分类\n\n1. 传输方向分类就是单工（只能单方向传输，单方面收或发信号），双工（同一时间内线路只允许一个方向通过），全双工（同时能去能回）\n\n2. 传输对象区分，单播（只给一个对象发），多播（一对多），广播（在一个范围区间内所有对象都能发送到）\n\n2. 常见的计算机网络三种数据交换。电路交换（一整条线路为两个对象服务专用），报文交换（数据发给中间对象，中间对象再决定怎么发给下一个对象，优点是不占用整个从头到尾的线路，同一时间上静态看，释放了一大段网络），分组交换（大数据包切割成小块谓之分组交换，不同小包走不同线路，最后在接收对象处拼成完整）。\n\n3. 现在常用分组交换\n\n4. 网络结构三要素，语法语义和时序\n\n5. OSI参考模型，中文名开放式系统互联参考模型，的七个层次。物理层最低，数据链路层，网络层，传输层，会话层，表示层，应用层【物数网传会表应】\n\n1. 物理层的对象是公路的物理存在性质，数据链路层的对象是每个公交上的老师负责每次到站时都清点学生人数，网络层的对象是一个个市间大公交站，传输层的对象是始发和终点公交站的出入口，会话层的对象是出入口管理员负责让车在顺利出入口，表示层是检票员管理上车人员的合规性，应用层是铭升公司所租车的出入口管理\n\n2. OSI参考模型的理念是下层为上层服务\n\n3. 【最低】物理层，单位比特。物理层的任务是透明地传送比特流，物理层的任务是抹平线路的物理差异\n\n4. 数据链路层，单位帧，负责在两个相邻节点上无差错地传输以帧为单位的数据，数据链路层的任务是把差错链路和无差错链路都抹平为无差错链路。\n\n5. 网络层。单位分组，网络层的主要任务是为网络上的不同主机提供通信【选路由器】。网络层的任务是把通信子网由多个节点连接而成的链路抹平。\n\n6. 传输层，该层提供会话层和网络层之间的传输服务，这种服务从会话层获得数据，并在必要时对数据进行分割然后将数据传递到网络层，并确保数据能正确无误地传送到网络层。因此,运输层负责提供主机中两个进程之间数据的可靠传送。【下三层主要任务通信子网的数据通信，上三层任务资源子网的数据处理，传输层在中间就是资源子网和通信子网的桥梁】传输层任务是抹平掉整个通信子网。\n\n7. 会话层（保证程序会话），其主要任务是负责维护两个实体之间的会话连接确保点到点的传输不被中断，并进行会话管理和数据交换管理。会话层任务是利用上面一层层的服务，让应用建立和维持会话。\n\n8. 表示层（保证数据符合约定格式）。它的主要功能是协商和建立数据交换的格式，解决各应用程序之间在数据格式表示上的差异,，以使一个主机应用层的数据可以被另一个主机的应用层理解。\n\n9. 应用层（保证应用程序运行）。它是用户应用程序和网络之间的接口，完成用户希望在网络上完成的各种工作【其作为最高理想，人话说是利用网络为用户干事儿】。\n\n11. OSI模型已经淘汰掉了，现在常用的是TCP/IP模型，后者对前者简化，表示会话应用合并了。\n\n12. TCP/IP模型分为网络接口层（物理层+数据链路层），网际层，传输层，应用层（会话层，表示层，应用层）。\n\n***\n\n**物理层**\n\n<u>物理层的基本概念：</u>\n\n1. 四大特性【事物的性质也就是成员属性也就可以描述出这个事物】：机械特性（用了什么接口，例如水晶头），电气特性（弱电电压之类的电气方面的内容），功能特性（也就是用途，这个用途当然只有一个那就是传输什么信号，电信号、光信号之类的），过程特性（通信方面的技术内容）\n\n3. 两种信号：数字信号和模拟信号。后者的特性是有连续性，有更加丰富的表现形式，数字信号有离散型\n\n5. 调制和编码：调制就是模拟信号转换，（不管数字信号还是模拟信号，调制吹后都是模拟信号），编码就是数字信号转换（编码之后都是数字信号）。编码的步骤是采样=>量化=>编码。\n\n6. 数字数据可以用数字发送器编码，也可以用调制器调制。模拟数据可以用PCM编码器编码，也可以用放大器调制成模拟信号\n\n8. 传输介质：双绞线，光纤，同轴电缆（淘汰了，当年打电话座机用的），无线。\n\n9. 无线信号频率标准IEEE802.11\n\n10. 双绞线分屏蔽双绞线STP和非屏蔽双绞线UTP，区别是抗干扰性和成本。制作标准，从左到右，568B是橙白、橙、绿白、蓝、蓝白、绿、棕白、棕，568A是13（橙白、绿白）和26（橙、绿）互换\n\n11. 光纤分单模光纤和多模光纤，单模传输距离远100KM，多模传输距离近2KM，造成这样是因为光在单模光纤里几乎直线，而在多模光纤里折射\n\n13. 三大系统，源系统（计算机网络中，发送数据的端 ）、传输系统（计算机网络中，中间所有给两个端传输的物理东西（学名传输介质））、目的系统（计算机网络中，接收数据的端）\n\n<u>物理层的基本通信技术：</u>\n\n1. 四种信道复用技术：所谓信道就是信息的传播介质（类似以太），复用的学名解释是“复用技术是指一种在传输路径上综合多路信道，然后恢复原机制或解除终端各信道复用技术的过程”，人话说就是解决了不同型号传输的时候怎么去分开来的技术，而这个技术是用来解决将多种不同信号在同一个信道上进行传输的问题，也就是同一个信道怎么传输多个不同端要发送的数据，一个无线路由器怎么在一个信道之内解决多个手机连wifi的问题。\n\n2. 四种技术分别为频分复用FDM（通过划分频率解决问题，就像四级考试耳机），时分复用TDM（在不同的时间段，不同的设备开始传输），波分复用WDM（特指光载波信号，根据光波波长区分不同端，专用设备是复用器，又叫合波器），码分复用CDM（把数据进行编码，来区分端）。\n\n4. 数据的传输方式：\n\n1. 通过同时间传输数量区分，串行传输（信号一位一位传输过去），特点是发送端可以边产生边发送，速度较慢，用于比较简单的信号线路如键盘，并行传输（信号直接打包成组传输过去），特点是发送端必须通过计算整理好一整组才能发送，速度较快，用于有一定数据处理能力的设备\n\n2. 通过数据报文的双方行为区分，同步传输（接收方和发送方要同时做好准备，一接一收时间一致很重要，）特点是需要两端的耦合性强，不同发送端朝同一个接收端发送也需要排队，异步传输，特点是速度较快，排队不死。\n\n3. 通过传输信号区分，基带传输（传输数字信号），频带传输（传输模拟信号），常见频带范围300-3400HZ\n\n4. 通过传输方向区分，单工，半双工，全双工\n\n5. 通过传输对象区分，单播，组播，广播\n\n***\n\n**数据链路层**\n\n<u>数据链路层基础概论：</u>\n\n1. 数据链路层是在物理层和网络层之间的协议，提供相邻节点的可靠数据传输\n\n3. 帧是一个数据的最后包装，学名数据链路层的协议数据单元。\n\n4. 对以太网，帧头是源mac地址，目的mac地址，类型，中间是数据，帧尾是校验\n\n5. 对局域网，帧头是源mac地址，目的mac地址，长度，LLC，SNAP，中间是数据，帧尾是校验\n\n7. MAC地址是48位世界上独一无二的地址\n\n9. 数据帧分两种，以太网（基本是广播和总线型）和局域网。\n\n11. 局域网数据帧中的协议分MAC协议和LLC协议，两者的作用是负责数据在不同网络中的无差别传输。MAC协议是介质控制访问，负责对接物理层，LLC协议是逻辑控制访问，负责对接网络层\n\n13. 数据链路层也分两种传输方式，单播和广播\n\n15. 数据链路层三个基本问题，封装成帧，透明传输，差错检测，分别对应其在源端、线路、目的端要干的活\n\n17. 局域网中的设备有集线器HUB（工作在物理层，对收到的信号进行整型令数据恢复整洁波形，同时再放大，同时它是多个节点的交汇中心），交换机（工作在数据链路层，为接入交换机的两个节点提供单独的电信号线路），网桥（工作在物理层和数据链路层中间，是两个端口的交换机）\n\n18. 最大特点是集线器是共享带宽，交换机是独享带宽，而网桥是只能支持两个接口\n\n19. 集线器之所以工作在物理层是因为它只负责物理方面的事情，整形和放大，交换机之所以工作在数据链路层是因为它除了负责物理事情还负责保证数据具有完整性和正确性，这是数据链路层的职责保证内容\n\n21. 冲突域和广播域，冲突域出现在第一层物理层，广播域出现在第二层数据链路层。人话理解，网络中的设备们，一个设备就是一个冲突域，对交换机或路由器，只要一个小树上连接的所有的多个局域网加在一起统称一个广播域，如果没有VLAN之类的技术，也可以说一个二层数据链路层设备就是一个广播域\n\n22. 作用是只要在同一个广播域的端，发送一个广播报文，整个广播域之内的端都可以收到广播报文，就这样\n\n<u>数据链路层的通信协议：</u>\n\n25. 虚拟局域网VLAN也就是virtual LAN，是将物理LAN口在逻辑上划分为多个广播域的技术，人话说就是把一个LAN变多个LAN，只不过是多个VLAN。技术的意义在于可以减少垃圾广播数据收取，增强安全性不收病毒广播数据，提高健壮性让一个广播域之内的设备挂掉不至于所有设备都挂掉，灵活构建工作组让你随心所欲控制数据的广播。\n\n26. VLAN的划分有基于端口，基于子网，基于mac地址，基于协议，基于匹配策略这几种划分方法原则，但基本只基于端口划分。\n\n27. 基于端口划分有三种方式，access（只允许通过一个VLAN，有点类似于直接用VLAN给端口命名），trunk（允许通过多个VLAN，有点类似于给端口贴上VLAN的标签所以可以贴多个），hybird（华为独有的技术）\n\n29. CSMA/CD，即载波侦听多路访问/冲突检测，规定了总线型网络中多个端同时发送数据的规则，主要解决了多个端同时发送数据造成冲突的问题。四大要点是先听再发（先听一下总线上有没有数据，有就等下再发），边听边发（一边发还一边听，有没有人打扰我），冲突停止（我在发的时候万一有其它端也发造成了冲突，就停下来），延迟后发（因为所有的端都遵循以上原则，所以冲突之后两个冲突的发送端都会停止下来，然后延迟一个随机数时长，再继续第一步）\n\n31. PPP点对点通信协议，最初为两个对等节点之间的IP流量传输提供封装协议，后来被用来端和ISP通信所用数据链路层协议，其规定了点对点数据封装的规则，人话说就是规定了点对点连接中，数据链路层如何封装成帧以及转化为比特流。封装之所以成问题而不是简单加个头尾，是因为要让数据帧的开始和结束标志在整个数据中都找不到第二个，若数据中有同样的流就做一个约定式替换\n\n33. CRC循环冗余校验，主要解决数据链路层三个基本问题的差错检测问题，规定了验证数据完整性一些原则。大概就是在发送端对数据进行多项式计算，把计算结果附加在帧的后面，而接收端也进行类似计算。\n\n34. CRC运算题解题方法是，多项式最高次幂是几就原数据后面加几个零产生第一个数，多项式最高次幂是几（如4）就列一个递减到0的数列（43210），在这个数下面如果原多项式有这个幂值就1没有就0得到第二个数（如P(X)=X^4+X+1，得到的第二个数是10011），列个竖式第一个数除以第二个数进行模二运算（规则类似并运算），余数的位数一定等于最高次幂的值如果不够就前面补0\n\n35. 余数附在原数据后产生第三个数据，接收端验算就是把第三个数据和第二个数据再进行一次模二运算结果一定是0\n\n***\n\n**网络层**\n\n1. 网络层的作用是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。人话说提供端到端服务（所谓端到端意思在源头和目的两端之间建立连接，重点“到”字）。\n\n2. 网络层的单位是分组\n\n3. IP协议，一共分四个，主要有三个，ARP地址解析协议（规定了根据IP地址获取物理地址的规则），ICMP网际控制报文协议（规定了传输控制消息的规则，所谓控制消息是指网络本身的一些属性消息，比如网络通不通，主机是否可达，路由是否可用等等），IGMP网际组管理协议（规定了IP主机和相邻的路由器创建多播组的组成员的规则，所谓组播就是介于单播和广播之间的一种方式），次要有一个RARP反地址解析协议（规定了根据物理地址找到IP地址的规则）\n\n4. IP地址是IP协议提供的一种统一的地址格式，规定如何为互联网上的网络和主机分配逻辑地址\n\n5. IP地址4字节32位，表示方法是点分十进制（一个字节一个点）\n\n7. IP地址是逻辑地址，mac地址是物理地址；mac地址唯一但IP地址不唯一，mac地址工作在第二层IP地址工作在网络层，mac地址48位IP地址32位（v6地址128位），IP地址取决网络拓扑，mac地址取决制造商\n\n8. IP地址由网络地址/网络号和主机地址/主机号组成，网络地址用来标识网段，主机地址用来标识设备\n\n9. 子网掩码是用来指明一个IP地址哪几位是网络地址哪几位是主机地址，即区分ABCDE类网络。子网掩码四段按二进制表示，全1的位置为网络地址全0的位置是主机地址，所以A类默认255.0.0.0，B类255.255.0.0，以此类推\n\n10. IP地址的分类：\n\n1. A（IP地址四段，1段网络地址234主机地址，而且第一个字节的前两位是0，范围1.0.0.1~127.255.255.254，有126个A类网络地址，每个网络可容纳主机1600万）\n\n2. B（12段网络地址，34段主机地址，有16384个网络，而且第一个字节的前两位是10，每个网络容量6万主机，范围128.0.0.1~191.255.255.254，第一个字节的前两位是110）\n\n3. C（123段网络地址，4段主机地址，而且第一个字节的前两位是110，有209万个网络，每个网络254个主机，范围192.0.0.1~223.255.255.254，第一个字节的前两位是110）\n\n4. D（历史称多播地址/组播地址，命名了一组应 该在此网络中收到一个分组的站点，而且第一个字节的前两位是1110，范围224.0.0.1~239.255.255.255）\n\n5. E类 第一个字节1111开头，保留\n\n6. 特殊地址：网络地址，主机号为全0的地址不可用。广播地址，主机号为全1的地址不可用，交换机收到发送端需要广播的数据就用广播地址向所有目标地址进行广播所以不能被真实设备使用。回环地址，127.0.0.1，用来做一个测试ip地址是否可用\n\n15. Ipv6地址由16字节128位组成，一般表示为16进制\n\n17. 子网划分：为了解决IP地址浪费，把一个大网络划分成若干子网，主要利用VLSM可变长子网掩码。\n\n18. VLSM是一种寻址技术。只能划分为2的幂次个子网\n\n20. 路由是指用分组方式从源端到目的端时决定端到端路径网络范围的进程，名字就很一目了然\n\n21. 路由是网络层最主要的工作任务，是网络层的基本设备，主要职责是数据转发，一个端口是一个网段\n\n22. 路由器中存各个网段的表格叫路由表\n\n23. 路由器是市间公交站台，交换机是市内小公交站台，信道是公交车本身，网关是每个市之间的大门的看门保安负责顺利畅通。\n\n24. 路由获取方式：路由表里的路有三种方法知道，第一是直连路由（直接连上了设备就根本不用知道怎么去端了），人工配置的静态路由（自己在表里写好去目的端需要通过哪些路由），动态路由（是由每个路由器互相广播自己所连接的路由自动产生的）\n\n25. 路由的配置方式：静态路由方式就是根据路由表来知道往哪走，缺省路由就是if elif else里那个else，最终默认的那个转发路由，动态路由是通过路由协议\n\n26. 动态路由协议主要有RIP路由信息协议（基于矢量，人话简单说就是一个图数据结构里它根据边的数量多寡来走最小的那条路，边是有矢量的嘛）、OSPF开放式最短路径优先（基于链路状态，通过算法综合分析链路的优劣，网速啊边的权重啊之类的），两者的区别是RIP是基于矢量的协议而OSPF基于链路状态，RIP适用于中小型网络拓扑而OSPF适用于较大规模的网络，RIP不支持可变长度子网掩码(VLSM)而OSPF支持，RIP不防环而OSPF防环，OSPF的收敛速度比RIP的更加迅速\n\n***\n\n**传输层**\n\n<u>传输层概论:</u>\n\n1. 端口号就是逻辑端口的编号\n\n2. 常见协议的端口号：\n\n3. FTP文件传输协议，21专门用来建立连接，20用来传数据\n\n4. TELNET远程登录，23\n\n5. SMTP电子邮件传输协议，发邮件的是SMTP协议，端口25，POP3邮局协议版本3是用来接邮件的，端口110\n\n6. DNS域名系统，53\n\n7. TFTP简单文件传输协议，相比FTP使用的TCP协议，TFTP用UDP协议比较不可靠，端口69\n\n8. HTTP超文本传输协议，80\n\n9. SNMP简单网络管理协议，161\n\n10. HTTPS超文本传输安全协议，443\n\n<u>传输层的两个重要协议：</u>\n\n1. TCP传输控制协议，特点是面向连接的传输层协议，提供可靠的交付服务，提供全双工通信，面向字节流\n\n2. TCP设置了滑动窗口，这是一种通过描述接收方数据缓冲区大小让发送方酌情发送数据的量的技术，缓冲区满了就不发\n\n3. 三次握手（我要和你连接，好我准备好了，那我来了），开传，四次挥手（我要分手，我把你给我的东西整理完再断开，我整理完了，那好分吧）\n\n4. UDP用户数据报协议，特点是无连接，尽最大努力交付，面向报文且没有拥塞控制，开销小且传输效率高\n\n5. TCP和UDP都会在报文前面加上首部，但两者加的首部不同\n\n***\n\n**应用层**\n\n1. 应用层的作用：应用层是最贴近用户的一层，作用为用户提供服务\n\n2. 应用层的常见协议有dns域名系统，FTP文件传输协议，远程终端协议TELNET，超文本传输协议HTTP，SMTP电子邮件传输协议，POP3邮局协议版本3，DHCP动态主机配置协议\n\n3. 要注意的考点是dns域名系统查询域名服务器有递归和迭代两种方法，递归就是传递归来，迭代就是分别问\n\n***\n\n**网络安全**\n\n<u>网络安全概论：</u>\n\n1. 网络安全是指网络系统的硬件、软件及系统中的数据受到保护，不因偶然的或者恶意的原因而遭受到破坏、更改、泄露，系统连续可靠地正常运行，网络服务不中断\n\n3. 计算机网络面临的威胁主要分主动攻击（主动破坏计算机网络，比如篡改，恶意程序，拒绝服务）和被动攻击（被动破坏计算机网络，主要是收集信息，比如截获，窃取，流量分析）两大类\n\n5. 网络系统的特性，优秀网络系统应该满足保密性（数据本身不泄露给非授权用户），完整性（数据未经授权不可更改），可用性（数据可以被正常使用，比如被ddos攻击的时候就没法正常用），可靠性（数据的内容及其传播可控），不可抵赖性（出现安全问题的时候提供依据和手段）\n\n7. 加密，目的是让得到了信息也无法知道内容，常见手段收MD5信息-摘要算法（记住128位），AES对称密钥加密（三种，128，192，256位），SHA1安全哈希算法（160位），RSA公钥加密私钥解密（1024位）\n\n8. 解密的过程就是加密的逆过程\n\n10. 对称加密就是同一个密钥加密解密，非对称加密就是一个密钥加密一个密钥解密\n\n12. 数字签名的四大特点是防止重放攻击（重放攻击就是重复发送一样的数据，可以是源端也可以是中间人，这么做之所以有意义举例我们可以重放一万次提现一万元），防止数据伪造，防止数据被篡改，防止数据抵赖\n\n14. 防火墙是一种访问控制技术，控制进出网络边界的分组\n\n15. 防火墙分四个区，local本地区域（安全优先级100，防火墙本身的区域，凡是防火墙主动发出的报文均可认为是local区域发出，凡是需要防火墙响应并处理的报文均可认为是local区域接收），trust受信区（安全优先级85，通常用来定义内部用户的网络），DMZ非军事化区（安全优先级50，通常用来定义内部服务器的网络），untrust非受信区（安全优先级5，通常用来定义internet等不安全网络）","source":"_posts/408/众元教育网课 7天快速通过计算机网络期末考试.md","raw":"---\ntitle: 众元教育网课 7天快速通过计算机网络期末考试\ndate: 2023-04-16 03:15:46\ntags: \ncategories:\n  - - 408\nauto_excerpt: \"true\"\n---\n\n  ## 前言和概述\n\n 本文是b站视频《众元教育网课 7天快速通过计算机网络期末考试》的网课笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n评：\n\n本文也是早期笔记了，顾名思义，如果你想7天通过计算机网络考试，那么就对它进行学习，这是一份言简意赅处处要点的笔记。如果计算机网络是一座山，那么它就是地基上那层薄薄的土。\n\n放上来其实也没有什么意义，不过是一份旧笔记的存档，毕竟后来我们为了408，还有一份5万字的重磅笔记。而且我敢打包票，5万字笔记也概括不了计算机网络世界里的地基上薄薄的那层土。\n\n---\n\n\n**计算机网络概论**\n\n<u>计算机网络的概念：</u>\n\n1. 计算机网络定义：计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。\n\n2. 地理位置不同的独立主机，通信线路连接实现资源共享。\n\n3. 计算机网络的组成：通信子网和资源子网\n\n4. 负责通信的包括光纤就是通信子网，所有你以为是资源的，就是资源子网\n\n5. 通信子网提供网络节点和线路，资源子网提供需要的数据\n\n6. 计算机网络的类型，分为三点。\n\n1. 拓扑结构分，星型（一个点散射），树型，总线型（一根主线，其他人从它那里牵直接分线），环型(总线型 只是首尾闭合)，网状结构\n\n2. 范围分类。局域网LAN（几百米到十几公里），城域网MAN（覆盖一个城市），广域网WAN（一个国家，一个大省），个人区域网PAN（个人网络，蓝牙耳机，可穿戴设备之类的）\n\n3. 传输方式分类。有线网络和无线网络。\n\n<u>计算机网络体系结构：</u>\n\n1. 计算机网络体系结构，分传输方向分类，传输对象分类\n\n1. 传输方向分类就是单工（只能单方向传输，单方面收或发信号），双工（同一时间内线路只允许一个方向通过），全双工（同时能去能回）\n\n2. 传输对象区分，单播（只给一个对象发），多播（一对多），广播（在一个范围区间内所有对象都能发送到）\n\n2. 常见的计算机网络三种数据交换。电路交换（一整条线路为两个对象服务专用），报文交换（数据发给中间对象，中间对象再决定怎么发给下一个对象，优点是不占用整个从头到尾的线路，同一时间上静态看，释放了一大段网络），分组交换（大数据包切割成小块谓之分组交换，不同小包走不同线路，最后在接收对象处拼成完整）。\n\n3. 现在常用分组交换\n\n4. 网络结构三要素，语法语义和时序\n\n5. OSI参考模型，中文名开放式系统互联参考模型，的七个层次。物理层最低，数据链路层，网络层，传输层，会话层，表示层，应用层【物数网传会表应】\n\n1. 物理层的对象是公路的物理存在性质，数据链路层的对象是每个公交上的老师负责每次到站时都清点学生人数，网络层的对象是一个个市间大公交站，传输层的对象是始发和终点公交站的出入口，会话层的对象是出入口管理员负责让车在顺利出入口，表示层是检票员管理上车人员的合规性，应用层是铭升公司所租车的出入口管理\n\n2. OSI参考模型的理念是下层为上层服务\n\n3. 【最低】物理层，单位比特。物理层的任务是透明地传送比特流，物理层的任务是抹平线路的物理差异\n\n4. 数据链路层，单位帧，负责在两个相邻节点上无差错地传输以帧为单位的数据，数据链路层的任务是把差错链路和无差错链路都抹平为无差错链路。\n\n5. 网络层。单位分组，网络层的主要任务是为网络上的不同主机提供通信【选路由器】。网络层的任务是把通信子网由多个节点连接而成的链路抹平。\n\n6. 传输层，该层提供会话层和网络层之间的传输服务，这种服务从会话层获得数据，并在必要时对数据进行分割然后将数据传递到网络层，并确保数据能正确无误地传送到网络层。因此,运输层负责提供主机中两个进程之间数据的可靠传送。【下三层主要任务通信子网的数据通信，上三层任务资源子网的数据处理，传输层在中间就是资源子网和通信子网的桥梁】传输层任务是抹平掉整个通信子网。\n\n7. 会话层（保证程序会话），其主要任务是负责维护两个实体之间的会话连接确保点到点的传输不被中断，并进行会话管理和数据交换管理。会话层任务是利用上面一层层的服务，让应用建立和维持会话。\n\n8. 表示层（保证数据符合约定格式）。它的主要功能是协商和建立数据交换的格式，解决各应用程序之间在数据格式表示上的差异,，以使一个主机应用层的数据可以被另一个主机的应用层理解。\n\n9. 应用层（保证应用程序运行）。它是用户应用程序和网络之间的接口，完成用户希望在网络上完成的各种工作【其作为最高理想，人话说是利用网络为用户干事儿】。\n\n11. OSI模型已经淘汰掉了，现在常用的是TCP/IP模型，后者对前者简化，表示会话应用合并了。\n\n12. TCP/IP模型分为网络接口层（物理层+数据链路层），网际层，传输层，应用层（会话层，表示层，应用层）。\n\n***\n\n**物理层**\n\n<u>物理层的基本概念：</u>\n\n1. 四大特性【事物的性质也就是成员属性也就可以描述出这个事物】：机械特性（用了什么接口，例如水晶头），电气特性（弱电电压之类的电气方面的内容），功能特性（也就是用途，这个用途当然只有一个那就是传输什么信号，电信号、光信号之类的），过程特性（通信方面的技术内容）\n\n3. 两种信号：数字信号和模拟信号。后者的特性是有连续性，有更加丰富的表现形式，数字信号有离散型\n\n5. 调制和编码：调制就是模拟信号转换，（不管数字信号还是模拟信号，调制吹后都是模拟信号），编码就是数字信号转换（编码之后都是数字信号）。编码的步骤是采样=>量化=>编码。\n\n6. 数字数据可以用数字发送器编码，也可以用调制器调制。模拟数据可以用PCM编码器编码，也可以用放大器调制成模拟信号\n\n8. 传输介质：双绞线，光纤，同轴电缆（淘汰了，当年打电话座机用的），无线。\n\n9. 无线信号频率标准IEEE802.11\n\n10. 双绞线分屏蔽双绞线STP和非屏蔽双绞线UTP，区别是抗干扰性和成本。制作标准，从左到右，568B是橙白、橙、绿白、蓝、蓝白、绿、棕白、棕，568A是13（橙白、绿白）和26（橙、绿）互换\n\n11. 光纤分单模光纤和多模光纤，单模传输距离远100KM，多模传输距离近2KM，造成这样是因为光在单模光纤里几乎直线，而在多模光纤里折射\n\n13. 三大系统，源系统（计算机网络中，发送数据的端 ）、传输系统（计算机网络中，中间所有给两个端传输的物理东西（学名传输介质））、目的系统（计算机网络中，接收数据的端）\n\n<u>物理层的基本通信技术：</u>\n\n1. 四种信道复用技术：所谓信道就是信息的传播介质（类似以太），复用的学名解释是“复用技术是指一种在传输路径上综合多路信道，然后恢复原机制或解除终端各信道复用技术的过程”，人话说就是解决了不同型号传输的时候怎么去分开来的技术，而这个技术是用来解决将多种不同信号在同一个信道上进行传输的问题，也就是同一个信道怎么传输多个不同端要发送的数据，一个无线路由器怎么在一个信道之内解决多个手机连wifi的问题。\n\n2. 四种技术分别为频分复用FDM（通过划分频率解决问题，就像四级考试耳机），时分复用TDM（在不同的时间段，不同的设备开始传输），波分复用WDM（特指光载波信号，根据光波波长区分不同端，专用设备是复用器，又叫合波器），码分复用CDM（把数据进行编码，来区分端）。\n\n4. 数据的传输方式：\n\n1. 通过同时间传输数量区分，串行传输（信号一位一位传输过去），特点是发送端可以边产生边发送，速度较慢，用于比较简单的信号线路如键盘，并行传输（信号直接打包成组传输过去），特点是发送端必须通过计算整理好一整组才能发送，速度较快，用于有一定数据处理能力的设备\n\n2. 通过数据报文的双方行为区分，同步传输（接收方和发送方要同时做好准备，一接一收时间一致很重要，）特点是需要两端的耦合性强，不同发送端朝同一个接收端发送也需要排队，异步传输，特点是速度较快，排队不死。\n\n3. 通过传输信号区分，基带传输（传输数字信号），频带传输（传输模拟信号），常见频带范围300-3400HZ\n\n4. 通过传输方向区分，单工，半双工，全双工\n\n5. 通过传输对象区分，单播，组播，广播\n\n***\n\n**数据链路层**\n\n<u>数据链路层基础概论：</u>\n\n1. 数据链路层是在物理层和网络层之间的协议，提供相邻节点的可靠数据传输\n\n3. 帧是一个数据的最后包装，学名数据链路层的协议数据单元。\n\n4. 对以太网，帧头是源mac地址，目的mac地址，类型，中间是数据，帧尾是校验\n\n5. 对局域网，帧头是源mac地址，目的mac地址，长度，LLC，SNAP，中间是数据，帧尾是校验\n\n7. MAC地址是48位世界上独一无二的地址\n\n9. 数据帧分两种，以太网（基本是广播和总线型）和局域网。\n\n11. 局域网数据帧中的协议分MAC协议和LLC协议，两者的作用是负责数据在不同网络中的无差别传输。MAC协议是介质控制访问，负责对接物理层，LLC协议是逻辑控制访问，负责对接网络层\n\n13. 数据链路层也分两种传输方式，单播和广播\n\n15. 数据链路层三个基本问题，封装成帧，透明传输，差错检测，分别对应其在源端、线路、目的端要干的活\n\n17. 局域网中的设备有集线器HUB（工作在物理层，对收到的信号进行整型令数据恢复整洁波形，同时再放大，同时它是多个节点的交汇中心），交换机（工作在数据链路层，为接入交换机的两个节点提供单独的电信号线路），网桥（工作在物理层和数据链路层中间，是两个端口的交换机）\n\n18. 最大特点是集线器是共享带宽，交换机是独享带宽，而网桥是只能支持两个接口\n\n19. 集线器之所以工作在物理层是因为它只负责物理方面的事情，整形和放大，交换机之所以工作在数据链路层是因为它除了负责物理事情还负责保证数据具有完整性和正确性，这是数据链路层的职责保证内容\n\n21. 冲突域和广播域，冲突域出现在第一层物理层，广播域出现在第二层数据链路层。人话理解，网络中的设备们，一个设备就是一个冲突域，对交换机或路由器，只要一个小树上连接的所有的多个局域网加在一起统称一个广播域，如果没有VLAN之类的技术，也可以说一个二层数据链路层设备就是一个广播域\n\n22. 作用是只要在同一个广播域的端，发送一个广播报文，整个广播域之内的端都可以收到广播报文，就这样\n\n<u>数据链路层的通信协议：</u>\n\n25. 虚拟局域网VLAN也就是virtual LAN，是将物理LAN口在逻辑上划分为多个广播域的技术，人话说就是把一个LAN变多个LAN，只不过是多个VLAN。技术的意义在于可以减少垃圾广播数据收取，增强安全性不收病毒广播数据，提高健壮性让一个广播域之内的设备挂掉不至于所有设备都挂掉，灵活构建工作组让你随心所欲控制数据的广播。\n\n26. VLAN的划分有基于端口，基于子网，基于mac地址，基于协议，基于匹配策略这几种划分方法原则，但基本只基于端口划分。\n\n27. 基于端口划分有三种方式，access（只允许通过一个VLAN，有点类似于直接用VLAN给端口命名），trunk（允许通过多个VLAN，有点类似于给端口贴上VLAN的标签所以可以贴多个），hybird（华为独有的技术）\n\n29. CSMA/CD，即载波侦听多路访问/冲突检测，规定了总线型网络中多个端同时发送数据的规则，主要解决了多个端同时发送数据造成冲突的问题。四大要点是先听再发（先听一下总线上有没有数据，有就等下再发），边听边发（一边发还一边听，有没有人打扰我），冲突停止（我在发的时候万一有其它端也发造成了冲突，就停下来），延迟后发（因为所有的端都遵循以上原则，所以冲突之后两个冲突的发送端都会停止下来，然后延迟一个随机数时长，再继续第一步）\n\n31. PPP点对点通信协议，最初为两个对等节点之间的IP流量传输提供封装协议，后来被用来端和ISP通信所用数据链路层协议，其规定了点对点数据封装的规则，人话说就是规定了点对点连接中，数据链路层如何封装成帧以及转化为比特流。封装之所以成问题而不是简单加个头尾，是因为要让数据帧的开始和结束标志在整个数据中都找不到第二个，若数据中有同样的流就做一个约定式替换\n\n33. CRC循环冗余校验，主要解决数据链路层三个基本问题的差错检测问题，规定了验证数据完整性一些原则。大概就是在发送端对数据进行多项式计算，把计算结果附加在帧的后面，而接收端也进行类似计算。\n\n34. CRC运算题解题方法是，多项式最高次幂是几就原数据后面加几个零产生第一个数，多项式最高次幂是几（如4）就列一个递减到0的数列（43210），在这个数下面如果原多项式有这个幂值就1没有就0得到第二个数（如P(X)=X^4+X+1，得到的第二个数是10011），列个竖式第一个数除以第二个数进行模二运算（规则类似并运算），余数的位数一定等于最高次幂的值如果不够就前面补0\n\n35. 余数附在原数据后产生第三个数据，接收端验算就是把第三个数据和第二个数据再进行一次模二运算结果一定是0\n\n***\n\n**网络层**\n\n1. 网络层的作用是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。人话说提供端到端服务（所谓端到端意思在源头和目的两端之间建立连接，重点“到”字）。\n\n2. 网络层的单位是分组\n\n3. IP协议，一共分四个，主要有三个，ARP地址解析协议（规定了根据IP地址获取物理地址的规则），ICMP网际控制报文协议（规定了传输控制消息的规则，所谓控制消息是指网络本身的一些属性消息，比如网络通不通，主机是否可达，路由是否可用等等），IGMP网际组管理协议（规定了IP主机和相邻的路由器创建多播组的组成员的规则，所谓组播就是介于单播和广播之间的一种方式），次要有一个RARP反地址解析协议（规定了根据物理地址找到IP地址的规则）\n\n4. IP地址是IP协议提供的一种统一的地址格式，规定如何为互联网上的网络和主机分配逻辑地址\n\n5. IP地址4字节32位，表示方法是点分十进制（一个字节一个点）\n\n7. IP地址是逻辑地址，mac地址是物理地址；mac地址唯一但IP地址不唯一，mac地址工作在第二层IP地址工作在网络层，mac地址48位IP地址32位（v6地址128位），IP地址取决网络拓扑，mac地址取决制造商\n\n8. IP地址由网络地址/网络号和主机地址/主机号组成，网络地址用来标识网段，主机地址用来标识设备\n\n9. 子网掩码是用来指明一个IP地址哪几位是网络地址哪几位是主机地址，即区分ABCDE类网络。子网掩码四段按二进制表示，全1的位置为网络地址全0的位置是主机地址，所以A类默认255.0.0.0，B类255.255.0.0，以此类推\n\n10. IP地址的分类：\n\n1. A（IP地址四段，1段网络地址234主机地址，而且第一个字节的前两位是0，范围1.0.0.1~127.255.255.254，有126个A类网络地址，每个网络可容纳主机1600万）\n\n2. B（12段网络地址，34段主机地址，有16384个网络，而且第一个字节的前两位是10，每个网络容量6万主机，范围128.0.0.1~191.255.255.254，第一个字节的前两位是110）\n\n3. C（123段网络地址，4段主机地址，而且第一个字节的前两位是110，有209万个网络，每个网络254个主机，范围192.0.0.1~223.255.255.254，第一个字节的前两位是110）\n\n4. D（历史称多播地址/组播地址，命名了一组应 该在此网络中收到一个分组的站点，而且第一个字节的前两位是1110，范围224.0.0.1~239.255.255.255）\n\n5. E类 第一个字节1111开头，保留\n\n6. 特殊地址：网络地址，主机号为全0的地址不可用。广播地址，主机号为全1的地址不可用，交换机收到发送端需要广播的数据就用广播地址向所有目标地址进行广播所以不能被真实设备使用。回环地址，127.0.0.1，用来做一个测试ip地址是否可用\n\n15. Ipv6地址由16字节128位组成，一般表示为16进制\n\n17. 子网划分：为了解决IP地址浪费，把一个大网络划分成若干子网，主要利用VLSM可变长子网掩码。\n\n18. VLSM是一种寻址技术。只能划分为2的幂次个子网\n\n20. 路由是指用分组方式从源端到目的端时决定端到端路径网络范围的进程，名字就很一目了然\n\n21. 路由是网络层最主要的工作任务，是网络层的基本设备，主要职责是数据转发，一个端口是一个网段\n\n22. 路由器中存各个网段的表格叫路由表\n\n23. 路由器是市间公交站台，交换机是市内小公交站台，信道是公交车本身，网关是每个市之间的大门的看门保安负责顺利畅通。\n\n24. 路由获取方式：路由表里的路有三种方法知道，第一是直连路由（直接连上了设备就根本不用知道怎么去端了），人工配置的静态路由（自己在表里写好去目的端需要通过哪些路由），动态路由（是由每个路由器互相广播自己所连接的路由自动产生的）\n\n25. 路由的配置方式：静态路由方式就是根据路由表来知道往哪走，缺省路由就是if elif else里那个else，最终默认的那个转发路由，动态路由是通过路由协议\n\n26. 动态路由协议主要有RIP路由信息协议（基于矢量，人话简单说就是一个图数据结构里它根据边的数量多寡来走最小的那条路，边是有矢量的嘛）、OSPF开放式最短路径优先（基于链路状态，通过算法综合分析链路的优劣，网速啊边的权重啊之类的），两者的区别是RIP是基于矢量的协议而OSPF基于链路状态，RIP适用于中小型网络拓扑而OSPF适用于较大规模的网络，RIP不支持可变长度子网掩码(VLSM)而OSPF支持，RIP不防环而OSPF防环，OSPF的收敛速度比RIP的更加迅速\n\n***\n\n**传输层**\n\n<u>传输层概论:</u>\n\n1. 端口号就是逻辑端口的编号\n\n2. 常见协议的端口号：\n\n3. FTP文件传输协议，21专门用来建立连接，20用来传数据\n\n4. TELNET远程登录，23\n\n5. SMTP电子邮件传输协议，发邮件的是SMTP协议，端口25，POP3邮局协议版本3是用来接邮件的，端口110\n\n6. DNS域名系统，53\n\n7. TFTP简单文件传输协议，相比FTP使用的TCP协议，TFTP用UDP协议比较不可靠，端口69\n\n8. HTTP超文本传输协议，80\n\n9. SNMP简单网络管理协议，161\n\n10. HTTPS超文本传输安全协议，443\n\n<u>传输层的两个重要协议：</u>\n\n1. TCP传输控制协议，特点是面向连接的传输层协议，提供可靠的交付服务，提供全双工通信，面向字节流\n\n2. TCP设置了滑动窗口，这是一种通过描述接收方数据缓冲区大小让发送方酌情发送数据的量的技术，缓冲区满了就不发\n\n3. 三次握手（我要和你连接，好我准备好了，那我来了），开传，四次挥手（我要分手，我把你给我的东西整理完再断开，我整理完了，那好分吧）\n\n4. UDP用户数据报协议，特点是无连接，尽最大努力交付，面向报文且没有拥塞控制，开销小且传输效率高\n\n5. TCP和UDP都会在报文前面加上首部，但两者加的首部不同\n\n***\n\n**应用层**\n\n1. 应用层的作用：应用层是最贴近用户的一层，作用为用户提供服务\n\n2. 应用层的常见协议有dns域名系统，FTP文件传输协议，远程终端协议TELNET，超文本传输协议HTTP，SMTP电子邮件传输协议，POP3邮局协议版本3，DHCP动态主机配置协议\n\n3. 要注意的考点是dns域名系统查询域名服务器有递归和迭代两种方法，递归就是传递归来，迭代就是分别问\n\n***\n\n**网络安全**\n\n<u>网络安全概论：</u>\n\n1. 网络安全是指网络系统的硬件、软件及系统中的数据受到保护，不因偶然的或者恶意的原因而遭受到破坏、更改、泄露，系统连续可靠地正常运行，网络服务不中断\n\n3. 计算机网络面临的威胁主要分主动攻击（主动破坏计算机网络，比如篡改，恶意程序，拒绝服务）和被动攻击（被动破坏计算机网络，主要是收集信息，比如截获，窃取，流量分析）两大类\n\n5. 网络系统的特性，优秀网络系统应该满足保密性（数据本身不泄露给非授权用户），完整性（数据未经授权不可更改），可用性（数据可以被正常使用，比如被ddos攻击的时候就没法正常用），可靠性（数据的内容及其传播可控），不可抵赖性（出现安全问题的时候提供依据和手段）\n\n7. 加密，目的是让得到了信息也无法知道内容，常见手段收MD5信息-摘要算法（记住128位），AES对称密钥加密（三种，128，192，256位），SHA1安全哈希算法（160位），RSA公钥加密私钥解密（1024位）\n\n8. 解密的过程就是加密的逆过程\n\n10. 对称加密就是同一个密钥加密解密，非对称加密就是一个密钥加密一个密钥解密\n\n12. 数字签名的四大特点是防止重放攻击（重放攻击就是重复发送一样的数据，可以是源端也可以是中间人，这么做之所以有意义举例我们可以重放一万次提现一万元），防止数据伪造，防止数据被篡改，防止数据抵赖\n\n14. 防火墙是一种访问控制技术，控制进出网络边界的分组\n\n15. 防火墙分四个区，local本地区域（安全优先级100，防火墙本身的区域，凡是防火墙主动发出的报文均可认为是local区域发出，凡是需要防火墙响应并处理的报文均可认为是local区域接收），trust受信区（安全优先级85，通常用来定义内部用户的网络），DMZ非军事化区（安全优先级50，通常用来定义内部服务器的网络），untrust非受信区（安全优先级5，通常用来定义internet等不安全网络）","slug":"408/众元教育网课 7天快速通过计算机网络期末考试","published":1,"updated":"2024-04-15T19:40:32.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnrc000vhk8z9mwm6036","content":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是b站视频《众元教育网课 7天快速通过计算机网络期末考试》的网课笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>评：</p>\n<p>本文也是早期笔记了，顾名思义，如果你想7天通过计算机网络考试，那么就对它进行学习，这是一份言简意赅处处要点的笔记。如果计算机网络是一座山，那么它就是地基上那层薄薄的土。</p>\n<p>放上来其实也没有什么意义，不过是一份旧笔记的存档，毕竟后来我们为了408，还有一份5万字的重磅笔记。而且我敢打包票，5万字笔记也概括不了计算机网络世界里的地基上薄薄的那层土。</p>\n<hr>\n<p><strong>计算机网络概论</strong></p>\n<p><u>计算机网络的概念：</u></p>\n<ol>\n<li><p>计算机网络定义：计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</p>\n</li>\n<li><p>地理位置不同的独立主机，通信线路连接实现资源共享。</p>\n</li>\n<li><p>计算机网络的组成：通信子网和资源子网</p>\n</li>\n<li><p>负责通信的包括光纤就是通信子网，所有你以为是资源的，就是资源子网</p>\n</li>\n<li><p>通信子网提供网络节点和线路，资源子网提供需要的数据</p>\n</li>\n<li><p>计算机网络的类型，分为三点。</p>\n</li>\n<li><p>拓扑结构分，星型（一个点散射），树型，总线型（一根主线，其他人从它那里牵直接分线），环型(总线型 只是首尾闭合)，网状结构</p>\n</li>\n<li><p>范围分类。局域网LAN（几百米到十几公里），城域网MAN（覆盖一个城市），广域网WAN（一个国家，一个大省），个人区域网PAN（个人网络，蓝牙耳机，可穿戴设备之类的）</p>\n</li>\n<li><p>传输方式分类。有线网络和无线网络。</p>\n</li>\n</ol>\n<p><u>计算机网络体系结构：</u></p>\n<ol>\n<li><p>计算机网络体系结构，分传输方向分类，传输对象分类</p>\n</li>\n<li><p>传输方向分类就是单工（只能单方向传输，单方面收或发信号），双工（同一时间内线路只允许一个方向通过），全双工（同时能去能回）</p>\n</li>\n<li><p>传输对象区分，单播（只给一个对象发），多播（一对多），广播（在一个范围区间内所有对象都能发送到）</p>\n</li>\n<li><p>常见的计算机网络三种数据交换。电路交换（一整条线路为两个对象服务专用），报文交换（数据发给中间对象，中间对象再决定怎么发给下一个对象，优点是不占用整个从头到尾的线路，同一时间上静态看，释放了一大段网络），分组交换（大数据包切割成小块谓之分组交换，不同小包走不同线路，最后在接收对象处拼成完整）。</p>\n</li>\n<li><p>现在常用分组交换</p>\n</li>\n<li><p>网络结构三要素，语法语义和时序</p>\n</li>\n<li><p>OSI参考模型，中文名开放式系统互联参考模型，的七个层次。物理层最低，数据链路层，网络层，传输层，会话层，表示层，应用层【物数网传会表应】</p>\n</li>\n<li><p>物理层的对象是公路的物理存在性质，数据链路层的对象是每个公交上的老师负责每次到站时都清点学生人数，网络层的对象是一个个市间大公交站，传输层的对象是始发和终点公交站的出入口，会话层的对象是出入口管理员负责让车在顺利出入口，表示层是检票员管理上车人员的合规性，应用层是铭升公司所租车的出入口管理</p>\n</li>\n<li><p>OSI参考模型的理念是下层为上层服务</p>\n</li>\n<li><p>【最低】物理层，单位比特。物理层的任务是透明地传送比特流，物理层的任务是抹平线路的物理差异</p>\n</li>\n<li><p>数据链路层，单位帧，负责在两个相邻节点上无差错地传输以帧为单位的数据，数据链路层的任务是把差错链路和无差错链路都抹平为无差错链路。</p>\n</li>\n<li><p>网络层。单位分组，网络层的主要任务是为网络上的不同主机提供通信【选路由器】。网络层的任务是把通信子网由多个节点连接而成的链路抹平。</p>\n</li>\n<li><p>传输层，该层提供会话层和网络层之间的传输服务，这种服务从会话层获得数据，并在必要时对数据进行分割然后将数据传递到网络层，并确保数据能正确无误地传送到网络层。因此,运输层负责提供主机中两个进程之间数据的可靠传送。【下三层主要任务通信子网的数据通信，上三层任务资源子网的数据处理，传输层在中间就是资源子网和通信子网的桥梁】传输层任务是抹平掉整个通信子网。</p>\n</li>\n<li><p>会话层（保证程序会话），其主要任务是负责维护两个实体之间的会话连接确保点到点的传输不被中断，并进行会话管理和数据交换管理。会话层任务是利用上面一层层的服务，让应用建立和维持会话。</p>\n</li>\n<li><p>表示层（保证数据符合约定格式）。它的主要功能是协商和建立数据交换的格式，解决各应用程序之间在数据格式表示上的差异,，以使一个主机应用层的数据可以被另一个主机的应用层理解。</p>\n</li>\n<li><p>应用层（保证应用程序运行）。它是用户应用程序和网络之间的接口，完成用户希望在网络上完成的各种工作【其作为最高理想，人话说是利用网络为用户干事儿】。</p>\n</li>\n<li><p>OSI模型已经淘汰掉了，现在常用的是TCP&#x2F;IP模型，后者对前者简化，表示会话应用合并了。</p>\n</li>\n<li><p>TCP&#x2F;IP模型分为网络接口层（物理层+数据链路层），网际层，传输层，应用层（会话层，表示层，应用层）。</p>\n</li>\n</ol>\n<hr>\n<p><strong>物理层</strong></p>\n<p><u>物理层的基本概念：</u></p>\n<ol>\n<li><p>四大特性【事物的性质也就是成员属性也就可以描述出这个事物】：机械特性（用了什么接口，例如水晶头），电气特性（弱电电压之类的电气方面的内容），功能特性（也就是用途，这个用途当然只有一个那就是传输什么信号，电信号、光信号之类的），过程特性（通信方面的技术内容）</p>\n</li>\n<li><p>两种信号：数字信号和模拟信号。后者的特性是有连续性，有更加丰富的表现形式，数字信号有离散型</p>\n</li>\n<li><p>调制和编码：调制就是模拟信号转换，（不管数字信号还是模拟信号，调制吹后都是模拟信号），编码就是数字信号转换（编码之后都是数字信号）。编码的步骤是采样&#x3D;&gt;量化&#x3D;&gt;编码。</p>\n</li>\n<li><p>数字数据可以用数字发送器编码，也可以用调制器调制。模拟数据可以用PCM编码器编码，也可以用放大器调制成模拟信号</p>\n</li>\n<li><p>传输介质：双绞线，光纤，同轴电缆（淘汰了，当年打电话座机用的），无线。</p>\n</li>\n<li><p>无线信号频率标准IEEE802.11</p>\n</li>\n<li><p>双绞线分屏蔽双绞线STP和非屏蔽双绞线UTP，区别是抗干扰性和成本。制作标准，从左到右，568B是橙白、橙、绿白、蓝、蓝白、绿、棕白、棕，568A是13（橙白、绿白）和26（橙、绿）互换</p>\n</li>\n<li><p>光纤分单模光纤和多模光纤，单模传输距离远100KM，多模传输距离近2KM，造成这样是因为光在单模光纤里几乎直线，而在多模光纤里折射</p>\n</li>\n<li><p>三大系统，源系统（计算机网络中，发送数据的端 ）、传输系统（计算机网络中，中间所有给两个端传输的物理东西（学名传输介质））、目的系统（计算机网络中，接收数据的端）</p>\n</li>\n</ol>\n<p><u>物理层的基本通信技术：</u></p>\n<ol>\n<li><p>四种信道复用技术：所谓信道就是信息的传播介质（类似以太），复用的学名解释是“复用技术是指一种在传输路径上综合多路信道，然后恢复原机制或解除终端各信道复用技术的过程”，人话说就是解决了不同型号传输的时候怎么去分开来的技术，而这个技术是用来解决将多种不同信号在同一个信道上进行传输的问题，也就是同一个信道怎么传输多个不同端要发送的数据，一个无线路由器怎么在一个信道之内解决多个手机连wifi的问题。</p>\n</li>\n<li><p>四种技术分别为频分复用FDM（通过划分频率解决问题，就像四级考试耳机），时分复用TDM（在不同的时间段，不同的设备开始传输），波分复用WDM（特指光载波信号，根据光波波长区分不同端，专用设备是复用器，又叫合波器），码分复用CDM（把数据进行编码，来区分端）。</p>\n</li>\n<li><p>数据的传输方式：</p>\n</li>\n<li><p>通过同时间传输数量区分，串行传输（信号一位一位传输过去），特点是发送端可以边产生边发送，速度较慢，用于比较简单的信号线路如键盘，并行传输（信号直接打包成组传输过去），特点是发送端必须通过计算整理好一整组才能发送，速度较快，用于有一定数据处理能力的设备</p>\n</li>\n<li><p>通过数据报文的双方行为区分，同步传输（接收方和发送方要同时做好准备，一接一收时间一致很重要，）特点是需要两端的耦合性强，不同发送端朝同一个接收端发送也需要排队，异步传输，特点是速度较快，排队不死。</p>\n</li>\n<li><p>通过传输信号区分，基带传输（传输数字信号），频带传输（传输模拟信号），常见频带范围300-3400HZ</p>\n</li>\n<li><p>通过传输方向区分，单工，半双工，全双工</p>\n</li>\n<li><p>通过传输对象区分，单播，组播，广播</p>\n</li>\n</ol>\n<hr>\n<p><strong>数据链路层</strong></p>\n<p><u>数据链路层基础概论：</u></p>\n<ol>\n<li><p>数据链路层是在物理层和网络层之间的协议，提供相邻节点的可靠数据传输</p>\n</li>\n<li><p>帧是一个数据的最后包装，学名数据链路层的协议数据单元。</p>\n</li>\n<li><p>对以太网，帧头是源mac地址，目的mac地址，类型，中间是数据，帧尾是校验</p>\n</li>\n<li><p>对局域网，帧头是源mac地址，目的mac地址，长度，LLC，SNAP，中间是数据，帧尾是校验</p>\n</li>\n<li><p>MAC地址是48位世界上独一无二的地址</p>\n</li>\n<li><p>数据帧分两种，以太网（基本是广播和总线型）和局域网。</p>\n</li>\n<li><p>局域网数据帧中的协议分MAC协议和LLC协议，两者的作用是负责数据在不同网络中的无差别传输。MAC协议是介质控制访问，负责对接物理层，LLC协议是逻辑控制访问，负责对接网络层</p>\n</li>\n<li><p>数据链路层也分两种传输方式，单播和广播</p>\n</li>\n<li><p>数据链路层三个基本问题，封装成帧，透明传输，差错检测，分别对应其在源端、线路、目的端要干的活</p>\n</li>\n<li><p>局域网中的设备有集线器HUB（工作在物理层，对收到的信号进行整型令数据恢复整洁波形，同时再放大，同时它是多个节点的交汇中心），交换机（工作在数据链路层，为接入交换机的两个节点提供单独的电信号线路），网桥（工作在物理层和数据链路层中间，是两个端口的交换机）</p>\n</li>\n<li><p>最大特点是集线器是共享带宽，交换机是独享带宽，而网桥是只能支持两个接口</p>\n</li>\n<li><p>集线器之所以工作在物理层是因为它只负责物理方面的事情，整形和放大，交换机之所以工作在数据链路层是因为它除了负责物理事情还负责保证数据具有完整性和正确性，这是数据链路层的职责保证内容</p>\n</li>\n<li><p>冲突域和广播域，冲突域出现在第一层物理层，广播域出现在第二层数据链路层。人话理解，网络中的设备们，一个设备就是一个冲突域，对交换机或路由器，只要一个小树上连接的所有的多个局域网加在一起统称一个广播域，如果没有VLAN之类的技术，也可以说一个二层数据链路层设备就是一个广播域</p>\n</li>\n<li><p>作用是只要在同一个广播域的端，发送一个广播报文，整个广播域之内的端都可以收到广播报文，就这样</p>\n</li>\n</ol>\n<p><u>数据链路层的通信协议：</u></p>\n<ol start=\"25\">\n<li><p>虚拟局域网VLAN也就是virtual LAN，是将物理LAN口在逻辑上划分为多个广播域的技术，人话说就是把一个LAN变多个LAN，只不过是多个VLAN。技术的意义在于可以减少垃圾广播数据收取，增强安全性不收病毒广播数据，提高健壮性让一个广播域之内的设备挂掉不至于所有设备都挂掉，灵活构建工作组让你随心所欲控制数据的广播。</p>\n</li>\n<li><p>VLAN的划分有基于端口，基于子网，基于mac地址，基于协议，基于匹配策略这几种划分方法原则，但基本只基于端口划分。</p>\n</li>\n<li><p>基于端口划分有三种方式，access（只允许通过一个VLAN，有点类似于直接用VLAN给端口命名），trunk（允许通过多个VLAN，有点类似于给端口贴上VLAN的标签所以可以贴多个），hybird（华为独有的技术）</p>\n</li>\n<li><p>CSMA&#x2F;CD，即载波侦听多路访问&#x2F;冲突检测，规定了总线型网络中多个端同时发送数据的规则，主要解决了多个端同时发送数据造成冲突的问题。四大要点是先听再发（先听一下总线上有没有数据，有就等下再发），边听边发（一边发还一边听，有没有人打扰我），冲突停止（我在发的时候万一有其它端也发造成了冲突，就停下来），延迟后发（因为所有的端都遵循以上原则，所以冲突之后两个冲突的发送端都会停止下来，然后延迟一个随机数时长，再继续第一步）</p>\n</li>\n<li><p>PPP点对点通信协议，最初为两个对等节点之间的IP流量传输提供封装协议，后来被用来端和ISP通信所用数据链路层协议，其规定了点对点数据封装的规则，人话说就是规定了点对点连接中，数据链路层如何封装成帧以及转化为比特流。封装之所以成问题而不是简单加个头尾，是因为要让数据帧的开始和结束标志在整个数据中都找不到第二个，若数据中有同样的流就做一个约定式替换</p>\n</li>\n<li><p>CRC循环冗余校验，主要解决数据链路层三个基本问题的差错检测问题，规定了验证数据完整性一些原则。大概就是在发送端对数据进行多项式计算，把计算结果附加在帧的后面，而接收端也进行类似计算。</p>\n</li>\n<li><p>CRC运算题解题方法是，多项式最高次幂是几就原数据后面加几个零产生第一个数，多项式最高次幂是几（如4）就列一个递减到0的数列（43210），在这个数下面如果原多项式有这个幂值就1没有就0得到第二个数（如P(X)&#x3D;X^4+X+1，得到的第二个数是10011），列个竖式第一个数除以第二个数进行模二运算（规则类似并运算），余数的位数一定等于最高次幂的值如果不够就前面补0</p>\n</li>\n<li><p>余数附在原数据后产生第三个数据，接收端验算就是把第三个数据和第二个数据再进行一次模二运算结果一定是0</p>\n</li>\n</ol>\n<hr>\n<p><strong>网络层</strong></p>\n<ol>\n<li><p>网络层的作用是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。人话说提供端到端服务（所谓端到端意思在源头和目的两端之间建立连接，重点“到”字）。</p>\n</li>\n<li><p>网络层的单位是分组</p>\n</li>\n<li><p>IP协议，一共分四个，主要有三个，ARP地址解析协议（规定了根据IP地址获取物理地址的规则），ICMP网际控制报文协议（规定了传输控制消息的规则，所谓控制消息是指网络本身的一些属性消息，比如网络通不通，主机是否可达，路由是否可用等等），IGMP网际组管理协议（规定了IP主机和相邻的路由器创建多播组的组成员的规则，所谓组播就是介于单播和广播之间的一种方式），次要有一个RARP反地址解析协议（规定了根据物理地址找到IP地址的规则）</p>\n</li>\n<li><p>IP地址是IP协议提供的一种统一的地址格式，规定如何为互联网上的网络和主机分配逻辑地址</p>\n</li>\n<li><p>IP地址4字节32位，表示方法是点分十进制（一个字节一个点）</p>\n</li>\n<li><p>IP地址是逻辑地址，mac地址是物理地址；mac地址唯一但IP地址不唯一，mac地址工作在第二层IP地址工作在网络层，mac地址48位IP地址32位（v6地址128位），IP地址取决网络拓扑，mac地址取决制造商</p>\n</li>\n<li><p>IP地址由网络地址&#x2F;网络号和主机地址&#x2F;主机号组成，网络地址用来标识网段，主机地址用来标识设备</p>\n</li>\n<li><p>子网掩码是用来指明一个IP地址哪几位是网络地址哪几位是主机地址，即区分ABCDE类网络。子网掩码四段按二进制表示，全1的位置为网络地址全0的位置是主机地址，所以A类默认255.0.0.0，B类255.255.0.0，以此类推</p>\n</li>\n<li><p>IP地址的分类：</p>\n</li>\n<li><p>A（IP地址四段，1段网络地址234主机地址，而且第一个字节的前两位是0，范围1.0.0.1~127.255.255.254，有126个A类网络地址，每个网络可容纳主机1600万）</p>\n</li>\n<li><p>B（12段网络地址，34段主机地址，有16384个网络，而且第一个字节的前两位是10，每个网络容量6万主机，范围128.0.0.1~191.255.255.254，第一个字节的前两位是110）</p>\n</li>\n<li><p>C（123段网络地址，4段主机地址，而且第一个字节的前两位是110，有209万个网络，每个网络254个主机，范围192.0.0.1~223.255.255.254，第一个字节的前两位是110）</p>\n</li>\n<li><p>D（历史称多播地址&#x2F;组播地址，命名了一组应 该在此网络中收到一个分组的站点，而且第一个字节的前两位是1110，范围224.0.0.1~239.255.255.255）</p>\n</li>\n<li><p>E类 第一个字节1111开头，保留</p>\n</li>\n<li><p>特殊地址：网络地址，主机号为全0的地址不可用。广播地址，主机号为全1的地址不可用，交换机收到发送端需要广播的数据就用广播地址向所有目标地址进行广播所以不能被真实设备使用。回环地址，127.0.0.1，用来做一个测试ip地址是否可用</p>\n</li>\n<li><p>Ipv6地址由16字节128位组成，一般表示为16进制</p>\n</li>\n<li><p>子网划分：为了解决IP地址浪费，把一个大网络划分成若干子网，主要利用VLSM可变长子网掩码。</p>\n</li>\n<li><p>VLSM是一种寻址技术。只能划分为2的幂次个子网</p>\n</li>\n<li><p>路由是指用分组方式从源端到目的端时决定端到端路径网络范围的进程，名字就很一目了然</p>\n</li>\n<li><p>路由是网络层最主要的工作任务，是网络层的基本设备，主要职责是数据转发，一个端口是一个网段</p>\n</li>\n<li><p>路由器中存各个网段的表格叫路由表</p>\n</li>\n<li><p>路由器是市间公交站台，交换机是市内小公交站台，信道是公交车本身，网关是每个市之间的大门的看门保安负责顺利畅通。</p>\n</li>\n<li><p>路由获取方式：路由表里的路有三种方法知道，第一是直连路由（直接连上了设备就根本不用知道怎么去端了），人工配置的静态路由（自己在表里写好去目的端需要通过哪些路由），动态路由（是由每个路由器互相广播自己所连接的路由自动产生的）</p>\n</li>\n<li><p>路由的配置方式：静态路由方式就是根据路由表来知道往哪走，缺省路由就是if elif else里那个else，最终默认的那个转发路由，动态路由是通过路由协议</p>\n</li>\n<li><p>动态路由协议主要有RIP路由信息协议（基于矢量，人话简单说就是一个图数据结构里它根据边的数量多寡来走最小的那条路，边是有矢量的嘛）、OSPF开放式最短路径优先（基于链路状态，通过算法综合分析链路的优劣，网速啊边的权重啊之类的），两者的区别是RIP是基于矢量的协议而OSPF基于链路状态，RIP适用于中小型网络拓扑而OSPF适用于较大规模的网络，RIP不支持可变长度子网掩码(VLSM)而OSPF支持，RIP不防环而OSPF防环，OSPF的收敛速度比RIP的更加迅速</p>\n</li>\n</ol>\n<hr>\n<p><strong>传输层</strong></p>\n<p><u>传输层概论:</u></p>\n<ol>\n<li><p>端口号就是逻辑端口的编号</p>\n</li>\n<li><p>常见协议的端口号：</p>\n</li>\n<li><p>FTP文件传输协议，21专门用来建立连接，20用来传数据</p>\n</li>\n<li><p>TELNET远程登录，23</p>\n</li>\n<li><p>SMTP电子邮件传输协议，发邮件的是SMTP协议，端口25，POP3邮局协议版本3是用来接邮件的，端口110</p>\n</li>\n<li><p>DNS域名系统，53</p>\n</li>\n<li><p>TFTP简单文件传输协议，相比FTP使用的TCP协议，TFTP用UDP协议比较不可靠，端口69</p>\n</li>\n<li><p>HTTP超文本传输协议，80</p>\n</li>\n<li><p>SNMP简单网络管理协议，161</p>\n</li>\n<li><p>HTTPS超文本传输安全协议，443</p>\n</li>\n</ol>\n<p><u>传输层的两个重要协议：</u></p>\n<ol>\n<li><p>TCP传输控制协议，特点是面向连接的传输层协议，提供可靠的交付服务，提供全双工通信，面向字节流</p>\n</li>\n<li><p>TCP设置了滑动窗口，这是一种通过描述接收方数据缓冲区大小让发送方酌情发送数据的量的技术，缓冲区满了就不发</p>\n</li>\n<li><p>三次握手（我要和你连接，好我准备好了，那我来了），开传，四次挥手（我要分手，我把你给我的东西整理完再断开，我整理完了，那好分吧）</p>\n</li>\n<li><p>UDP用户数据报协议，特点是无连接，尽最大努力交付，面向报文且没有拥塞控制，开销小且传输效率高</p>\n</li>\n<li><p>TCP和UDP都会在报文前面加上首部，但两者加的首部不同</p>\n</li>\n</ol>\n<hr>\n<p><strong>应用层</strong></p>\n<ol>\n<li><p>应用层的作用：应用层是最贴近用户的一层，作用为用户提供服务</p>\n</li>\n<li><p>应用层的常见协议有dns域名系统，FTP文件传输协议，远程终端协议TELNET，超文本传输协议HTTP，SMTP电子邮件传输协议，POP3邮局协议版本3，DHCP动态主机配置协议</p>\n</li>\n<li><p>要注意的考点是dns域名系统查询域名服务器有递归和迭代两种方法，递归就是传递归来，迭代就是分别问</p>\n</li>\n</ol>\n<hr>\n<p><strong>网络安全</strong></p>\n<p><u>网络安全概论：</u></p>\n<ol>\n<li><p>网络安全是指网络系统的硬件、软件及系统中的数据受到保护，不因偶然的或者恶意的原因而遭受到破坏、更改、泄露，系统连续可靠地正常运行，网络服务不中断</p>\n</li>\n<li><p>计算机网络面临的威胁主要分主动攻击（主动破坏计算机网络，比如篡改，恶意程序，拒绝服务）和被动攻击（被动破坏计算机网络，主要是收集信息，比如截获，窃取，流量分析）两大类</p>\n</li>\n<li><p>网络系统的特性，优秀网络系统应该满足保密性（数据本身不泄露给非授权用户），完整性（数据未经授权不可更改），可用性（数据可以被正常使用，比如被ddos攻击的时候就没法正常用），可靠性（数据的内容及其传播可控），不可抵赖性（出现安全问题的时候提供依据和手段）</p>\n</li>\n<li><p>加密，目的是让得到了信息也无法知道内容，常见手段收MD5信息-摘要算法（记住128位），AES对称密钥加密（三种，128，192，256位），SHA1安全哈希算法（160位），RSA公钥加密私钥解密（1024位）</p>\n</li>\n<li><p>解密的过程就是加密的逆过程</p>\n</li>\n<li><p>对称加密就是同一个密钥加密解密，非对称加密就是一个密钥加密一个密钥解密</p>\n</li>\n<li><p>数字签名的四大特点是防止重放攻击（重放攻击就是重复发送一样的数据，可以是源端也可以是中间人，这么做之所以有意义举例我们可以重放一万次提现一万元），防止数据伪造，防止数据被篡改，防止数据抵赖</p>\n</li>\n<li><p>防火墙是一种访问控制技术，控制进出网络边界的分组</p>\n</li>\n<li><p>防火墙分四个区，local本地区域（安全优先级100，防火墙本身的区域，凡是防火墙主动发出的报文均可认为是local区域发出，凡是需要防火墙响应并处理的报文均可认为是local区域接收），trust受信区（安全优先级85，通常用来定义内部用户的网络），DMZ非军事化区（安全优先级50，通常用来定义内部服务器的网络），untrust非受信区（安全优先级5，通常用来定义internet等不安全网络）</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是b站视频《众元教育网课 7天快速通过计算机网络期末考试》的网课笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>评：</p>\n<p>本文也是早期笔记了，顾名思义，如果你想7天通过计算机网络考试，那么就对它进行学习，这是一份言简意赅处处要点的笔记。如果计算机网络是一座山，那么它就是地基上那层薄薄的土。</p>\n<p>放上来其实也没有什么意义，不过是一份旧笔记的存档，毕竟后来我们为了408，还有一份5万字的重磅笔记。而且我敢打包票，5万字笔记也概括不了计算机网络世界里的地基上薄薄的那层土。</p>\n<hr>\n<p><strong>计算机网络概论</strong></p>\n<p><u>计算机网络的概念：</u></p>\n<ol>\n<li><p>计算机网络定义：计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</p>\n</li>\n<li><p>地理位置不同的独立主机，通信线路连接实现资源共享。</p>\n</li>\n<li><p>计算机网络的组成：通信子网和资源子网</p>\n</li>\n<li><p>负责通信的包括光纤就是通信子网，所有你以为是资源的，就是资源子网</p>\n</li>\n<li><p>通信子网提供网络节点和线路，资源子网提供需要的数据</p>\n</li>\n<li><p>计算机网络的类型，分为三点。</p>\n</li>\n<li><p>拓扑结构分，星型（一个点散射），树型，总线型（一根主线，其他人从它那里牵直接分线），环型(总线型 只是首尾闭合)，网状结构</p>\n</li>\n<li><p>范围分类。局域网LAN（几百米到十几公里），城域网MAN（覆盖一个城市），广域网WAN（一个国家，一个大省），个人区域网PAN（个人网络，蓝牙耳机，可穿戴设备之类的）</p>\n</li>\n<li><p>传输方式分类。有线网络和无线网络。</p>\n</li>\n</ol>\n<p><u>计算机网络体系结构：</u></p>\n<ol>\n<li><p>计算机网络体系结构，分传输方向分类，传输对象分类</p>\n</li>\n<li><p>传输方向分类就是单工（只能单方向传输，单方面收或发信号），双工（同一时间内线路只允许一个方向通过），全双工（同时能去能回）</p>\n</li>\n<li><p>传输对象区分，单播（只给一个对象发），多播（一对多），广播（在一个范围区间内所有对象都能发送到）</p>\n</li>\n<li><p>常见的计算机网络三种数据交换。电路交换（一整条线路为两个对象服务专用），报文交换（数据发给中间对象，中间对象再决定怎么发给下一个对象，优点是不占用整个从头到尾的线路，同一时间上静态看，释放了一大段网络），分组交换（大数据包切割成小块谓之分组交换，不同小包走不同线路，最后在接收对象处拼成完整）。</p>\n</li>\n<li><p>现在常用分组交换</p>\n</li>\n<li><p>网络结构三要素，语法语义和时序</p>\n</li>\n<li><p>OSI参考模型，中文名开放式系统互联参考模型，的七个层次。物理层最低，数据链路层，网络层，传输层，会话层，表示层，应用层【物数网传会表应】</p>\n</li>\n<li><p>物理层的对象是公路的物理存在性质，数据链路层的对象是每个公交上的老师负责每次到站时都清点学生人数，网络层的对象是一个个市间大公交站，传输层的对象是始发和终点公交站的出入口，会话层的对象是出入口管理员负责让车在顺利出入口，表示层是检票员管理上车人员的合规性，应用层是铭升公司所租车的出入口管理</p>\n</li>\n<li><p>OSI参考模型的理念是下层为上层服务</p>\n</li>\n<li><p>【最低】物理层，单位比特。物理层的任务是透明地传送比特流，物理层的任务是抹平线路的物理差异</p>\n</li>\n<li><p>数据链路层，单位帧，负责在两个相邻节点上无差错地传输以帧为单位的数据，数据链路层的任务是把差错链路和无差错链路都抹平为无差错链路。</p>\n</li>\n<li><p>网络层。单位分组，网络层的主要任务是为网络上的不同主机提供通信【选路由器】。网络层的任务是把通信子网由多个节点连接而成的链路抹平。</p>\n</li>\n<li><p>传输层，该层提供会话层和网络层之间的传输服务，这种服务从会话层获得数据，并在必要时对数据进行分割然后将数据传递到网络层，并确保数据能正确无误地传送到网络层。因此,运输层负责提供主机中两个进程之间数据的可靠传送。【下三层主要任务通信子网的数据通信，上三层任务资源子网的数据处理，传输层在中间就是资源子网和通信子网的桥梁】传输层任务是抹平掉整个通信子网。</p>\n</li>\n<li><p>会话层（保证程序会话），其主要任务是负责维护两个实体之间的会话连接确保点到点的传输不被中断，并进行会话管理和数据交换管理。会话层任务是利用上面一层层的服务，让应用建立和维持会话。</p>\n</li>\n<li><p>表示层（保证数据符合约定格式）。它的主要功能是协商和建立数据交换的格式，解决各应用程序之间在数据格式表示上的差异,，以使一个主机应用层的数据可以被另一个主机的应用层理解。</p>\n</li>\n<li><p>应用层（保证应用程序运行）。它是用户应用程序和网络之间的接口，完成用户希望在网络上完成的各种工作【其作为最高理想，人话说是利用网络为用户干事儿】。</p>\n</li>\n<li><p>OSI模型已经淘汰掉了，现在常用的是TCP&#x2F;IP模型，后者对前者简化，表示会话应用合并了。</p>\n</li>\n<li><p>TCP&#x2F;IP模型分为网络接口层（物理层+数据链路层），网际层，传输层，应用层（会话层，表示层，应用层）。</p>\n</li>\n</ol>\n<hr>\n<p><strong>物理层</strong></p>\n<p><u>物理层的基本概念：</u></p>\n<ol>\n<li><p>四大特性【事物的性质也就是成员属性也就可以描述出这个事物】：机械特性（用了什么接口，例如水晶头），电气特性（弱电电压之类的电气方面的内容），功能特性（也就是用途，这个用途当然只有一个那就是传输什么信号，电信号、光信号之类的），过程特性（通信方面的技术内容）</p>\n</li>\n<li><p>两种信号：数字信号和模拟信号。后者的特性是有连续性，有更加丰富的表现形式，数字信号有离散型</p>\n</li>\n<li><p>调制和编码：调制就是模拟信号转换，（不管数字信号还是模拟信号，调制吹后都是模拟信号），编码就是数字信号转换（编码之后都是数字信号）。编码的步骤是采样&#x3D;&gt;量化&#x3D;&gt;编码。</p>\n</li>\n<li><p>数字数据可以用数字发送器编码，也可以用调制器调制。模拟数据可以用PCM编码器编码，也可以用放大器调制成模拟信号</p>\n</li>\n<li><p>传输介质：双绞线，光纤，同轴电缆（淘汰了，当年打电话座机用的），无线。</p>\n</li>\n<li><p>无线信号频率标准IEEE802.11</p>\n</li>\n<li><p>双绞线分屏蔽双绞线STP和非屏蔽双绞线UTP，区别是抗干扰性和成本。制作标准，从左到右，568B是橙白、橙、绿白、蓝、蓝白、绿、棕白、棕，568A是13（橙白、绿白）和26（橙、绿）互换</p>\n</li>\n<li><p>光纤分单模光纤和多模光纤，单模传输距离远100KM，多模传输距离近2KM，造成这样是因为光在单模光纤里几乎直线，而在多模光纤里折射</p>\n</li>\n<li><p>三大系统，源系统（计算机网络中，发送数据的端 ）、传输系统（计算机网络中，中间所有给两个端传输的物理东西（学名传输介质））、目的系统（计算机网络中，接收数据的端）</p>\n</li>\n</ol>\n<p><u>物理层的基本通信技术：</u></p>\n<ol>\n<li><p>四种信道复用技术：所谓信道就是信息的传播介质（类似以太），复用的学名解释是“复用技术是指一种在传输路径上综合多路信道，然后恢复原机制或解除终端各信道复用技术的过程”，人话说就是解决了不同型号传输的时候怎么去分开来的技术，而这个技术是用来解决将多种不同信号在同一个信道上进行传输的问题，也就是同一个信道怎么传输多个不同端要发送的数据，一个无线路由器怎么在一个信道之内解决多个手机连wifi的问题。</p>\n</li>\n<li><p>四种技术分别为频分复用FDM（通过划分频率解决问题，就像四级考试耳机），时分复用TDM（在不同的时间段，不同的设备开始传输），波分复用WDM（特指光载波信号，根据光波波长区分不同端，专用设备是复用器，又叫合波器），码分复用CDM（把数据进行编码，来区分端）。</p>\n</li>\n<li><p>数据的传输方式：</p>\n</li>\n<li><p>通过同时间传输数量区分，串行传输（信号一位一位传输过去），特点是发送端可以边产生边发送，速度较慢，用于比较简单的信号线路如键盘，并行传输（信号直接打包成组传输过去），特点是发送端必须通过计算整理好一整组才能发送，速度较快，用于有一定数据处理能力的设备</p>\n</li>\n<li><p>通过数据报文的双方行为区分，同步传输（接收方和发送方要同时做好准备，一接一收时间一致很重要，）特点是需要两端的耦合性强，不同发送端朝同一个接收端发送也需要排队，异步传输，特点是速度较快，排队不死。</p>\n</li>\n<li><p>通过传输信号区分，基带传输（传输数字信号），频带传输（传输模拟信号），常见频带范围300-3400HZ</p>\n</li>\n<li><p>通过传输方向区分，单工，半双工，全双工</p>\n</li>\n<li><p>通过传输对象区分，单播，组播，广播</p>\n</li>\n</ol>\n<hr>\n<p><strong>数据链路层</strong></p>\n<p><u>数据链路层基础概论：</u></p>\n<ol>\n<li><p>数据链路层是在物理层和网络层之间的协议，提供相邻节点的可靠数据传输</p>\n</li>\n<li><p>帧是一个数据的最后包装，学名数据链路层的协议数据单元。</p>\n</li>\n<li><p>对以太网，帧头是源mac地址，目的mac地址，类型，中间是数据，帧尾是校验</p>\n</li>\n<li><p>对局域网，帧头是源mac地址，目的mac地址，长度，LLC，SNAP，中间是数据，帧尾是校验</p>\n</li>\n<li><p>MAC地址是48位世界上独一无二的地址</p>\n</li>\n<li><p>数据帧分两种，以太网（基本是广播和总线型）和局域网。</p>\n</li>\n<li><p>局域网数据帧中的协议分MAC协议和LLC协议，两者的作用是负责数据在不同网络中的无差别传输。MAC协议是介质控制访问，负责对接物理层，LLC协议是逻辑控制访问，负责对接网络层</p>\n</li>\n<li><p>数据链路层也分两种传输方式，单播和广播</p>\n</li>\n<li><p>数据链路层三个基本问题，封装成帧，透明传输，差错检测，分别对应其在源端、线路、目的端要干的活</p>\n</li>\n<li><p>局域网中的设备有集线器HUB（工作在物理层，对收到的信号进行整型令数据恢复整洁波形，同时再放大，同时它是多个节点的交汇中心），交换机（工作在数据链路层，为接入交换机的两个节点提供单独的电信号线路），网桥（工作在物理层和数据链路层中间，是两个端口的交换机）</p>\n</li>\n<li><p>最大特点是集线器是共享带宽，交换机是独享带宽，而网桥是只能支持两个接口</p>\n</li>\n<li><p>集线器之所以工作在物理层是因为它只负责物理方面的事情，整形和放大，交换机之所以工作在数据链路层是因为它除了负责物理事情还负责保证数据具有完整性和正确性，这是数据链路层的职责保证内容</p>\n</li>\n<li><p>冲突域和广播域，冲突域出现在第一层物理层，广播域出现在第二层数据链路层。人话理解，网络中的设备们，一个设备就是一个冲突域，对交换机或路由器，只要一个小树上连接的所有的多个局域网加在一起统称一个广播域，如果没有VLAN之类的技术，也可以说一个二层数据链路层设备就是一个广播域</p>\n</li>\n<li><p>作用是只要在同一个广播域的端，发送一个广播报文，整个广播域之内的端都可以收到广播报文，就这样</p>\n</li>\n</ol>\n<p><u>数据链路层的通信协议：</u></p>\n<ol start=\"25\">\n<li><p>虚拟局域网VLAN也就是virtual LAN，是将物理LAN口在逻辑上划分为多个广播域的技术，人话说就是把一个LAN变多个LAN，只不过是多个VLAN。技术的意义在于可以减少垃圾广播数据收取，增强安全性不收病毒广播数据，提高健壮性让一个广播域之内的设备挂掉不至于所有设备都挂掉，灵活构建工作组让你随心所欲控制数据的广播。</p>\n</li>\n<li><p>VLAN的划分有基于端口，基于子网，基于mac地址，基于协议，基于匹配策略这几种划分方法原则，但基本只基于端口划分。</p>\n</li>\n<li><p>基于端口划分有三种方式，access（只允许通过一个VLAN，有点类似于直接用VLAN给端口命名），trunk（允许通过多个VLAN，有点类似于给端口贴上VLAN的标签所以可以贴多个），hybird（华为独有的技术）</p>\n</li>\n<li><p>CSMA&#x2F;CD，即载波侦听多路访问&#x2F;冲突检测，规定了总线型网络中多个端同时发送数据的规则，主要解决了多个端同时发送数据造成冲突的问题。四大要点是先听再发（先听一下总线上有没有数据，有就等下再发），边听边发（一边发还一边听，有没有人打扰我），冲突停止（我在发的时候万一有其它端也发造成了冲突，就停下来），延迟后发（因为所有的端都遵循以上原则，所以冲突之后两个冲突的发送端都会停止下来，然后延迟一个随机数时长，再继续第一步）</p>\n</li>\n<li><p>PPP点对点通信协议，最初为两个对等节点之间的IP流量传输提供封装协议，后来被用来端和ISP通信所用数据链路层协议，其规定了点对点数据封装的规则，人话说就是规定了点对点连接中，数据链路层如何封装成帧以及转化为比特流。封装之所以成问题而不是简单加个头尾，是因为要让数据帧的开始和结束标志在整个数据中都找不到第二个，若数据中有同样的流就做一个约定式替换</p>\n</li>\n<li><p>CRC循环冗余校验，主要解决数据链路层三个基本问题的差错检测问题，规定了验证数据完整性一些原则。大概就是在发送端对数据进行多项式计算，把计算结果附加在帧的后面，而接收端也进行类似计算。</p>\n</li>\n<li><p>CRC运算题解题方法是，多项式最高次幂是几就原数据后面加几个零产生第一个数，多项式最高次幂是几（如4）就列一个递减到0的数列（43210），在这个数下面如果原多项式有这个幂值就1没有就0得到第二个数（如P(X)&#x3D;X^4+X+1，得到的第二个数是10011），列个竖式第一个数除以第二个数进行模二运算（规则类似并运算），余数的位数一定等于最高次幂的值如果不够就前面补0</p>\n</li>\n<li><p>余数附在原数据后产生第三个数据，接收端验算就是把第三个数据和第二个数据再进行一次模二运算结果一定是0</p>\n</li>\n</ol>\n<hr>\n<p><strong>网络层</strong></p>\n<ol>\n<li><p>网络层的作用是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。人话说提供端到端服务（所谓端到端意思在源头和目的两端之间建立连接，重点“到”字）。</p>\n</li>\n<li><p>网络层的单位是分组</p>\n</li>\n<li><p>IP协议，一共分四个，主要有三个，ARP地址解析协议（规定了根据IP地址获取物理地址的规则），ICMP网际控制报文协议（规定了传输控制消息的规则，所谓控制消息是指网络本身的一些属性消息，比如网络通不通，主机是否可达，路由是否可用等等），IGMP网际组管理协议（规定了IP主机和相邻的路由器创建多播组的组成员的规则，所谓组播就是介于单播和广播之间的一种方式），次要有一个RARP反地址解析协议（规定了根据物理地址找到IP地址的规则）</p>\n</li>\n<li><p>IP地址是IP协议提供的一种统一的地址格式，规定如何为互联网上的网络和主机分配逻辑地址</p>\n</li>\n<li><p>IP地址4字节32位，表示方法是点分十进制（一个字节一个点）</p>\n</li>\n<li><p>IP地址是逻辑地址，mac地址是物理地址；mac地址唯一但IP地址不唯一，mac地址工作在第二层IP地址工作在网络层，mac地址48位IP地址32位（v6地址128位），IP地址取决网络拓扑，mac地址取决制造商</p>\n</li>\n<li><p>IP地址由网络地址&#x2F;网络号和主机地址&#x2F;主机号组成，网络地址用来标识网段，主机地址用来标识设备</p>\n</li>\n<li><p>子网掩码是用来指明一个IP地址哪几位是网络地址哪几位是主机地址，即区分ABCDE类网络。子网掩码四段按二进制表示，全1的位置为网络地址全0的位置是主机地址，所以A类默认255.0.0.0，B类255.255.0.0，以此类推</p>\n</li>\n<li><p>IP地址的分类：</p>\n</li>\n<li><p>A（IP地址四段，1段网络地址234主机地址，而且第一个字节的前两位是0，范围1.0.0.1~127.255.255.254，有126个A类网络地址，每个网络可容纳主机1600万）</p>\n</li>\n<li><p>B（12段网络地址，34段主机地址，有16384个网络，而且第一个字节的前两位是10，每个网络容量6万主机，范围128.0.0.1~191.255.255.254，第一个字节的前两位是110）</p>\n</li>\n<li><p>C（123段网络地址，4段主机地址，而且第一个字节的前两位是110，有209万个网络，每个网络254个主机，范围192.0.0.1~223.255.255.254，第一个字节的前两位是110）</p>\n</li>\n<li><p>D（历史称多播地址&#x2F;组播地址，命名了一组应 该在此网络中收到一个分组的站点，而且第一个字节的前两位是1110，范围224.0.0.1~239.255.255.255）</p>\n</li>\n<li><p>E类 第一个字节1111开头，保留</p>\n</li>\n<li><p>特殊地址：网络地址，主机号为全0的地址不可用。广播地址，主机号为全1的地址不可用，交换机收到发送端需要广播的数据就用广播地址向所有目标地址进行广播所以不能被真实设备使用。回环地址，127.0.0.1，用来做一个测试ip地址是否可用</p>\n</li>\n<li><p>Ipv6地址由16字节128位组成，一般表示为16进制</p>\n</li>\n<li><p>子网划分：为了解决IP地址浪费，把一个大网络划分成若干子网，主要利用VLSM可变长子网掩码。</p>\n</li>\n<li><p>VLSM是一种寻址技术。只能划分为2的幂次个子网</p>\n</li>\n<li><p>路由是指用分组方式从源端到目的端时决定端到端路径网络范围的进程，名字就很一目了然</p>\n</li>\n<li><p>路由是网络层最主要的工作任务，是网络层的基本设备，主要职责是数据转发，一个端口是一个网段</p>\n</li>\n<li><p>路由器中存各个网段的表格叫路由表</p>\n</li>\n<li><p>路由器是市间公交站台，交换机是市内小公交站台，信道是公交车本身，网关是每个市之间的大门的看门保安负责顺利畅通。</p>\n</li>\n<li><p>路由获取方式：路由表里的路有三种方法知道，第一是直连路由（直接连上了设备就根本不用知道怎么去端了），人工配置的静态路由（自己在表里写好去目的端需要通过哪些路由），动态路由（是由每个路由器互相广播自己所连接的路由自动产生的）</p>\n</li>\n<li><p>路由的配置方式：静态路由方式就是根据路由表来知道往哪走，缺省路由就是if elif else里那个else，最终默认的那个转发路由，动态路由是通过路由协议</p>\n</li>\n<li><p>动态路由协议主要有RIP路由信息协议（基于矢量，人话简单说就是一个图数据结构里它根据边的数量多寡来走最小的那条路，边是有矢量的嘛）、OSPF开放式最短路径优先（基于链路状态，通过算法综合分析链路的优劣，网速啊边的权重啊之类的），两者的区别是RIP是基于矢量的协议而OSPF基于链路状态，RIP适用于中小型网络拓扑而OSPF适用于较大规模的网络，RIP不支持可变长度子网掩码(VLSM)而OSPF支持，RIP不防环而OSPF防环，OSPF的收敛速度比RIP的更加迅速</p>\n</li>\n</ol>\n<hr>\n<p><strong>传输层</strong></p>\n<p><u>传输层概论:</u></p>\n<ol>\n<li><p>端口号就是逻辑端口的编号</p>\n</li>\n<li><p>常见协议的端口号：</p>\n</li>\n<li><p>FTP文件传输协议，21专门用来建立连接，20用来传数据</p>\n</li>\n<li><p>TELNET远程登录，23</p>\n</li>\n<li><p>SMTP电子邮件传输协议，发邮件的是SMTP协议，端口25，POP3邮局协议版本3是用来接邮件的，端口110</p>\n</li>\n<li><p>DNS域名系统，53</p>\n</li>\n<li><p>TFTP简单文件传输协议，相比FTP使用的TCP协议，TFTP用UDP协议比较不可靠，端口69</p>\n</li>\n<li><p>HTTP超文本传输协议，80</p>\n</li>\n<li><p>SNMP简单网络管理协议，161</p>\n</li>\n<li><p>HTTPS超文本传输安全协议，443</p>\n</li>\n</ol>\n<p><u>传输层的两个重要协议：</u></p>\n<ol>\n<li><p>TCP传输控制协议，特点是面向连接的传输层协议，提供可靠的交付服务，提供全双工通信，面向字节流</p>\n</li>\n<li><p>TCP设置了滑动窗口，这是一种通过描述接收方数据缓冲区大小让发送方酌情发送数据的量的技术，缓冲区满了就不发</p>\n</li>\n<li><p>三次握手（我要和你连接，好我准备好了，那我来了），开传，四次挥手（我要分手，我把你给我的东西整理完再断开，我整理完了，那好分吧）</p>\n</li>\n<li><p>UDP用户数据报协议，特点是无连接，尽最大努力交付，面向报文且没有拥塞控制，开销小且传输效率高</p>\n</li>\n<li><p>TCP和UDP都会在报文前面加上首部，但两者加的首部不同</p>\n</li>\n</ol>\n<hr>\n<p><strong>应用层</strong></p>\n<ol>\n<li><p>应用层的作用：应用层是最贴近用户的一层，作用为用户提供服务</p>\n</li>\n<li><p>应用层的常见协议有dns域名系统，FTP文件传输协议，远程终端协议TELNET，超文本传输协议HTTP，SMTP电子邮件传输协议，POP3邮局协议版本3，DHCP动态主机配置协议</p>\n</li>\n<li><p>要注意的考点是dns域名系统查询域名服务器有递归和迭代两种方法，递归就是传递归来，迭代就是分别问</p>\n</li>\n</ol>\n<hr>\n<p><strong>网络安全</strong></p>\n<p><u>网络安全概论：</u></p>\n<ol>\n<li><p>网络安全是指网络系统的硬件、软件及系统中的数据受到保护，不因偶然的或者恶意的原因而遭受到破坏、更改、泄露，系统连续可靠地正常运行，网络服务不中断</p>\n</li>\n<li><p>计算机网络面临的威胁主要分主动攻击（主动破坏计算机网络，比如篡改，恶意程序，拒绝服务）和被动攻击（被动破坏计算机网络，主要是收集信息，比如截获，窃取，流量分析）两大类</p>\n</li>\n<li><p>网络系统的特性，优秀网络系统应该满足保密性（数据本身不泄露给非授权用户），完整性（数据未经授权不可更改），可用性（数据可以被正常使用，比如被ddos攻击的时候就没法正常用），可靠性（数据的内容及其传播可控），不可抵赖性（出现安全问题的时候提供依据和手段）</p>\n</li>\n<li><p>加密，目的是让得到了信息也无法知道内容，常见手段收MD5信息-摘要算法（记住128位），AES对称密钥加密（三种，128，192，256位），SHA1安全哈希算法（160位），RSA公钥加密私钥解密（1024位）</p>\n</li>\n<li><p>解密的过程就是加密的逆过程</p>\n</li>\n<li><p>对称加密就是同一个密钥加密解密，非对称加密就是一个密钥加密一个密钥解密</p>\n</li>\n<li><p>数字签名的四大特点是防止重放攻击（重放攻击就是重复发送一样的数据，可以是源端也可以是中间人，这么做之所以有意义举例我们可以重放一万次提现一万元），防止数据伪造，防止数据被篡改，防止数据抵赖</p>\n</li>\n<li><p>防火墙是一种访问控制技术，控制进出网络边界的分组</p>\n</li>\n<li><p>防火墙分四个区，local本地区域（安全优先级100，防火墙本身的区域，凡是防火墙主动发出的报文均可认为是local区域发出，凡是需要防火墙响应并处理的报文均可认为是local区域接收），trust受信区（安全优先级85，通常用来定义内部用户的网络），DMZ非军事化区（安全优先级50，通常用来定义内部服务器的网络），untrust非受信区（安全优先级5，通常用来定义internet等不安全网络）</p>\n</li>\n</ol>\n"},{"title":"野人","date":"2023-04-06T12:19:44.000Z","auto_excerpt":"true","_content":"掸去身上尘埃\n\n回到潮湿的温暖洞穴\n\n野人每个毛孔都舒张开来\n\n感受到了自己存在\n\n\n<br/>\n\n\n身上的伤口还略微作痛\n\n但我们不能用爱情来疗伤\n\n好在尚且不算饥饿\n\n今天狩猎的收获寥寥\n\n2021.5.17\n","source":"_posts/诗/野人.md","raw":"---\ntitle: 野人\ndate: 2023-04-06 20:19:44\ntags: \ncategories:\n  - - 诗\nauto_excerpt: \"true\"\n---\n掸去身上尘埃\n\n回到潮湿的温暖洞穴\n\n野人每个毛孔都舒张开来\n\n感受到了自己存在\n\n\n<br/>\n\n\n身上的伤口还略微作痛\n\n但我们不能用爱情来疗伤\n\n好在尚且不算饥饿\n\n今天狩猎的收获寥寥\n\n2021.5.17\n","slug":"诗/野人","published":1,"updated":"2024-04-14T15:32:37.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnrc000yhk8zaktu0cks","content":"<p>掸去身上尘埃</p>\n<p>回到潮湿的温暖洞穴</p>\n<p>野人每个毛孔都舒张开来</p>\n<p>感受到了自己存在</p>\n<br/>\n\n\n<p>身上的伤口还略微作痛</p>\n<p>但我们不能用爱情来疗伤</p>\n<p>好在尚且不算饥饿</p>\n<p>今天狩猎的收获寥寥</p>\n<p>2021.5.17</p>\n","site":{"data":{}},"excerpt":"","more":"<p>掸去身上尘埃</p>\n<p>回到潮湿的温暖洞穴</p>\n<p>野人每个毛孔都舒张开来</p>\n<p>感受到了自己存在</p>\n<br/>\n\n\n<p>身上的伤口还略微作痛</p>\n<p>但我们不能用爱情来疗伤</p>\n<p>好在尚且不算饥饿</p>\n<p>今天狩猎的收获寥寥</p>\n<p>2021.5.17</p>\n"},{"title":"霉变","date":"2023-04-17T00:47:44.000Z","auto_excerpt":"true","_content":"\n如果你说你不卷  \n\n那么你的生命大概已经在熄灭的边缘  \n\n我的亲人  \n\n请不要在潮湿的角落里霉变  \n\n迎风奔跑如果你内心尚存在无悔的部分\n\n2024年4月17日​","source":"_posts/诗/霉变.md","raw":"---\ntitle: 霉变\ndate: 2023-04-17 08:47:44\ntags: \ncategories:\n  - - 诗\nauto_excerpt: \"true\"\n---\n\n如果你说你不卷  \n\n那么你的生命大概已经在熄灭的边缘  \n\n我的亲人  \n\n请不要在潮湿的角落里霉变  \n\n迎风奔跑如果你内心尚存在无悔的部分\n\n2024年4月17日​","slug":"诗/霉变","published":1,"updated":"2024-04-17T00:56:11.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnrc000zhk8z7bjy1k0i","content":"<p>如果你说你不卷  </p>\n<p>那么你的生命大概已经在熄灭的边缘  </p>\n<p>我的亲人  </p>\n<p>请不要在潮湿的角落里霉变  </p>\n<p>迎风奔跑如果你内心尚存在无悔的部分</p>\n<p>2024年4月17日​</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果你说你不卷  </p>\n<p>那么你的生命大概已经在熄灭的边缘  </p>\n<p>我的亲人  </p>\n<p>请不要在潮湿的角落里霉变  </p>\n<p>迎风奔跑如果你内心尚存在无悔的部分</p>\n<p>2024年4月17日​</p>\n"},{"date":"2023-04-27T05:50:44.000Z","title":"理想是一种咖啡","auto_excerpt":"true","_content":"我也不知道我为什么要一口一口温吞着咖啡，我也不知道这是从开始到现在喝的第几杯咖啡。\n写日记的好习惯已经抛弃很久了，日子混混沌沌地磕磕绊绊着，当我发现一切都道阻且长。人生是一种旅途，没有地图只有心中的罗盘，理想是一种咖啡，旅途一开始让你兴奋，直到完成之前却都不能停息，反复勾勒你的憔悴。\n如果你选择追求一种理想人生，它既是你的枷锁也是你的毒品，我的视力降低，腰疼手麻，失眠又嗜睡。咖啡，我喜欢你，咖啡，我愿意饮用你，咖啡，你会抓起我疲倦的神经，狠狠地迫使我，不要逃避眼前的迷雾。在彼岸到达之前，我只有你和心中的导航罗盘。\n正如人生只有一次，人生能有几杯咖啡？我忘了，我想起来了，我又忘了，很多不重要的事情我都忘了。我醒了，我又睡了，醒了，我又睡了，醒醒睡睡。","source":"_posts/随记/理想是一种咖啡.md","raw":"---\ndate: 2023-04-27 13:50:44\ntags: \ntitle: 理想是一种咖啡\ncategories:\n  - - 随记\nauto_excerpt: \"true\"\n---\n我也不知道我为什么要一口一口温吞着咖啡，我也不知道这是从开始到现在喝的第几杯咖啡。\n写日记的好习惯已经抛弃很久了，日子混混沌沌地磕磕绊绊着，当我发现一切都道阻且长。人生是一种旅途，没有地图只有心中的罗盘，理想是一种咖啡，旅途一开始让你兴奋，直到完成之前却都不能停息，反复勾勒你的憔悴。\n如果你选择追求一种理想人生，它既是你的枷锁也是你的毒品，我的视力降低，腰疼手麻，失眠又嗜睡。咖啡，我喜欢你，咖啡，我愿意饮用你，咖啡，你会抓起我疲倦的神经，狠狠地迫使我，不要逃避眼前的迷雾。在彼岸到达之前，我只有你和心中的导航罗盘。\n正如人生只有一次，人生能有几杯咖啡？我忘了，我想起来了，我又忘了，很多不重要的事情我都忘了。我醒了，我又睡了，醒了，我又睡了，醒醒睡睡。","slug":"随记/理想是一种咖啡","published":1,"updated":"2024-04-16T09:43:01.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnrd0011hk8z0501d42z","content":"<p>我也不知道我为什么要一口一口温吞着咖啡，我也不知道这是从开始到现在喝的第几杯咖啡。<br>写日记的好习惯已经抛弃很久了，日子混混沌沌地磕磕绊绊着，当我发现一切都道阻且长。人生是一种旅途，没有地图只有心中的罗盘，理想是一种咖啡，旅途一开始让你兴奋，直到完成之前却都不能停息，反复勾勒你的憔悴。<br>如果你选择追求一种理想人生，它既是你的枷锁也是你的毒品，我的视力降低，腰疼手麻，失眠又嗜睡。咖啡，我喜欢你，咖啡，我愿意饮用你，咖啡，你会抓起我疲倦的神经，狠狠地迫使我，不要逃避眼前的迷雾。在彼岸到达之前，我只有你和心中的导航罗盘。<br>正如人生只有一次，人生能有几杯咖啡？我忘了，我想起来了，我又忘了，很多不重要的事情我都忘了。我醒了，我又睡了，醒了，我又睡了，醒醒睡睡。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我也不知道我为什么要一口一口温吞着咖啡，我也不知道这是从开始到现在喝的第几杯咖啡。<br>写日记的好习惯已经抛弃很久了，日子混混沌沌地磕磕绊绊着，当我发现一切都道阻且长。人生是一种旅途，没有地图只有心中的罗盘，理想是一种咖啡，旅途一开始让你兴奋，直到完成之前却都不能停息，反复勾勒你的憔悴。<br>如果你选择追求一种理想人生，它既是你的枷锁也是你的毒品，我的视力降低，腰疼手麻，失眠又嗜睡。咖啡，我喜欢你，咖啡，我愿意饮用你，咖啡，你会抓起我疲倦的神经，狠狠地迫使我，不要逃避眼前的迷雾。在彼岸到达之前，我只有你和心中的导航罗盘。<br>正如人生只有一次，人生能有几杯咖啡？我忘了，我想起来了，我又忘了，很多不重要的事情我都忘了。我醒了，我又睡了，醒了，我又睡了，醒醒睡睡。</p>\n"},{"title":"状态转移方程中的状态究竟是指什么？","date":"2023-08-08T09:10:05.000Z","auto_excerpt":"true","_content":"学习算法之初我就对状态到底是指什么这个问题非常好奇，状态究竟是什么？又是怎么能称之为转移的？今天查阅书籍终于明白了一些本质。\n\n首先我们搞明白状态的定义。状态就是指“对象执行某个活动”。“对象执行某个活动”这句话中有两个重要参数：对象和活动。\n\n具体而言，以小明离家去学校的过程为例，用状态来理解，即按照“对象执行某个活动”来理解，可以把“小明离家去学校”这件事分解为四个状态，1. 状态一：小明离家出发；2. 状态二：小明经过公交站  ；3. 状态三：小明经过超市  ；4. 状态四：小明到达学校。整个过程中，“对象”一直是小明，总计分别执行“离家出发”、“经过公交站”、“经过超市”、“到达学校”四个活动。\n\n然后我们理解“状态转移”中所谓的转移。所谓转移其实就是指转换，即，状态转移用人话说实际上就是“主角要做的事情变了”，就这么简单。\n\n以“小明离家去学校”为例子，在这个过程中，小明作为活动的执行者，分别执行四个活动，也就是四件要做的事，这四件要做的事分别是离家出发、经过公交站、经过超市、到达学校，当小明作为对象，按次序变化四次自己所要做的不同的事，就能达成目的。\n\n接着补充知识，状态的转移是通过触发条件的。比如小明从状态一切换到状态二的触发条件，就是“走到了公交车站”，经过公交车站就是触发小明状态转换的条件，当这个条件被触发，小明开始切换状态，即切换要做的事，即从从做“离家触发”这件事，切换到做“经过公交车站”这件事。\n\n上述是对生活中的状态转移的理解，这种通过状态转移（也就是要做的事发生变化）达成目的方法其实很好用文字描述、用图像想象。不过，好像依旧不太好理解一般算法题“状态转移方程”。\n\n以斐波那契数列问题为例，状态转移方程为f(n) = f(n-1) + f(n-2)，对象是谁？怎么转移？\n\n在斐波那契数列的状态转移方程中，按“主角要做的事情变了”来理解，主角就是拿着数学草稿纸的我们，我们要做的事情，就是构造斐波那契数列。\n\n更具体而言，如何构造出斐波那契数列？观察f(n) = f(n-1) + f(n-2)这个解题的状态转移方程我们会发现，这个算式实际上是指如何一步步运算斐波那契数列的下一个数字，即这个数学方程定义了如何演算出“斐波那契数列的下一个数字”的所有步骤，当我们（或者负责运行运算的冯诺依曼计算机）开始根据这个方程的指示，去计算斐波那契数列的下一个数字，只需根据方程不停地切换演算步骤，就是一步步的状态转移。\n\n具体而言，对斐波那契数列问题，要描述“如何运算斐波那契数列的下一个数字”的过程，我们定义三个状态，第一个是演算 f(n-1)，第二个是演算f(n-2)，第三个是演算 f(n)。\n\n我们开始演算，状态开始转移。我们第一步先运算f(n-1)，f(n-1)运算结束，是第二步运算f(n-2)的触发条件，f(n-2)和f(n-1)都运算完，则是第三步“求出f(n)”的运算条件，当这三个状态转移完毕，即我们或者冯诺依曼计算机，按触发条件依次要做的三件事做完，我们就成功得到了斐波那契数列的下一个数字。\n\n因此，状态转移方程究竟是什么这件事其实很简单，状态转移描述的是过程，过程就是逻辑程序，整个状态转移方程不过就是像高级语言、流程图一样，本质上只是在描述我们如何解决这个问题的一步步逻辑，就这么简单。状态转移这个名词比较迷惑，实际上通俗一点说，状态转移=主角要做的事变化，仅此而已。\n\n最后，综上，写出状态转移方程，犹如斐波那契数列问题，我们得先知道我们要解决的是什么问题，解决斐波那契数列问题的实质是解决如何演算出斐波那契数列的下一个数字，这全凭直觉谁能想到呢？\n\n当我们明确了需要被解决的问题，就可以根据目标，去明确解决问题的过程，解决问题之前可以先尝试找到解决这个问题本质上是需要解决什么问题，我想这是一点数学小启示（当然我是数学学渣，愚者千虑所得到的一点知识，对学霸肯定像常识和呼吸一样自然）。","source":"_posts/算法/状态转移方程中的状态究竟是指什么？.md","raw":"---\ntitle: 状态转移方程中的状态究竟是指什么？\ndate: 2023-08-08 17:10:05\ntags: \ncategories:\n  - - 算法\nauto_excerpt: \"true\"\n---\n学习算法之初我就对状态到底是指什么这个问题非常好奇，状态究竟是什么？又是怎么能称之为转移的？今天查阅书籍终于明白了一些本质。\n\n首先我们搞明白状态的定义。状态就是指“对象执行某个活动”。“对象执行某个活动”这句话中有两个重要参数：对象和活动。\n\n具体而言，以小明离家去学校的过程为例，用状态来理解，即按照“对象执行某个活动”来理解，可以把“小明离家去学校”这件事分解为四个状态，1. 状态一：小明离家出发；2. 状态二：小明经过公交站  ；3. 状态三：小明经过超市  ；4. 状态四：小明到达学校。整个过程中，“对象”一直是小明，总计分别执行“离家出发”、“经过公交站”、“经过超市”、“到达学校”四个活动。\n\n然后我们理解“状态转移”中所谓的转移。所谓转移其实就是指转换，即，状态转移用人话说实际上就是“主角要做的事情变了”，就这么简单。\n\n以“小明离家去学校”为例子，在这个过程中，小明作为活动的执行者，分别执行四个活动，也就是四件要做的事，这四件要做的事分别是离家出发、经过公交站、经过超市、到达学校，当小明作为对象，按次序变化四次自己所要做的不同的事，就能达成目的。\n\n接着补充知识，状态的转移是通过触发条件的。比如小明从状态一切换到状态二的触发条件，就是“走到了公交车站”，经过公交车站就是触发小明状态转换的条件，当这个条件被触发，小明开始切换状态，即切换要做的事，即从从做“离家触发”这件事，切换到做“经过公交车站”这件事。\n\n上述是对生活中的状态转移的理解，这种通过状态转移（也就是要做的事发生变化）达成目的方法其实很好用文字描述、用图像想象。不过，好像依旧不太好理解一般算法题“状态转移方程”。\n\n以斐波那契数列问题为例，状态转移方程为f(n) = f(n-1) + f(n-2)，对象是谁？怎么转移？\n\n在斐波那契数列的状态转移方程中，按“主角要做的事情变了”来理解，主角就是拿着数学草稿纸的我们，我们要做的事情，就是构造斐波那契数列。\n\n更具体而言，如何构造出斐波那契数列？观察f(n) = f(n-1) + f(n-2)这个解题的状态转移方程我们会发现，这个算式实际上是指如何一步步运算斐波那契数列的下一个数字，即这个数学方程定义了如何演算出“斐波那契数列的下一个数字”的所有步骤，当我们（或者负责运行运算的冯诺依曼计算机）开始根据这个方程的指示，去计算斐波那契数列的下一个数字，只需根据方程不停地切换演算步骤，就是一步步的状态转移。\n\n具体而言，对斐波那契数列问题，要描述“如何运算斐波那契数列的下一个数字”的过程，我们定义三个状态，第一个是演算 f(n-1)，第二个是演算f(n-2)，第三个是演算 f(n)。\n\n我们开始演算，状态开始转移。我们第一步先运算f(n-1)，f(n-1)运算结束，是第二步运算f(n-2)的触发条件，f(n-2)和f(n-1)都运算完，则是第三步“求出f(n)”的运算条件，当这三个状态转移完毕，即我们或者冯诺依曼计算机，按触发条件依次要做的三件事做完，我们就成功得到了斐波那契数列的下一个数字。\n\n因此，状态转移方程究竟是什么这件事其实很简单，状态转移描述的是过程，过程就是逻辑程序，整个状态转移方程不过就是像高级语言、流程图一样，本质上只是在描述我们如何解决这个问题的一步步逻辑，就这么简单。状态转移这个名词比较迷惑，实际上通俗一点说，状态转移=主角要做的事变化，仅此而已。\n\n最后，综上，写出状态转移方程，犹如斐波那契数列问题，我们得先知道我们要解决的是什么问题，解决斐波那契数列问题的实质是解决如何演算出斐波那契数列的下一个数字，这全凭直觉谁能想到呢？\n\n当我们明确了需要被解决的问题，就可以根据目标，去明确解决问题的过程，解决问题之前可以先尝试找到解决这个问题本质上是需要解决什么问题，我想这是一点数学小启示（当然我是数学学渣，愚者千虑所得到的一点知识，对学霸肯定像常识和呼吸一样自然）。","slug":"算法/状态转移方程中的状态究竟是指什么？","published":1,"updated":"2024-04-16T12:00:30.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnrd0013hk8zfl4mhdt7","content":"<p>学习算法之初我就对状态到底是指什么这个问题非常好奇，状态究竟是什么？又是怎么能称之为转移的？今天查阅书籍终于明白了一些本质。</p>\n<p>首先我们搞明白状态的定义。状态就是指“对象执行某个活动”。“对象执行某个活动”这句话中有两个重要参数：对象和活动。</p>\n<p>具体而言，以小明离家去学校的过程为例，用状态来理解，即按照“对象执行某个活动”来理解，可以把“小明离家去学校”这件事分解为四个状态，1. 状态一：小明离家出发；2. 状态二：小明经过公交站  ；3. 状态三：小明经过超市  ；4. 状态四：小明到达学校。整个过程中，“对象”一直是小明，总计分别执行“离家出发”、“经过公交站”、“经过超市”、“到达学校”四个活动。</p>\n<p>然后我们理解“状态转移”中所谓的转移。所谓转移其实就是指转换，即，状态转移用人话说实际上就是“主角要做的事情变了”，就这么简单。</p>\n<p>以“小明离家去学校”为例子，在这个过程中，小明作为活动的执行者，分别执行四个活动，也就是四件要做的事，这四件要做的事分别是离家出发、经过公交站、经过超市、到达学校，当小明作为对象，按次序变化四次自己所要做的不同的事，就能达成目的。</p>\n<p>接着补充知识，状态的转移是通过触发条件的。比如小明从状态一切换到状态二的触发条件，就是“走到了公交车站”，经过公交车站就是触发小明状态转换的条件，当这个条件被触发，小明开始切换状态，即切换要做的事，即从从做“离家触发”这件事，切换到做“经过公交车站”这件事。</p>\n<p>上述是对生活中的状态转移的理解，这种通过状态转移（也就是要做的事发生变化）达成目的方法其实很好用文字描述、用图像想象。不过，好像依旧不太好理解一般算法题“状态转移方程”。</p>\n<p>以斐波那契数列问题为例，状态转移方程为f(n) &#x3D; f(n-1) + f(n-2)，对象是谁？怎么转移？</p>\n<p>在斐波那契数列的状态转移方程中，按“主角要做的事情变了”来理解，主角就是拿着数学草稿纸的我们，我们要做的事情，就是构造斐波那契数列。</p>\n<p>更具体而言，如何构造出斐波那契数列？观察f(n) &#x3D; f(n-1) + f(n-2)这个解题的状态转移方程我们会发现，这个算式实际上是指如何一步步运算斐波那契数列的下一个数字，即这个数学方程定义了如何演算出“斐波那契数列的下一个数字”的所有步骤，当我们（或者负责运行运算的冯诺依曼计算机）开始根据这个方程的指示，去计算斐波那契数列的下一个数字，只需根据方程不停地切换演算步骤，就是一步步的状态转移。</p>\n<p>具体而言，对斐波那契数列问题，要描述“如何运算斐波那契数列的下一个数字”的过程，我们定义三个状态，第一个是演算 f(n-1)，第二个是演算f(n-2)，第三个是演算 f(n)。</p>\n<p>我们开始演算，状态开始转移。我们第一步先运算f(n-1)，f(n-1)运算结束，是第二步运算f(n-2)的触发条件，f(n-2)和f(n-1)都运算完，则是第三步“求出f(n)”的运算条件，当这三个状态转移完毕，即我们或者冯诺依曼计算机，按触发条件依次要做的三件事做完，我们就成功得到了斐波那契数列的下一个数字。</p>\n<p>因此，状态转移方程究竟是什么这件事其实很简单，状态转移描述的是过程，过程就是逻辑程序，整个状态转移方程不过就是像高级语言、流程图一样，本质上只是在描述我们如何解决这个问题的一步步逻辑，就这么简单。状态转移这个名词比较迷惑，实际上通俗一点说，状态转移&#x3D;主角要做的事变化，仅此而已。</p>\n<p>最后，综上，写出状态转移方程，犹如斐波那契数列问题，我们得先知道我们要解决的是什么问题，解决斐波那契数列问题的实质是解决如何演算出斐波那契数列的下一个数字，这全凭直觉谁能想到呢？</p>\n<p>当我们明确了需要被解决的问题，就可以根据目标，去明确解决问题的过程，解决问题之前可以先尝试找到解决这个问题本质上是需要解决什么问题，我想这是一点数学小启示（当然我是数学学渣，愚者千虑所得到的一点知识，对学霸肯定像常识和呼吸一样自然）。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>学习算法之初我就对状态到底是指什么这个问题非常好奇，状态究竟是什么？又是怎么能称之为转移的？今天查阅书籍终于明白了一些本质。</p>\n<p>首先我们搞明白状态的定义。状态就是指“对象执行某个活动”。“对象执行某个活动”这句话中有两个重要参数：对象和活动。</p>\n<p>具体而言，以小明离家去学校的过程为例，用状态来理解，即按照“对象执行某个活动”来理解，可以把“小明离家去学校”这件事分解为四个状态，1. 状态一：小明离家出发；2. 状态二：小明经过公交站  ；3. 状态三：小明经过超市  ；4. 状态四：小明到达学校。整个过程中，“对象”一直是小明，总计分别执行“离家出发”、“经过公交站”、“经过超市”、“到达学校”四个活动。</p>\n<p>然后我们理解“状态转移”中所谓的转移。所谓转移其实就是指转换，即，状态转移用人话说实际上就是“主角要做的事情变了”，就这么简单。</p>\n<p>以“小明离家去学校”为例子，在这个过程中，小明作为活动的执行者，分别执行四个活动，也就是四件要做的事，这四件要做的事分别是离家出发、经过公交站、经过超市、到达学校，当小明作为对象，按次序变化四次自己所要做的不同的事，就能达成目的。</p>\n<p>接着补充知识，状态的转移是通过触发条件的。比如小明从状态一切换到状态二的触发条件，就是“走到了公交车站”，经过公交车站就是触发小明状态转换的条件，当这个条件被触发，小明开始切换状态，即切换要做的事，即从从做“离家触发”这件事，切换到做“经过公交车站”这件事。</p>\n<p>上述是对生活中的状态转移的理解，这种通过状态转移（也就是要做的事发生变化）达成目的方法其实很好用文字描述、用图像想象。不过，好像依旧不太好理解一般算法题“状态转移方程”。</p>\n<p>以斐波那契数列问题为例，状态转移方程为f(n) &#x3D; f(n-1) + f(n-2)，对象是谁？怎么转移？</p>\n<p>在斐波那契数列的状态转移方程中，按“主角要做的事情变了”来理解，主角就是拿着数学草稿纸的我们，我们要做的事情，就是构造斐波那契数列。</p>\n<p>更具体而言，如何构造出斐波那契数列？观察f(n) &#x3D; f(n-1) + f(n-2)这个解题的状态转移方程我们会发现，这个算式实际上是指如何一步步运算斐波那契数列的下一个数字，即这个数学方程定义了如何演算出“斐波那契数列的下一个数字”的所有步骤，当我们（或者负责运行运算的冯诺依曼计算机）开始根据这个方程的指示，去计算斐波那契数列的下一个数字，只需根据方程不停地切换演算步骤，就是一步步的状态转移。</p>\n<p>具体而言，对斐波那契数列问题，要描述“如何运算斐波那契数列的下一个数字”的过程，我们定义三个状态，第一个是演算 f(n-1)，第二个是演算f(n-2)，第三个是演算 f(n)。</p>\n<p>我们开始演算，状态开始转移。我们第一步先运算f(n-1)，f(n-1)运算结束，是第二步运算f(n-2)的触发条件，f(n-2)和f(n-1)都运算完，则是第三步“求出f(n)”的运算条件，当这三个状态转移完毕，即我们或者冯诺依曼计算机，按触发条件依次要做的三件事做完，我们就成功得到了斐波那契数列的下一个数字。</p>\n<p>因此，状态转移方程究竟是什么这件事其实很简单，状态转移描述的是过程，过程就是逻辑程序，整个状态转移方程不过就是像高级语言、流程图一样，本质上只是在描述我们如何解决这个问题的一步步逻辑，就这么简单。状态转移这个名词比较迷惑，实际上通俗一点说，状态转移&#x3D;主角要做的事变化，仅此而已。</p>\n<p>最后，综上，写出状态转移方程，犹如斐波那契数列问题，我们得先知道我们要解决的是什么问题，解决斐波那契数列问题的实质是解决如何演算出斐波那契数列的下一个数字，这全凭直觉谁能想到呢？</p>\n<p>当我们明确了需要被解决的问题，就可以根据目标，去明确解决问题的过程，解决问题之前可以先尝试找到解决这个问题本质上是需要解决什么问题，我想这是一点数学小启示（当然我是数学学渣，愚者千虑所得到的一点知识，对学霸肯定像常识和呼吸一样自然）。</p>\n"},{"title":"为什么伟大不能被计划——肯尼斯·斯坦利,乔尔·雷曼","date":"2023-04-15T16:53:46.000Z","auto_excerpt":"true","_content":"\n  ## 前言和概述\n\n 本文是《为什么伟大不能被计划》的读书笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n书评：这本书一般，翻来翻去车轱辘想表达同一个意思，其实呢，作者想说的全在书名里了，畅销书是这样的，干货不能再多了，以这本书在互联网上的声量，如果干货再多一点，就是下一本《人类简史》了。\n\n\n# 序言\n\n  \n\n1. 人工智能研究之旅：“从最初做人工智能领域的研究，到出版这本书来质疑目标在生活和工作中的效用，此间过程既漫长，又充满了意想不到的崎岖。”——这句话概述了作者从事人工智能研究到出版本书的漫长而充满挑战的过程。这强调了科研旅程中的不确定性和探索性质。\n\n2. 目标对人工智能和人类的影响：“如果就目标对人工智能主体的影响进行深入研究，那我们自然也会期望了解不同的目标对人类的影响。”——这指出了作者研究的重点转向，即从人工智能的目标到人类的目标，以及这些目标如何影响智能主体，无论是人工智能还是人类。\n\n3. 目标的重大影响：“目标产生的影响是不容忽视且令人惊讶的，它们可能会彻底颠覆你对自己的人生成就和未来的思考方式。”——这强调了设定目标对个人成就和未来规划的深远影响，提示读者重新审视自己的目标和期望。\n\n4. 人工智能的快速变化：“深度学习已经成为一种趋势，新颖的生成算法持续产生着越来越惊人的结果。”——这反映了人工智能领域的快速发展和技术进步，特别是深度学习和生成算法的影响。\n\n5. 本书的时效性和普适性：“我们依然认为，这本书传递的核心经验和教训，经得起时间的考验，依然值得学习和借鉴。”——作者强调，尽管人工智能技术不断进步，本书的核心教训和经验仍具有普遍的适用性和长期的价值。\n\n6. 中国作为全球创新中心的角色：“随着中国逐步向‘全球创新中心’的方向转型，本书提供的经验和教训或能恰逢其时地提供一些裨益。”——这突出了中国在全球创新舞台上的重要角色，并暗示本书的内容对中国在创新和技术发展方面的贡献可能具有特别的意义。\n\n  \n\n---\n\n  \n\n# 中文版推荐序\n\n  \n\n1. **科技发展的不确定性**：“在某个平行宇宙中，你被任命为某国的科技部部长，你的任务是把该国科技发展水平提升至发达国家的水平。”——这个假设性的情景强调了科技发展的不确定性和复杂性。在现实世界中，科技的发展并不是简单的线性过程，而是受到多种因素的影响，包括创新的难以预测性和各种社会、经济、政治因素的交互作用。\n\n2. **创新的“意外性”**：“一些实现伟大成就的发明家并非比同行更勤奋、更努力，而是因为他们经常能捡到‘意外的’宝藏。”——这反映了创新过程中的一个关键特征：很多重大的科技突破往往源于意料之外的发现。这说明在科技创新中，灵感和偶然性扮演着重要角色。\n\n3. **政府主导的创新局限性**：“当下创新不是由政府主导，像OpenAI这样的小公司才有可能得到巨额的风险投资资金，才可以任性蛮干，才有机会做出伟大的创新。”——这突出了政府主导的科技创新模式的局限性，同时强调了私营部门在推动科技创新中的重要作用，尤其是在高风险、高回报的创新活动中。\n\n4. **科技创新的历史案例**：“考察科技史时，你会发现伟大的创造几乎都是由一些谁也想不到的人，在谁也没计划的领域中做出来的。”——这部分提供了多个历史案例，如比尔·盖茨、谷歌的创始、埃隆·马斯克的SpaceX和特斯拉等，这些案例表明科技创新往往来自于非传统路径和意想不到的领域。\n\n5. **伟大创新的不可计划性**：“伟大突破是不能计划的。”——这句话强调了伟大科技创新的不可预见性，暗示创新往往发生在最不被预期的情况下，而非通过严密的计划和预设目标来实现。\n\n6. **新奇性搜索算法**：“肯尼斯和乔尔发明的算法叫作‘新奇性搜索’(Novel Search)算法，这种算法会随机生成一组解决方案，通过评估新奇性并保留新奇性比较高的方案。”——这介绍了一种创新的算法设计思路，强调探索和实验性质的重要性，这与传统目标导向的算法设计有明显不同。\n\n7. **创新过程中的“踏脚石”理论**：“新方案是通往其他新方案的‘踏脚石’(Stepping Stones)。”——这一理论解释了创新过程中的逐步探索和积累，即每一步新奇的尝试都可能成为通向更大创新的基石。\n\n8. **创新与目标的关系**：“如果你一开始就向着一个明确的目标努力，你就走不远。目标会窄化你的探索范围。”——这部分阐述了过于明确的目标可能对创新产生限制的观点，暗示在某些情况下，开放和探索式的思维方式可能更有利于创新。\n\n9. **政府主导科技发展的局限**：“1971年，美国总统尼克松发起‘癌症战争’，但成效有限；1982年，日本通商产业省投入巨资研发第五代计算机系统，也未能突破。”——这些例子说明，即使是政府主导的、资源丰富的大型科技项目，也不一定能够保证成功。这些项目往往缺乏灵活性和创新性，可能导致效率低下和目标不达成。\n\n10. **伟大创新的难以计划性**：“伟大的科技创新往往不是通过明确的目标和计划实现的。”——这句话强调了真正伟大的科技创新通常超出了预设目标和计划的范围，是通过探索未知和追求新奇产生的。\n\n11. **新奇性搜索算法的意义**：“新奇性搜索算法不预设具体目标，但有价值观的指引，这个价值观就是新奇和有趣。”——这说明新奇性搜索算法的核心是探索和实验，而不是追求预设的具体目标。这种方法能够开拓更广阔的创新空间。\n\n12. **伟大创新的途径**：“如果你一开始就认准了想要得到一个什么样的珍宝，你就不会得到珍宝；最终得到珍宝的人，只是一直在寻找下一块踏脚石。”——这个观点指出，伟大的成就往往不是通过有意识地追求一个特定目标实现的，而是通过持续的探索和尝试，最终达到意想不到的结果。\n\n13. **寻找“踏脚石”的重要性**：“伟大不是目标指引的结果，因为通往伟大的路线从来都不是直线。”——这强调了在创新过程中，不断探索和尝试新事物的重要性，而不是一味地追求预设的目标。\n\n14. **科技创新的自由发展**：“在很多科技领域进入无人区，我们就必须自己寻找踏脚石。那种认准一个方向猛干，不惜成本投入人力物力的做法不是通往发达之路。”——这表明，在科技领域，自由和灵活的探索方式比固执地追求特定目标更为有效。\n\n  \n\n---\n\n  \n\n# 前言\n\n  \n\n---\n\n  \n\n# 1. 对目标的质疑\n\n  \n\n1. 目标文化的普及性：“我们难得去谈论‘目标’在自身文化体系中的主导地位，尽管我们自出生起就受其影响。”——这段话指出目标在我们文化中的重要性和普及性。我们从小就被教导追求目标，无论是学习、工作还是生活中的其他方面，目标成为衡量成功的主要标准。\n\n2. 目标设定的普遍性：“几乎所有值得去做的事情，都以一个又一个目标的形式呈现出来。”——这反映了社会普遍认为设定目标是实现事物的必要步骤。从小事到大事，从个人到国家层面，目标设定被视为成功的前提。\n\n3. 目标对个人和社会的影响：“目标的达成进度，将通过某种方式来衡量。”——这强调了目标在我们文化中的评估性质。我们不断设定目标，并通过各种方式衡量其进展，这种做法影响着我们的思维方式和行动。\n\n4. 目标设定的悖论：“如果目标设置得足够适度，它就会起到积极作用；反之，目标越‘高大上’，情况就越复杂。”——这表明目标设定并非总是有效，尤其是在宏大的目标面前，可能会产生反效果，因为实现它们的路径通常是未知和不确定的。\n\n5. 目标与创造力的关系：“我们希望在本书中，强调一条异于常规的、不以目标为导向的成功之路。”——这指出除了传统的目标导向方法之外，还有其他成功的途径。书中强调探索和创造性思维的重要性，提出不以目标为导向可能更有助于发现和创新。\n\n6. 目标文化的质疑：“我们难得去谈论‘目标’在自身文化体系中的主导地位，尽管我们自出生起就受其影响。”——这段话指出目标在我们文化中的重要性和普及性。我们从小就被教导追求目标，无论是学习、工作还是生活中的其他方面，目标成为衡量成功的主要标准。\n\n7. 目标对个人和社会的影响：“目标的达成进度，将通过某种方式来衡量。”——这强调了目标在我们文化中的评估性质。我们不断设定目标，并通过各种方式衡量其进展，这种做法影响着我们的思维方式和行动。\n\n8. 目标设定的悖论：“如果目标设置得足够适度，它就会起到积极作用；反之，目标越‘高大上’，情况就越复杂。”——这表明目标设定并非总是有效，尤其是在宏大的目标面前，可能会产生反效果，因为实现它们的路径通常是未知和不确定的。\n\n9. 目标与创造力的关系：“我们希望在本书中，强调一条异于常规的、不以目标为导向的成功之路。”——这指出除了传统的目标导向方法之外，还有其他成功的途径。书中强调探索和创造性思维的重要性，提出不以目标为导向可能更有助于发现和创新。\n\n  \n\n---\n\n  \n\n# 2. 无目标者的胜利\n\n  \n\n1. **无目标的优势**：“在你规划之际，生活已悄然前行。” ——约翰·列侬(John Lennon)。这句话暗示了生活中的很多重大成就和转变往往不是出于周密的计划和目标设定，而是在不经意间、在没有固定目标的情况下发生的。这挑战了传统上对于目标设定和规划的重视，强调了顺其自然和灵活适应的重要性。\n\n2. **成功人士的非传统道路**：“改变世界的神奇公式并不存在，或者说，伟大的成就并没有所谓的成功脚本，它们往往没有经过周密的计划便诞生。”这强调了伟大成就往往来自于非传统的途径，不遵循常规的路径也可能导致出乎意料的成功。\n\n3. **偶然性的作用**：“那些沉浸于数照片这个目标的人，完成任务的时间比那些不太专注于这个目标的人更长。” ——理查德·怀斯曼(Richard Wiseman)的实验。这个实验结果表明，过度专注于特定目标可能会忽视其他重要或有价值的信息或机会，强调了对偶然性和意外发现的开放性的重要性。\n\n4. **职业道路的偶然转变**：“美国畅销小说家约翰·格里森姆(John Grisham)在转行成为作家之前，学的是法律专业，还当了十年的刑事辩护律师。” 这个例子说明了人们的职业道路可能会因为偶然的事件或发现而发生重大转变，有时这些转变可能导致更大的成功和满足。\n\n5. **追随激情的重要性**：“如果你只能从本章中学到一个道理，那么它也许应该是：每个人都有权追随人生的激情所在，即使它们偏离了最初的计划，或与最初的目标相冲突。” 这强调了追随内心的激情和直觉比坚持刚性的目标和计划更重要，有时这种追随可能会带来更大的满足和意外的成功。\n\n6. **逆境中的机会发现**：“无论是德普对音乐的热爱意外地把他拉进了演艺圈，还是格里森姆在法律领域的从业经历最终激发了他的写作灵感。” ——这说明有时逆境和意外会带来意想不到的转机，成功人士往往能够在看似偶然的事情中发现新的机会并且勇于追求。\n\n7. **开放性与职业探索**：“互联网企业的转型成功案例。” ——许多著名的互联网公司，如YouTube和Flickr，最初的目标与最终的成功方向大相径庭。这些例子表明，在职业和企业发展中保持开放性和灵活性是非常重要的，有时偏离原定目标反而能带来更大的成功。\n\n8. **非传统职业道路的成功**：“任天堂最初的业务与后来的转型。” ——任天堂的成功转型显示了非传统职业道路的潜力，说明在职业选择上保持灵活和开放，对新的机会敏感可以带来意想不到的成功。\n\n9. **偶然性和激情的追求**：“不寻找，就是最好的寻找方式。” ——这一原则强调了对偶然性和激情的重视，说明在职业和生活中追随直觉和兴趣，而不是死板地坚持原有计划或目标，可能会带来更大的满足和成功。\n\n  \n\n---\n\n  \n\n# 3. 繁育艺术的艺术\n\n  \n\n1. **繁育艺术的艺术**：“繁育艺术的艺术：我不会追随小路的方向，而是前往无人踏足之地，留下自己的足迹。”——这句话象征着创新和探索的精神，强调了走出常规思维框架的重要性。在艺术和科学的探索中，走出已知的路径，创造独特的价值和发现，是一个核心概念。\n\n2. **图片孵化器网站的创意**：“图片孵化器：一次非常独特的科学实验。”——这一概念阐述了作者通过创建一个能够让用户“繁育”图片的网站，来探索艺术与科技结合的新领域。用户可以选择他们喜欢的图片，这些图片就像动物一样产生后代，从而产生新的艺术作品。\n\n3. **遗传艺术的概念**：“遗传艺术：理查德·道金斯在《盲眼钟表匠》中提出的概念。”——遗传艺术是一种创新的艺术形式，它模仿生物遗传的原理，将艺术品视为具有“基因”的实体，通过模拟遗传过程产生新的艺术作品。\n\n4. **实验结果与目标设定的关系**：“目标设定的反思：最终得到的图片，与目标图片完全不同。”——这一发现挑战了传统的目标设定观念。实验表明，当人们设定具体目标进行创作时，最终的成果往往与最初的目标不符，这揭示了创作过程中偶然性和不可预见性的重要性。\n\n5. **放弃目标可能带来更好的结果**：“放弃目标：不管看起来多么诱人、多么有说服力，遥远而宏伟的目标并不能指引你来到它的身边。”——这一结论表明，在创意和探索的过程中，过分专注于具体目标可能会限制创新和意外发现的可能性。有时候，放弃固定的目标，保持开放和灵活的思维，可能会带来更加出人意料和有价值的结果。\n\n6. **用户在图片孵化器网站的体验**：“图片孵化器网站的用户体验：在网站上‘繁育’出的图片，激起了我们的好奇心，这些图片生动且富有内涵。”——这段描述说明了用户在参与图片孵化器网站时的体验。用户可以通过选择和“繁育”图片，创造出既富有创意又具个性的艺术作品，这些作品往往超出了初始的预期和想象。\n\n7. **目标与实际成果的不符合**：“目标与结果的偏差：最终得到的图片，与用户原本的目标设定完全不同。”——这一点揭示了在创造性活动中，目标和结果之间常常存在的差异。用户可能最初有一个明确的目标，但在创作过程中，实际的结果往往与最初的目标不符，展现了创作过程中的不可预测性和灵活性。\n\n8. **放弃特定目标的优势**：“放弃特定目标：当用户对自己想要寻找的东西保持开放心态时，网站便能提供出乎意料但最令人满意的结果。”——这说明在创意和艺术的领域里，有时候放弃过于具体的目标，保持一种开放和探索的心态，可能会带来更加令人满意和创新的成果。\n\n9. **图片孵化器网站的演化效应**：“图片孵化器网站的演化效应：通过用户们的前后接力，图片可以完成数百代的进化。”——这描述了图片孵化器网站如何利用用户的集体努力，通过“繁育”和迭代，创造出完全新颖和独特的艺术作品。\n\n10. **实验和生活中目标设定的相似性**：“目标设定在实验和生活中的相似性：在生活中与实现目标有关的方方面面，似乎都反映了从图片孵化网站上分析出的原理。”——这一结论将图片孵化器网站的经验扩展到了更广泛的生活和工作领域，提示了在目标设定和实现过程中存在的普遍现象和原则。\n\n  \n\n---\n\n  \n\n# 4. 目标是错误的指南针\n\n  \n\n1. 偏见和先验性谬论：偏见和先验性谬论是根深蒂固且普遍存在的，这些偏见不仅在古代世界占据至高无上的地位，而且在现代仍然对许多人有着巨大影响。这些偏见和谬论影响我们对现象和其条件的理解。\n\n2. 踏脚石概念：踏脚石是实现目标的必要步骤，但在开始探索时，我们通常不知道哪些踏脚石会通往最终目标。这种不确定性让我们的探索充满了未知和变数。\n\n3. 目标函数的局限性：目标函数是衡量目标实现进度的方法，但它们常常是不完美的。目标函数的不完美之处在于，它可能无法正确反映实际的进展，甚至可能导致误导。\n\n4. 欺骗性目标：存在欺骗性的目标会导致我们做出错误的决策。当目标函数作为指南针时，如果它们指向错误的方向，我们就可能被欺骗，永远无法抵达正确的目的地。\n\n5. 非目标伟大探索系统：非目标伟大探索系统如图片孵化器网站展示了不设定最终目标的探索方式。这种探索方法更加开放，允许探索者在未知的可能性中寻找新的踏脚石。\n\n6. 自然进化和人类创新：自然进化和人类创新都发生在没有明确终极目标的情况下。这两个过程显示了无目标探索的力量和潜力。\n\n7. 智力测试的思维实验：智力测试的思维实验表明，如果我们试图通过目标导向的方式控制进化，结果可能是不切实际的。真正的进化是通过非目标导向的探索实现的。\n\n8. 人类创新的过程：人类的创新过程也是收集踏脚石的过程。这些踏脚石可能不直接指向某个特定的目标，但它们在整体上贡献于创新和发现。\n\n9. 目标的欺骗性和非目标探索的价值：本章强调了目标的欺骗性和非目标探索的价值。通过探索不同的案例，作者指出追求“高大上”的目标可能会导致我们迷失方向，而非目标探索可能是通往伟大发现的正确路径。\n\n10. 思维实验 - 人类智能的进化：自然进化的思维实验显示，如果以提升智力为目标来引导进化，结果将是失败的。自然进化不是目标驱动的，而是通过适应性和随机变异不断探索未知的过程。这表明，即使是人类智能这样复杂的特性，也是在无目标的进化过程中偶然形成的。\n\n11. 人类创新过程：与自然进化相似，人类的创新过程也不是单一目标驱动的。创新往往是基于现有技术和知识的组合，以及对新问题的回应，而非单纯为了实现某个预设的目标。\n\n12. 目标驱动的误导：在探索和创新过程中，目标驱动可能导致误导和局限性。追求具体目标可能阻碍了对广泛可能性的探索，限制了创新的范围。\n\n13. 非目标探索的价值：非目标探索允许更广泛、更开放的探索空间，它强调探索过程本身的重要性，而不是单一的、具体的目标。这种探索方式更能适应不断变化的环境和需求，也更有可能导致意想不到的重大发现。\n\n14. 探索新机会的思考：作者提出，我们应该重新思考探索和创新的方式，转向非目标驱动的探索。这种转变可能需要挑战传统观念和习惯思维，但可能为我们打开新的可能性和机遇。\n\n  \n\n---\n\n  \n\n# 5. 有趣的和新奇的探索\n\n  \n\n1. **新年愿望的现实挑战**：“新年愿望通常很难实现：超过半数的人认为自己能坚持新年愿望，但实际上只有12%的人能做到。”——这表明人们在制定目标时过于乐观，而现实中实现这些目标的难度远超预期。这反映了人们在目标设定和执行上的心理差距。\n\n2. **目标与踏脚石的关系**：“我们很难确定从当前位置到最终目标之间的踏脚石。”——这指出在追求长期目标的过程中，人们往往忽视了实现这些目标所需的具体步骤或中间过程。这强调了在目标追求过程中识别和利用踏脚石的重要性。\n\n3. **对目标的过度关注可能导致误导**：“对目标的过度关注可能将我们引入歧途。”——这个观点提示我们，盲目追求目标而忽视过程中的新发现和机遇可能导致资源的浪费和方向的错误。\n\n4. **新奇性的重要性**：“新奇性是推动进步的重要因素。”——这一点强调了探索未知领域和接受新奇事物的重要性，新奇性不仅为创新提供动力，也是认知发展的关键。\n\n5. **偶然性发现的价值**：“偶然性发现在历史上扮演了重要角色。”——这说明在科学和技术的发展过程中，许多重大的发现并非完全是预先计划和目标导向的结果，而是在探索过程中偶然发现的。\n\n6. **非目标驱动的探索**：“非目标驱动的探索可以产生意想不到的收获。”——这反映了在探索和研究中，没有具体目标的自由探索同样能够带来重要的发现和创新。\n\n7. **物理世界约束与创新**：“物理世界的约束对于新奇性搜索和创新至关重要。”——这一点揭示了在探索新奇事物时，现实世界的物理法则和条件对于引导和限制创新过程的重要性。\n\n8. **通过算法测试理论的重要性**：“通过构建算法来测试理论的理念，在人工智能领域已被普遍接受。”——这一观点说明了人工智能领域中，一个理论只有在被构建成计算机程序并成功运行测试后，才被广泛认可。这强调了在理论研究中，通过实践验证理论的重要性。\n\n9. **新奇性搜索算法的应用**：“新奇性搜索算法的灵感来源于用户在图片孵化器网站上的操作。”——这说明了在创新和科学研究中，生活中的观察和经验可以激发新的研究思路和方法。新奇性搜索算法是通过观察用户行为而得到灵感，进而用于指导机器自主探索新奇事物。\n\n10. **从简单到复杂的行为变化**：“新奇性搜索导致行为从简单变得复杂。”——这一观点揭示了在新奇性搜索中，行为的演变不是基于目标导向，而是从简单的尝试逐渐进展到更复杂的行为模式。这反映了在没有明确目标的探索过程中，信息和复杂性的逐步积累。\n\n11. **新奇性搜索与目标驱动搜索的对比**：“新奇性搜索可能比寻找一个特定的目标产生更好的结果。”——这表明在某些情况下，没有具体目标的探索方式可能比传统的目标导向方式更有效，因为它允许更广泛的探索和意外发现。\n\n12. **新奇性搜索的限制与挑战**：“新奇性搜索的能力维度更大，但也不是无限的。”——这一结论提示我们，尽管新奇性搜索在某些情况下非常有效，但它也有其局限性，尤其在面对极其复杂的问题时。\n\n  \n\n---\n\n  \n\n# 6. 寻宝者万岁\n\n  \n\n1. 新奇性搜索的定义和局限性：“新奇性搜索：基于本书前一章的内容，新奇性搜索带来的经验看起来是在不刻意寻找目标的时候，找到‘目标’反而更容易。”——这强调了新奇性搜索在寻找解决方案时的有效性，即在不专注于特定目标时，可能更容易发现新方法或解决方案。但同时也强调了其局限性，即它并不总能帮助我们找到所需的东西。\n\n2. 目标驱动型搜索与新奇性搜索的对比：“目标驱动型搜索：在许多简单的问题中，朝着一个遥远的目标前进并不是一个好主意，它们显然比没有特定目标的搜索更糟糕。”——这指出在简单问题上，固定目标的搜索方式可能不如新奇性搜索有效。\n\n3. 维持多样性思维的重要性：“保持多样性思维：因为一心一意地追求某个特定目标太有欺骗性，所以我们应该尽可能保留不同选择的可能性。”——这强调在追求目标时应保持开放和多元化的思维方式，避免被单一目标的潜在欺骗性所限制。\n\n4. 目标的欺骗性：“目标的欺骗性：目标越是‘高大上’，其欺骗性也就越强。”——这说明目标本身可能具有误导性，特别是那些听起来很宏伟的目标，可能会导致错误的方向或方法。\n\n5. 新奇性搜索作为寻宝工具：“新奇性搜索作为寻宝工具：在漫无目标的新奇性搜索中，你不一定能找到心中想要的宝藏，反而可能发现许多意料之外的宝藏。”——这表明在探索和发现过程中，新奇性搜索可能带来意外的收获，尽管这些收获可能不是最初的目标。\n\n6. 寻宝者的心态和方法：“寻宝者的心态：寻宝者又可以说是秉持机会主义的探险家，他们致力于寻找任何有价值的东西，而不在乎这些东西具体是什么。”——这强调了作为寻宝者，应该拥有开放和灵活的心态，专注于发现有价值的事物，而不是单一的预设目标。\n\n7. 目标导向型搜索的局限性：“目标导向型搜索的局限性：目标驱动型搜索的‘无能’程度，有时甚至到了‘不堪入目’的地步。”——这反映了在某些情况下，目标导向型搜索可能非常低效，甚至无法解决问题。\n\n8. 搜索的局限性：“搜索的局限性：虽然我们可以找出一些问题，在所有可能的答案中漫无目的地搜索，但最终却找不到解决办法。”——这指出虽然新奇性搜索有其优势，但它并不能保证总能找到解决方案，特别是在面对复杂和广泛的问题时。\n\n9. 目标的欺骗性与搜索方法的选择：“目标的欺骗性与搜索方法：目标越是‘高大上’，其欺骗性也就越强。在选择搜索方法时，我们不能只依赖目标。”——这强调了在探索和发现的过程中，目标的欺骗性可能导致我们选择错误的方法，因此在选择搜索方法时需要考虑更多因素。\n\n10. 目标导向型搜索的无效性：“目标导向型搜索的无效性：在一个简单的走迷宫测试中，目标驱动的方法远远逊色于新奇性搜索。”——这说明在某些情况下，固定目标的搜索方式可能不如新奇性搜索有效。\n\n11. 新奇性搜索的实用性：“新奇性搜索的实用性：在漫无目标的新奇性搜索中，有时可以发现意料之外的宝藏。”——这表明在没有设定具体目标的搜索中，有时可以发现意想不到的有价值的事物，强调了新奇性搜索的实用性。\n\n12. 寻宝者心态的重要性：“寻宝者心态：要想成为一名合格的寻宝者，我们就必须尽可能多地积累踏脚石，因为我们永远不知道哪块踏脚石可能通往有价值的地方。”——这强调了拥有开放和灵活的探索心态的重要性，即寻宝者不仅仅追求特定目标，而是保持对所有可能性的开放。\n\n13. 非目标型创新的意义：“非目标型创新：探索和发现本身就不应该专注于具体的目标，而是应着眼于一些更伟大的东西。”——这指出探索和发现的过程不应该被限制于特定目标，而是应该开放于更广阔的可能性。\n\n  \n\n---\n\n  \n\n# 7. 解开禁锢教育的枷锁\n\n  \n\n1. 目标导向的弊端：“目标导向的问题：目标可能轻易地欺骗我们。”——这表明目标导向的方法虽普遍存在，但可能会误导我们，导致未能实现真正的进步。目标导向意味着以特定的结果为导向，而忽视了过程中的探索和创新。\n\n2. 教育中的目标导向危害：“教育中的目标导向危害：目标导向方法在教育领域中导致了应试教育和剥夺教师自主权等问题。”——指出教育领域过分依赖目标导向，如过分强调标准化考试，可能导致教育的质量降低。\n\n3. 坎贝尔定律：“坎贝尔定律：量化的社会指标越是被用于社会决策，社会腐败的压力便越大。”——这说明过度依赖量化指标会导致负面结果，因为量化目标可能扭曲原有的意图和过程。\n\n4. 不当激励的例子：“不当激励的例子：如英国政府在印度奖励杀死毒蛇的政策，最终导致毒蛇数量增加。”——这说明如果激励机制设计不当，可能会产生反效果，违背初衷。\n\n5. 教育中的非目标思维：“非目标思维在教育中的作用：探索未知、多样性发展和创造力的激发。”——强调在教育领域，非目标导向的思维方式能够促进更多创新和个性化的发展。\n\n6. 教育统一性的问题：“教育统一性的问题：强加的教育统一性可能损害学生的创造力和探索能力。”——指出统一的教育标准虽看似公平，但可能限制教师的教学自由和学生的创新能力。\n\n7. 美国教育制度的批评：“美国教育制度批评：目标导向和统一性导致的问题，反映在美国小学教育的滞后。”——通过比较芬兰和美国的教育制度，指出过分强调目标和统一性可能导致教育质量下降。\n\n8. 目标驱动与社会问题：“目标驱动型思维在社会事业中的破坏性：过度强调目标可能导致教育和其他社会事业领域的隐性破坏。”——这指出，当社会事业（如教育）过度依赖目标时，可能会忽视真正的创新和进步，导致长期的潜在问题。\n\n9. 教育领域的统一标准问题：“统一标准在教育中的限制：追求统一性可能限制创新，导致缺乏多样性的教育体系。”——这强调了教育中的统一性带来的风险，如限制教师的创造力和教学自由，从而抑制学生多样性的发展。\n\n10. 寻宝者原则在教育中的应用：“寻宝者原则：鼓励教师和学校遵循直觉和创新，而非过度依赖标准化测试和统一教育标准。”——这提倡教育领域应更多地依赖于教师的直觉和创造性思考，而不是单一的标准化指导。\n\n11. 重新定义教育评估：“重新定义教育评估：提倡同行评审和多样性探索，而非单一的标准化测试。”——这建议采用更为灵活的评估方式，如同行评审，以促进教育创新和多样性。\n\n12. 教育创新的挑战：“教育创新的挑战：尽管存在困难，但在教育领域探索非目标导向的创新方法是有价值的。”——这强调了教育领域面临的挑战，并呼吁探索新的教学方法和创新。\n\n  \n\n---\n\n  \n\n# 8. 解开禁锢创新的枷锁\n\n  \n\n1. **探险精神与创新的关系**：“探险家的历史：勇敢的探险家们在面对未知时展现出的勇气和创新精神，扩展了人类的认知边界。”——这强调了探险精神在推动人类发展和创新中的重要性。探险家们面对未知的勇气和创新能力是人类知识扩展的关键。\n\n2. **科学创新的必要性**：“科学创新的重要性：科学进步极大地改变了人类的生活方式，对社会产生了深远的影响。”——这突显了科学创新在推动社会发展中的核心作用。科学技术的进步不仅改善了人们的日常生活，还推动了社会的整体进步。\n\n3. **目标导向思维对创新的影响**：“对目标的盲目崇拜：过分专注于特定目标可能限制了我们对创新的追求。”——这指出过分追求特定目标可能限制思维的开放性和创新能力。灵活、开放的思考方式对于创新至关重要。\n\n4. **科研资金的影响**：“科研资金的分配：资金分配过程中的目标导向思维可能影响科学领域的创新。”——科研资金的分配方式可能影响科学领域的创新。目标导向的资金分配可能忽视了那些看似风险较高但潜力巨大的创新研究。\n\n5. **共识与创新的矛盾**：“追求共识对创新的限制：过分追求共识可能阻碍创新的产生。”——在科学研究和其他领域，过分强调共识往往会抑制创新思维，因为真正创新的想法往往在一开始并不被广泛接受。\n\n6. **科学投资的目标导向问题**：“科学投资的目标导向问题：对科学领域的投资决策过度依赖目标导向思维，可能限制了对真正具有创新潜力的项目的支持。”——这指出科学研究资金的分配方式可能过于依赖于明确的目标和预期结果，而这种目标导向的思维可能忽视了那些初看起来不那么明确，但潜力巨大的创新研究。\n\n7. **科学项目评审的共识问题**：“科学项目评审中的共识问题：科学项目评审过程中的共识倾向可能导致真正创新的想法被忽视。”——在科学研究的资助评审过程中，过分依赖于专家群体的共识可能导致那些初看起来不太符合主流观点但具有创新潜力的项目被忽视。\n\n8. **目标思维与科学探索的冲突**：“目标思维与科学探索的冲突：目标导向的思维方式可能阻碍科学探索的真正创新。”——这强调了目标导向思维在科学探索中可能产生的负面影响，即过度注重预定目标可能限制了对更广泛、更有创造性的探索。\n\n9. **非目标探索的重要性**：“非目标探索的重要性：开放式、非目标导向的探索对于科学创新至关重要。”——这突出了在科学探索中保持开放性和灵活性的重要性，强调了非目标导向的探索对于促进真正的创新是必不可少的。\n\n10. **政策与科研投资的关系**：“政策对科研投资的影响：政府和资助机构的政策可能对科学研究的方向和创新产生重大影响。”——这指出政府政策和资助机构的决策对科研的方向和创新有着重大影响，可能导致某些领域或类型的研究受到偏重，而忽视其他可能同样重要的领域。\n\n  \n\n---\n\n  \n\n# 9. 彻底告别对目标的幻想\n\n  \n\n1. 成功与目标的非直接关系：“想要成功，反而不要以成功为目标；只需要做你喜欢和相信的事情，成功就会自然而然地到来。”——这句话强调了成功与追求目标之间不是直接关联的关系。它表明，真正的成功来自于对个人热情和信念的追求，而不是单纯的目标导向。\n\n2. 目标导向思维的限制：“目标导向的思维，会阻碍许多具有重大意义的社会事业的成功。”——这一观点指出，当人们过度强调目标时，可能会忽视过程中的创新和探索，从而限制了社会事业和个人成长的可能性。\n\n3. 非目标导向探索的价值：“通过考虑全新的、开放的、不以目标为重点的探索方法，我们在从教育领域到个性化汽车设计等一系列探索活动中，提出了全新的思路。”——这表明，在各种领域中采用非目标导向的探索方式，可以带来新的思路和创新。\n\n4. 摆脱目标的束缚：“彻底放弃目标，不意味着放任自流地生活，而是赋予生活新的意义。”——这强调了摆脱目标束缚后，人们可以更自由地探索和创新，从而给生活带来新的意义和方向。\n\n5. 目标与自我限制的关系：“高大上的目标可能更有可能成为骗人的工具，将我们的探索带进死胡同。”——这一观点指出，过于宏伟的目标反而可能限制人们的思维，阻碍真正的创新和发现。\n\n6. 寻宝者原则：“成为寻宝者，遵循趣味性和新奇性的线索，可以引导我们走向新的发现和创新。”——这一观点鼓励人们像寻宝者一样探索，跟随个人的兴趣和直觉，而非固守既定的目标。\n\n7. 目标思维的局限性：“目标驱动的思维限制了我们实现革命性成果的可能性。在探索根治疾病的方法、经久不衰的理论、令人炫目的结构等领域，我们需要跳出传统的目标思维。”——这指出，传统的目标导向思维在某些领域，尤其是需要创新和突破性成就的领域，可能会成为探索的障碍。跳出这种思维模式，可以促进新的发现和创新。\n\n8. 目标的欺骗性：“目标的欺骗性在于，它们似乎提供了对最终结果的控制，但实际上这种控制是虚幻的。”——这一观点强调，尽管目标看似提供了对结果的控制，但实际上这种控制是不实的。过于追求目标可能导致错过更多的机会和可能性。\n\n9. 寻宝者的方法论：“成为寻宝者，遵循新奇性和趣味性的线索，可以引导我们走向新的发现和创新。”——这一理念鼓励我们像寻宝者一样，遵循新奇性和趣味性的线索，而非固守既定目标，从而开辟新的发现和创新路径。\n\n10. 趣味性与新奇性的价值：“趣味性和新奇性是寻宝过程中的重要线索，它们可以引导我们探索未知，并带来新的发现。”——这强调了趣味性和新奇性在探索过程中的价值。遵循这些线索可以带来新的想法和发现。\n\n11. 目标思维的误导性：“目标思维可能误导我们，使我们错过真正的机会和创新。”——这一观点指出目标思维可能导致人们忽视真正的机会和创新路径，因为它限制了我们的思考范围和探索可能性。\n\n12. 避免目标的趋同性：“避免目标的趋同性，释放出多路出击的寻宝者。”——这提倡在探索和创新过程中避免单一目标的趋同性，鼓励多元化和多方位的探索，从而增加发现新事物的可能性。\n\n  \n\n---\n\n  \n\n# 10. 案例研究1：重新诠释自然进化\n\n  \n\n1. 人类和细胞：“人类由五十万亿个细胞组成，每个细胞都像迷你城市一样复杂精致。这种复杂结构的形成得益于自然进化。”——这段描述强调了人类体内细胞的复杂性及其在自然进化过程中的重要性。细胞不仅是生命的基本单位，还通过协同工作维持生命活动，这一点在生物学上极为关键。\n\n2. 自然进化的广泛影响：“自然进化设计了地球上的每一种有机生物。”——这句话概述了自然进化对地球生命多样性的全面影响。从海岸红杉到射水鱼，所有生物都是经过数亿年的自然选择和变异形成的，彼此间存在着基因上的远亲关系。\n\n3. 进化与创造性：“生物进化是一种独特的、不断创新的过程，不同于物理世界中的死物。”——这个观点强调了生物进化的创造性和不可预测性，与非生物过程形成鲜明对比。生物进化能够产生复杂的生命形式，如人类大脑，这在物理世界中是无法实现的。\n\n4. 智能设计与自然进化：“智能设计运动认为复杂生命体必有创造者，但达尔文的发现表明，自然进化过程足以解释这种复杂性。”——这段话提出了智能设计与自然进化两种相反的观点，后者通过自然选择和遗传变异来解释生物多样性和复杂性的形成。\n\n5. 自我复制的机器比喻：“不完美的自我复制产生了生物多样性。”——这个比喻用来解释自然进化的过程，其中不精确的遗传复制导致了生物多样性的产生，而这些变异又受到自然选择的影响。\n\n6. 进化论的支持与质疑：“尽管有分歧，但自然选择在进化中的重要性被广泛认可。”——这句话说明了虽然生物学家对进化的具体机制有不同看法，但自然选择在进化中扮演重要角色的观点得到了广泛的支持。\n\n7. 进化的目标性质：“自然选择导致的适者生存可能被错误地理解为进化的目标。”——这个观点对进化的常见解释提出质疑，指出将进化看作有目标的过程可能是误解。进化可能不是朝着某个特定目标前进，而是一个不断的、无目的的过程。\n\n8. 生命的多样性与进化：“生命的多样性不仅仅包括细菌等简单生命形式，还涵盖了复杂多变的生物种类。进化的过程类似于收集不同的‘踏脚石’，并不是有明确目标的直线发展。”——这段描述强调了生命多样性的丰富性和进化过程的非目标性质。进化不是朝着一个特定目标前进，而是类似于收集各种不同可能性的过程。\n\n9. 进化的非目标性探索：“将生存和繁衍等同于目标是误解。进化是一个开放式的探索过程，更像是寻找新奇性和多样性的尝试，而非单纯的生存竞争。”——这个观点挑战了传统将生存和繁衍视为生物进化的终极目标的看法，强调了进化的开放性和非目标性质。\n\n10. 进化的特点：“进化类似于寻宝过程，不仅仅是积累‘踏脚石’，偶然性也扮演了重要角色。”——这部分强调了进化过程中偶然性的作用，如基因突变，并非仅仅是生物间的竞争或自然选择的结果。\n\n11. 扩展适应在进化中的作用：“扩展适应指的是生物的某些特征在新环境中被用于不同的功能，这是非目标性探索的一个关键属性。”——这部分说明了进化过程中特征和功能的转换，强调了进化不是单一目标驱动的。\n\n12. 创造性与竞争在进化中的关系：“进化的创造性是逃避竞争的产物，而非竞争本身。自然进化倾向于探索和积累新的可能性。”——这段话说明了竞争在进化过程中的角色相对于创造性的次要性，强调了进化的多样性和探索性。\n\n13. 生物多样性的增长：“形成新生态位以逃避竞争是生物多样性增长的方式，这显示了进化趋向于多元化而非趋同化。”——这部分强调了进化过程中生态位的形成和变化对于生物多样性的重要性。\n\n14. 化石记录与进化理论：“化石记录揭示了生物进化的历史，但并不直接指向某些‘高级物种’，强调了进化的非目标性和机械性。”——这部分通过化石记录来支持进化作为一个无目标、无意识过程的观点。\n\n  \n\n---\n\n  \n\n# 11. 案例研究2：目标和人工智能领域的探索\n\n  \n\n1. 科学的本质与进步：“科学是对知识的探索，科学不断地拓展了人类可能性的边界，使人们能够更深入地了解这个世界。”——这强调了科学作为知识探索的过程，是人类理解和影响世界的关键途径。科学不仅是一系列知识和理论的集合，而且是一个持续进步和探索的动态过程。\n\n2. 科学家的人性与科学进步：“科学家也是人，跟所有其他人一样，并非完人。”——这表明即使在科学进步的背后，仍然存在人类的局限性和主观性。科学家作为人，他们的行为、信念和相互作用对科学的发展有重要影响。\n\n3. 科学社区的多样性与学科文化：“不同的科学家群体构成了各种学科，每个学科都有专属的惯例和文化。”——这揭示了科学社区的多样性和复杂性。不同学科之间存在文化差异，这些差异影响着学科的发展和科学家的交流方式。\n\n4. 科学成果的传播与同行评审：“科学家在期刊或会议中发表自己的想法，有助于进一步验证其研究，并能将科研的想法或成果传播到更大的社区。”——这强调了科学传播的重要性，以及同行评审在维护科学质量和促进知识传播中的作用。\n\n5. 目标在科学发展中的影响：“目标是具体的，并且允许人们衡量和鼓励科学的进展。”——这指出目标在科学探索中的双重作用：一方面，它们提供了明确的方向和动力，另一方面，过分依赖具体目标可能导致短视和创新的限制。\n\n6. 人工智能领域的案例研究：“人工智能领域的研究核心是创造高度智能化的机器或程序。”——这指出了人工智能领域的主要研究目标和挑战，展示了目标导向思维在科学领域的具体应用，并暗示了它对研究方向和方法的深远影响。\n\n7. 新算法与传统算法的比较：“‘超自然’算法尽管在性能上略逊于传统的‘老靠谱’算法，但它提出了全新的研究方向。”——这指出新算法可能在性能上暂时不及传统算法，但其创新性和潜在的未来价值不应被忽视。实验派启发式方法可能会导致这种新算法被过早排除，忽视了它们可能开启的新研究路径。\n\n8. 启发式方法对科学研究的限制：“严格依赖实验结果和定理验证可能导致科学研究的视野狭隘。”——这说明过分依赖传统的科学方法，如实验结果和理论验证，可能会限制科学探索的广度和深度，忽略了那些在现有评价体系下表现不佳但具有创新潜力的想法。\n\n9. 人工智能领域的搜索策略：“在人工智能领域，不同的搜索策略如实验派和定理派方法，影响着研究的方向和进展。”——这强调了在人工智能研究中，不同的方法和策略会导致不同的研究成果和方向。方法的选择可能会推动或限制某些类型的创新。\n\n10. 研究领域的创新与发展：“探索新想法的自由和开放的科学环境对于推动研究领域的长远发展至关重要。”——这强调了为了促进科学和技术的发展，需要一个更开放和包容的研究环境，其中新想法可以自由发展，而不受现有假设和限制的束缚。","source":"_posts/杂集/为什么伟大不能被计划——肯尼斯·斯坦利,乔尔·雷曼.md","raw":"---\ntitle: 为什么伟大不能被计划——肯尼斯·斯坦利,乔尔·雷曼\ndate: 2023-04-16 00:53:46\ntags: \ncategories:\n  - - 杂集\nauto_excerpt: \"true\"\n---\n\n  ## 前言和概述\n\n 本文是《为什么伟大不能被计划》的读书笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n书评：这本书一般，翻来翻去车轱辘想表达同一个意思，其实呢，作者想说的全在书名里了，畅销书是这样的，干货不能再多了，以这本书在互联网上的声量，如果干货再多一点，就是下一本《人类简史》了。\n\n\n# 序言\n\n  \n\n1. 人工智能研究之旅：“从最初做人工智能领域的研究，到出版这本书来质疑目标在生活和工作中的效用，此间过程既漫长，又充满了意想不到的崎岖。”——这句话概述了作者从事人工智能研究到出版本书的漫长而充满挑战的过程。这强调了科研旅程中的不确定性和探索性质。\n\n2. 目标对人工智能和人类的影响：“如果就目标对人工智能主体的影响进行深入研究，那我们自然也会期望了解不同的目标对人类的影响。”——这指出了作者研究的重点转向，即从人工智能的目标到人类的目标，以及这些目标如何影响智能主体，无论是人工智能还是人类。\n\n3. 目标的重大影响：“目标产生的影响是不容忽视且令人惊讶的，它们可能会彻底颠覆你对自己的人生成就和未来的思考方式。”——这强调了设定目标对个人成就和未来规划的深远影响，提示读者重新审视自己的目标和期望。\n\n4. 人工智能的快速变化：“深度学习已经成为一种趋势，新颖的生成算法持续产生着越来越惊人的结果。”——这反映了人工智能领域的快速发展和技术进步，特别是深度学习和生成算法的影响。\n\n5. 本书的时效性和普适性：“我们依然认为，这本书传递的核心经验和教训，经得起时间的考验，依然值得学习和借鉴。”——作者强调，尽管人工智能技术不断进步，本书的核心教训和经验仍具有普遍的适用性和长期的价值。\n\n6. 中国作为全球创新中心的角色：“随着中国逐步向‘全球创新中心’的方向转型，本书提供的经验和教训或能恰逢其时地提供一些裨益。”——这突出了中国在全球创新舞台上的重要角色，并暗示本书的内容对中国在创新和技术发展方面的贡献可能具有特别的意义。\n\n  \n\n---\n\n  \n\n# 中文版推荐序\n\n  \n\n1. **科技发展的不确定性**：“在某个平行宇宙中，你被任命为某国的科技部部长，你的任务是把该国科技发展水平提升至发达国家的水平。”——这个假设性的情景强调了科技发展的不确定性和复杂性。在现实世界中，科技的发展并不是简单的线性过程，而是受到多种因素的影响，包括创新的难以预测性和各种社会、经济、政治因素的交互作用。\n\n2. **创新的“意外性”**：“一些实现伟大成就的发明家并非比同行更勤奋、更努力，而是因为他们经常能捡到‘意外的’宝藏。”——这反映了创新过程中的一个关键特征：很多重大的科技突破往往源于意料之外的发现。这说明在科技创新中，灵感和偶然性扮演着重要角色。\n\n3. **政府主导的创新局限性**：“当下创新不是由政府主导，像OpenAI这样的小公司才有可能得到巨额的风险投资资金，才可以任性蛮干，才有机会做出伟大的创新。”——这突出了政府主导的科技创新模式的局限性，同时强调了私营部门在推动科技创新中的重要作用，尤其是在高风险、高回报的创新活动中。\n\n4. **科技创新的历史案例**：“考察科技史时，你会发现伟大的创造几乎都是由一些谁也想不到的人，在谁也没计划的领域中做出来的。”——这部分提供了多个历史案例，如比尔·盖茨、谷歌的创始、埃隆·马斯克的SpaceX和特斯拉等，这些案例表明科技创新往往来自于非传统路径和意想不到的领域。\n\n5. **伟大创新的不可计划性**：“伟大突破是不能计划的。”——这句话强调了伟大科技创新的不可预见性，暗示创新往往发生在最不被预期的情况下，而非通过严密的计划和预设目标来实现。\n\n6. **新奇性搜索算法**：“肯尼斯和乔尔发明的算法叫作‘新奇性搜索’(Novel Search)算法，这种算法会随机生成一组解决方案，通过评估新奇性并保留新奇性比较高的方案。”——这介绍了一种创新的算法设计思路，强调探索和实验性质的重要性，这与传统目标导向的算法设计有明显不同。\n\n7. **创新过程中的“踏脚石”理论**：“新方案是通往其他新方案的‘踏脚石’(Stepping Stones)。”——这一理论解释了创新过程中的逐步探索和积累，即每一步新奇的尝试都可能成为通向更大创新的基石。\n\n8. **创新与目标的关系**：“如果你一开始就向着一个明确的目标努力，你就走不远。目标会窄化你的探索范围。”——这部分阐述了过于明确的目标可能对创新产生限制的观点，暗示在某些情况下，开放和探索式的思维方式可能更有利于创新。\n\n9. **政府主导科技发展的局限**：“1971年，美国总统尼克松发起‘癌症战争’，但成效有限；1982年，日本通商产业省投入巨资研发第五代计算机系统，也未能突破。”——这些例子说明，即使是政府主导的、资源丰富的大型科技项目，也不一定能够保证成功。这些项目往往缺乏灵活性和创新性，可能导致效率低下和目标不达成。\n\n10. **伟大创新的难以计划性**：“伟大的科技创新往往不是通过明确的目标和计划实现的。”——这句话强调了真正伟大的科技创新通常超出了预设目标和计划的范围，是通过探索未知和追求新奇产生的。\n\n11. **新奇性搜索算法的意义**：“新奇性搜索算法不预设具体目标，但有价值观的指引，这个价值观就是新奇和有趣。”——这说明新奇性搜索算法的核心是探索和实验，而不是追求预设的具体目标。这种方法能够开拓更广阔的创新空间。\n\n12. **伟大创新的途径**：“如果你一开始就认准了想要得到一个什么样的珍宝，你就不会得到珍宝；最终得到珍宝的人，只是一直在寻找下一块踏脚石。”——这个观点指出，伟大的成就往往不是通过有意识地追求一个特定目标实现的，而是通过持续的探索和尝试，最终达到意想不到的结果。\n\n13. **寻找“踏脚石”的重要性**：“伟大不是目标指引的结果，因为通往伟大的路线从来都不是直线。”——这强调了在创新过程中，不断探索和尝试新事物的重要性，而不是一味地追求预设的目标。\n\n14. **科技创新的自由发展**：“在很多科技领域进入无人区，我们就必须自己寻找踏脚石。那种认准一个方向猛干，不惜成本投入人力物力的做法不是通往发达之路。”——这表明，在科技领域，自由和灵活的探索方式比固执地追求特定目标更为有效。\n\n  \n\n---\n\n  \n\n# 前言\n\n  \n\n---\n\n  \n\n# 1. 对目标的质疑\n\n  \n\n1. 目标文化的普及性：“我们难得去谈论‘目标’在自身文化体系中的主导地位，尽管我们自出生起就受其影响。”——这段话指出目标在我们文化中的重要性和普及性。我们从小就被教导追求目标，无论是学习、工作还是生活中的其他方面，目标成为衡量成功的主要标准。\n\n2. 目标设定的普遍性：“几乎所有值得去做的事情，都以一个又一个目标的形式呈现出来。”——这反映了社会普遍认为设定目标是实现事物的必要步骤。从小事到大事，从个人到国家层面，目标设定被视为成功的前提。\n\n3. 目标对个人和社会的影响：“目标的达成进度，将通过某种方式来衡量。”——这强调了目标在我们文化中的评估性质。我们不断设定目标，并通过各种方式衡量其进展，这种做法影响着我们的思维方式和行动。\n\n4. 目标设定的悖论：“如果目标设置得足够适度，它就会起到积极作用；反之，目标越‘高大上’，情况就越复杂。”——这表明目标设定并非总是有效，尤其是在宏大的目标面前，可能会产生反效果，因为实现它们的路径通常是未知和不确定的。\n\n5. 目标与创造力的关系：“我们希望在本书中，强调一条异于常规的、不以目标为导向的成功之路。”——这指出除了传统的目标导向方法之外，还有其他成功的途径。书中强调探索和创造性思维的重要性，提出不以目标为导向可能更有助于发现和创新。\n\n6. 目标文化的质疑：“我们难得去谈论‘目标’在自身文化体系中的主导地位，尽管我们自出生起就受其影响。”——这段话指出目标在我们文化中的重要性和普及性。我们从小就被教导追求目标，无论是学习、工作还是生活中的其他方面，目标成为衡量成功的主要标准。\n\n7. 目标对个人和社会的影响：“目标的达成进度，将通过某种方式来衡量。”——这强调了目标在我们文化中的评估性质。我们不断设定目标，并通过各种方式衡量其进展，这种做法影响着我们的思维方式和行动。\n\n8. 目标设定的悖论：“如果目标设置得足够适度，它就会起到积极作用；反之，目标越‘高大上’，情况就越复杂。”——这表明目标设定并非总是有效，尤其是在宏大的目标面前，可能会产生反效果，因为实现它们的路径通常是未知和不确定的。\n\n9. 目标与创造力的关系：“我们希望在本书中，强调一条异于常规的、不以目标为导向的成功之路。”——这指出除了传统的目标导向方法之外，还有其他成功的途径。书中强调探索和创造性思维的重要性，提出不以目标为导向可能更有助于发现和创新。\n\n  \n\n---\n\n  \n\n# 2. 无目标者的胜利\n\n  \n\n1. **无目标的优势**：“在你规划之际，生活已悄然前行。” ——约翰·列侬(John Lennon)。这句话暗示了生活中的很多重大成就和转变往往不是出于周密的计划和目标设定，而是在不经意间、在没有固定目标的情况下发生的。这挑战了传统上对于目标设定和规划的重视，强调了顺其自然和灵活适应的重要性。\n\n2. **成功人士的非传统道路**：“改变世界的神奇公式并不存在，或者说，伟大的成就并没有所谓的成功脚本，它们往往没有经过周密的计划便诞生。”这强调了伟大成就往往来自于非传统的途径，不遵循常规的路径也可能导致出乎意料的成功。\n\n3. **偶然性的作用**：“那些沉浸于数照片这个目标的人，完成任务的时间比那些不太专注于这个目标的人更长。” ——理查德·怀斯曼(Richard Wiseman)的实验。这个实验结果表明，过度专注于特定目标可能会忽视其他重要或有价值的信息或机会，强调了对偶然性和意外发现的开放性的重要性。\n\n4. **职业道路的偶然转变**：“美国畅销小说家约翰·格里森姆(John Grisham)在转行成为作家之前，学的是法律专业，还当了十年的刑事辩护律师。” 这个例子说明了人们的职业道路可能会因为偶然的事件或发现而发生重大转变，有时这些转变可能导致更大的成功和满足。\n\n5. **追随激情的重要性**：“如果你只能从本章中学到一个道理，那么它也许应该是：每个人都有权追随人生的激情所在，即使它们偏离了最初的计划，或与最初的目标相冲突。” 这强调了追随内心的激情和直觉比坚持刚性的目标和计划更重要，有时这种追随可能会带来更大的满足和意外的成功。\n\n6. **逆境中的机会发现**：“无论是德普对音乐的热爱意外地把他拉进了演艺圈，还是格里森姆在法律领域的从业经历最终激发了他的写作灵感。” ——这说明有时逆境和意外会带来意想不到的转机，成功人士往往能够在看似偶然的事情中发现新的机会并且勇于追求。\n\n7. **开放性与职业探索**：“互联网企业的转型成功案例。” ——许多著名的互联网公司，如YouTube和Flickr，最初的目标与最终的成功方向大相径庭。这些例子表明，在职业和企业发展中保持开放性和灵活性是非常重要的，有时偏离原定目标反而能带来更大的成功。\n\n8. **非传统职业道路的成功**：“任天堂最初的业务与后来的转型。” ——任天堂的成功转型显示了非传统职业道路的潜力，说明在职业选择上保持灵活和开放，对新的机会敏感可以带来意想不到的成功。\n\n9. **偶然性和激情的追求**：“不寻找，就是最好的寻找方式。” ——这一原则强调了对偶然性和激情的重视，说明在职业和生活中追随直觉和兴趣，而不是死板地坚持原有计划或目标，可能会带来更大的满足和成功。\n\n  \n\n---\n\n  \n\n# 3. 繁育艺术的艺术\n\n  \n\n1. **繁育艺术的艺术**：“繁育艺术的艺术：我不会追随小路的方向，而是前往无人踏足之地，留下自己的足迹。”——这句话象征着创新和探索的精神，强调了走出常规思维框架的重要性。在艺术和科学的探索中，走出已知的路径，创造独特的价值和发现，是一个核心概念。\n\n2. **图片孵化器网站的创意**：“图片孵化器：一次非常独特的科学实验。”——这一概念阐述了作者通过创建一个能够让用户“繁育”图片的网站，来探索艺术与科技结合的新领域。用户可以选择他们喜欢的图片，这些图片就像动物一样产生后代，从而产生新的艺术作品。\n\n3. **遗传艺术的概念**：“遗传艺术：理查德·道金斯在《盲眼钟表匠》中提出的概念。”——遗传艺术是一种创新的艺术形式，它模仿生物遗传的原理，将艺术品视为具有“基因”的实体，通过模拟遗传过程产生新的艺术作品。\n\n4. **实验结果与目标设定的关系**：“目标设定的反思：最终得到的图片，与目标图片完全不同。”——这一发现挑战了传统的目标设定观念。实验表明，当人们设定具体目标进行创作时，最终的成果往往与最初的目标不符，这揭示了创作过程中偶然性和不可预见性的重要性。\n\n5. **放弃目标可能带来更好的结果**：“放弃目标：不管看起来多么诱人、多么有说服力，遥远而宏伟的目标并不能指引你来到它的身边。”——这一结论表明，在创意和探索的过程中，过分专注于具体目标可能会限制创新和意外发现的可能性。有时候，放弃固定的目标，保持开放和灵活的思维，可能会带来更加出人意料和有价值的结果。\n\n6. **用户在图片孵化器网站的体验**：“图片孵化器网站的用户体验：在网站上‘繁育’出的图片，激起了我们的好奇心，这些图片生动且富有内涵。”——这段描述说明了用户在参与图片孵化器网站时的体验。用户可以通过选择和“繁育”图片，创造出既富有创意又具个性的艺术作品，这些作品往往超出了初始的预期和想象。\n\n7. **目标与实际成果的不符合**：“目标与结果的偏差：最终得到的图片，与用户原本的目标设定完全不同。”——这一点揭示了在创造性活动中，目标和结果之间常常存在的差异。用户可能最初有一个明确的目标，但在创作过程中，实际的结果往往与最初的目标不符，展现了创作过程中的不可预测性和灵活性。\n\n8. **放弃特定目标的优势**：“放弃特定目标：当用户对自己想要寻找的东西保持开放心态时，网站便能提供出乎意料但最令人满意的结果。”——这说明在创意和艺术的领域里，有时候放弃过于具体的目标，保持一种开放和探索的心态，可能会带来更加令人满意和创新的成果。\n\n9. **图片孵化器网站的演化效应**：“图片孵化器网站的演化效应：通过用户们的前后接力，图片可以完成数百代的进化。”——这描述了图片孵化器网站如何利用用户的集体努力，通过“繁育”和迭代，创造出完全新颖和独特的艺术作品。\n\n10. **实验和生活中目标设定的相似性**：“目标设定在实验和生活中的相似性：在生活中与实现目标有关的方方面面，似乎都反映了从图片孵化网站上分析出的原理。”——这一结论将图片孵化器网站的经验扩展到了更广泛的生活和工作领域，提示了在目标设定和实现过程中存在的普遍现象和原则。\n\n  \n\n---\n\n  \n\n# 4. 目标是错误的指南针\n\n  \n\n1. 偏见和先验性谬论：偏见和先验性谬论是根深蒂固且普遍存在的，这些偏见不仅在古代世界占据至高无上的地位，而且在现代仍然对许多人有着巨大影响。这些偏见和谬论影响我们对现象和其条件的理解。\n\n2. 踏脚石概念：踏脚石是实现目标的必要步骤，但在开始探索时，我们通常不知道哪些踏脚石会通往最终目标。这种不确定性让我们的探索充满了未知和变数。\n\n3. 目标函数的局限性：目标函数是衡量目标实现进度的方法，但它们常常是不完美的。目标函数的不完美之处在于，它可能无法正确反映实际的进展，甚至可能导致误导。\n\n4. 欺骗性目标：存在欺骗性的目标会导致我们做出错误的决策。当目标函数作为指南针时，如果它们指向错误的方向，我们就可能被欺骗，永远无法抵达正确的目的地。\n\n5. 非目标伟大探索系统：非目标伟大探索系统如图片孵化器网站展示了不设定最终目标的探索方式。这种探索方法更加开放，允许探索者在未知的可能性中寻找新的踏脚石。\n\n6. 自然进化和人类创新：自然进化和人类创新都发生在没有明确终极目标的情况下。这两个过程显示了无目标探索的力量和潜力。\n\n7. 智力测试的思维实验：智力测试的思维实验表明，如果我们试图通过目标导向的方式控制进化，结果可能是不切实际的。真正的进化是通过非目标导向的探索实现的。\n\n8. 人类创新的过程：人类的创新过程也是收集踏脚石的过程。这些踏脚石可能不直接指向某个特定的目标，但它们在整体上贡献于创新和发现。\n\n9. 目标的欺骗性和非目标探索的价值：本章强调了目标的欺骗性和非目标探索的价值。通过探索不同的案例，作者指出追求“高大上”的目标可能会导致我们迷失方向，而非目标探索可能是通往伟大发现的正确路径。\n\n10. 思维实验 - 人类智能的进化：自然进化的思维实验显示，如果以提升智力为目标来引导进化，结果将是失败的。自然进化不是目标驱动的，而是通过适应性和随机变异不断探索未知的过程。这表明，即使是人类智能这样复杂的特性，也是在无目标的进化过程中偶然形成的。\n\n11. 人类创新过程：与自然进化相似，人类的创新过程也不是单一目标驱动的。创新往往是基于现有技术和知识的组合，以及对新问题的回应，而非单纯为了实现某个预设的目标。\n\n12. 目标驱动的误导：在探索和创新过程中，目标驱动可能导致误导和局限性。追求具体目标可能阻碍了对广泛可能性的探索，限制了创新的范围。\n\n13. 非目标探索的价值：非目标探索允许更广泛、更开放的探索空间，它强调探索过程本身的重要性，而不是单一的、具体的目标。这种探索方式更能适应不断变化的环境和需求，也更有可能导致意想不到的重大发现。\n\n14. 探索新机会的思考：作者提出，我们应该重新思考探索和创新的方式，转向非目标驱动的探索。这种转变可能需要挑战传统观念和习惯思维，但可能为我们打开新的可能性和机遇。\n\n  \n\n---\n\n  \n\n# 5. 有趣的和新奇的探索\n\n  \n\n1. **新年愿望的现实挑战**：“新年愿望通常很难实现：超过半数的人认为自己能坚持新年愿望，但实际上只有12%的人能做到。”——这表明人们在制定目标时过于乐观，而现实中实现这些目标的难度远超预期。这反映了人们在目标设定和执行上的心理差距。\n\n2. **目标与踏脚石的关系**：“我们很难确定从当前位置到最终目标之间的踏脚石。”——这指出在追求长期目标的过程中，人们往往忽视了实现这些目标所需的具体步骤或中间过程。这强调了在目标追求过程中识别和利用踏脚石的重要性。\n\n3. **对目标的过度关注可能导致误导**：“对目标的过度关注可能将我们引入歧途。”——这个观点提示我们，盲目追求目标而忽视过程中的新发现和机遇可能导致资源的浪费和方向的错误。\n\n4. **新奇性的重要性**：“新奇性是推动进步的重要因素。”——这一点强调了探索未知领域和接受新奇事物的重要性，新奇性不仅为创新提供动力，也是认知发展的关键。\n\n5. **偶然性发现的价值**：“偶然性发现在历史上扮演了重要角色。”——这说明在科学和技术的发展过程中，许多重大的发现并非完全是预先计划和目标导向的结果，而是在探索过程中偶然发现的。\n\n6. **非目标驱动的探索**：“非目标驱动的探索可以产生意想不到的收获。”——这反映了在探索和研究中，没有具体目标的自由探索同样能够带来重要的发现和创新。\n\n7. **物理世界约束与创新**：“物理世界的约束对于新奇性搜索和创新至关重要。”——这一点揭示了在探索新奇事物时，现实世界的物理法则和条件对于引导和限制创新过程的重要性。\n\n8. **通过算法测试理论的重要性**：“通过构建算法来测试理论的理念，在人工智能领域已被普遍接受。”——这一观点说明了人工智能领域中，一个理论只有在被构建成计算机程序并成功运行测试后，才被广泛认可。这强调了在理论研究中，通过实践验证理论的重要性。\n\n9. **新奇性搜索算法的应用**：“新奇性搜索算法的灵感来源于用户在图片孵化器网站上的操作。”——这说明了在创新和科学研究中，生活中的观察和经验可以激发新的研究思路和方法。新奇性搜索算法是通过观察用户行为而得到灵感，进而用于指导机器自主探索新奇事物。\n\n10. **从简单到复杂的行为变化**：“新奇性搜索导致行为从简单变得复杂。”——这一观点揭示了在新奇性搜索中，行为的演变不是基于目标导向，而是从简单的尝试逐渐进展到更复杂的行为模式。这反映了在没有明确目标的探索过程中，信息和复杂性的逐步积累。\n\n11. **新奇性搜索与目标驱动搜索的对比**：“新奇性搜索可能比寻找一个特定的目标产生更好的结果。”——这表明在某些情况下，没有具体目标的探索方式可能比传统的目标导向方式更有效，因为它允许更广泛的探索和意外发现。\n\n12. **新奇性搜索的限制与挑战**：“新奇性搜索的能力维度更大，但也不是无限的。”——这一结论提示我们，尽管新奇性搜索在某些情况下非常有效，但它也有其局限性，尤其在面对极其复杂的问题时。\n\n  \n\n---\n\n  \n\n# 6. 寻宝者万岁\n\n  \n\n1. 新奇性搜索的定义和局限性：“新奇性搜索：基于本书前一章的内容，新奇性搜索带来的经验看起来是在不刻意寻找目标的时候，找到‘目标’反而更容易。”——这强调了新奇性搜索在寻找解决方案时的有效性，即在不专注于特定目标时，可能更容易发现新方法或解决方案。但同时也强调了其局限性，即它并不总能帮助我们找到所需的东西。\n\n2. 目标驱动型搜索与新奇性搜索的对比：“目标驱动型搜索：在许多简单的问题中，朝着一个遥远的目标前进并不是一个好主意，它们显然比没有特定目标的搜索更糟糕。”——这指出在简单问题上，固定目标的搜索方式可能不如新奇性搜索有效。\n\n3. 维持多样性思维的重要性：“保持多样性思维：因为一心一意地追求某个特定目标太有欺骗性，所以我们应该尽可能保留不同选择的可能性。”——这强调在追求目标时应保持开放和多元化的思维方式，避免被单一目标的潜在欺骗性所限制。\n\n4. 目标的欺骗性：“目标的欺骗性：目标越是‘高大上’，其欺骗性也就越强。”——这说明目标本身可能具有误导性，特别是那些听起来很宏伟的目标，可能会导致错误的方向或方法。\n\n5. 新奇性搜索作为寻宝工具：“新奇性搜索作为寻宝工具：在漫无目标的新奇性搜索中，你不一定能找到心中想要的宝藏，反而可能发现许多意料之外的宝藏。”——这表明在探索和发现过程中，新奇性搜索可能带来意外的收获，尽管这些收获可能不是最初的目标。\n\n6. 寻宝者的心态和方法：“寻宝者的心态：寻宝者又可以说是秉持机会主义的探险家，他们致力于寻找任何有价值的东西，而不在乎这些东西具体是什么。”——这强调了作为寻宝者，应该拥有开放和灵活的心态，专注于发现有价值的事物，而不是单一的预设目标。\n\n7. 目标导向型搜索的局限性：“目标导向型搜索的局限性：目标驱动型搜索的‘无能’程度，有时甚至到了‘不堪入目’的地步。”——这反映了在某些情况下，目标导向型搜索可能非常低效，甚至无法解决问题。\n\n8. 搜索的局限性：“搜索的局限性：虽然我们可以找出一些问题，在所有可能的答案中漫无目的地搜索，但最终却找不到解决办法。”——这指出虽然新奇性搜索有其优势，但它并不能保证总能找到解决方案，特别是在面对复杂和广泛的问题时。\n\n9. 目标的欺骗性与搜索方法的选择：“目标的欺骗性与搜索方法：目标越是‘高大上’，其欺骗性也就越强。在选择搜索方法时，我们不能只依赖目标。”——这强调了在探索和发现的过程中，目标的欺骗性可能导致我们选择错误的方法，因此在选择搜索方法时需要考虑更多因素。\n\n10. 目标导向型搜索的无效性：“目标导向型搜索的无效性：在一个简单的走迷宫测试中，目标驱动的方法远远逊色于新奇性搜索。”——这说明在某些情况下，固定目标的搜索方式可能不如新奇性搜索有效。\n\n11. 新奇性搜索的实用性：“新奇性搜索的实用性：在漫无目标的新奇性搜索中，有时可以发现意料之外的宝藏。”——这表明在没有设定具体目标的搜索中，有时可以发现意想不到的有价值的事物，强调了新奇性搜索的实用性。\n\n12. 寻宝者心态的重要性：“寻宝者心态：要想成为一名合格的寻宝者，我们就必须尽可能多地积累踏脚石，因为我们永远不知道哪块踏脚石可能通往有价值的地方。”——这强调了拥有开放和灵活的探索心态的重要性，即寻宝者不仅仅追求特定目标，而是保持对所有可能性的开放。\n\n13. 非目标型创新的意义：“非目标型创新：探索和发现本身就不应该专注于具体的目标，而是应着眼于一些更伟大的东西。”——这指出探索和发现的过程不应该被限制于特定目标，而是应该开放于更广阔的可能性。\n\n  \n\n---\n\n  \n\n# 7. 解开禁锢教育的枷锁\n\n  \n\n1. 目标导向的弊端：“目标导向的问题：目标可能轻易地欺骗我们。”——这表明目标导向的方法虽普遍存在，但可能会误导我们，导致未能实现真正的进步。目标导向意味着以特定的结果为导向，而忽视了过程中的探索和创新。\n\n2. 教育中的目标导向危害：“教育中的目标导向危害：目标导向方法在教育领域中导致了应试教育和剥夺教师自主权等问题。”——指出教育领域过分依赖目标导向，如过分强调标准化考试，可能导致教育的质量降低。\n\n3. 坎贝尔定律：“坎贝尔定律：量化的社会指标越是被用于社会决策，社会腐败的压力便越大。”——这说明过度依赖量化指标会导致负面结果，因为量化目标可能扭曲原有的意图和过程。\n\n4. 不当激励的例子：“不当激励的例子：如英国政府在印度奖励杀死毒蛇的政策，最终导致毒蛇数量增加。”——这说明如果激励机制设计不当，可能会产生反效果，违背初衷。\n\n5. 教育中的非目标思维：“非目标思维在教育中的作用：探索未知、多样性发展和创造力的激发。”——强调在教育领域，非目标导向的思维方式能够促进更多创新和个性化的发展。\n\n6. 教育统一性的问题：“教育统一性的问题：强加的教育统一性可能损害学生的创造力和探索能力。”——指出统一的教育标准虽看似公平，但可能限制教师的教学自由和学生的创新能力。\n\n7. 美国教育制度的批评：“美国教育制度批评：目标导向和统一性导致的问题，反映在美国小学教育的滞后。”——通过比较芬兰和美国的教育制度，指出过分强调目标和统一性可能导致教育质量下降。\n\n8. 目标驱动与社会问题：“目标驱动型思维在社会事业中的破坏性：过度强调目标可能导致教育和其他社会事业领域的隐性破坏。”——这指出，当社会事业（如教育）过度依赖目标时，可能会忽视真正的创新和进步，导致长期的潜在问题。\n\n9. 教育领域的统一标准问题：“统一标准在教育中的限制：追求统一性可能限制创新，导致缺乏多样性的教育体系。”——这强调了教育中的统一性带来的风险，如限制教师的创造力和教学自由，从而抑制学生多样性的发展。\n\n10. 寻宝者原则在教育中的应用：“寻宝者原则：鼓励教师和学校遵循直觉和创新，而非过度依赖标准化测试和统一教育标准。”——这提倡教育领域应更多地依赖于教师的直觉和创造性思考，而不是单一的标准化指导。\n\n11. 重新定义教育评估：“重新定义教育评估：提倡同行评审和多样性探索，而非单一的标准化测试。”——这建议采用更为灵活的评估方式，如同行评审，以促进教育创新和多样性。\n\n12. 教育创新的挑战：“教育创新的挑战：尽管存在困难，但在教育领域探索非目标导向的创新方法是有价值的。”——这强调了教育领域面临的挑战，并呼吁探索新的教学方法和创新。\n\n  \n\n---\n\n  \n\n# 8. 解开禁锢创新的枷锁\n\n  \n\n1. **探险精神与创新的关系**：“探险家的历史：勇敢的探险家们在面对未知时展现出的勇气和创新精神，扩展了人类的认知边界。”——这强调了探险精神在推动人类发展和创新中的重要性。探险家们面对未知的勇气和创新能力是人类知识扩展的关键。\n\n2. **科学创新的必要性**：“科学创新的重要性：科学进步极大地改变了人类的生活方式，对社会产生了深远的影响。”——这突显了科学创新在推动社会发展中的核心作用。科学技术的进步不仅改善了人们的日常生活，还推动了社会的整体进步。\n\n3. **目标导向思维对创新的影响**：“对目标的盲目崇拜：过分专注于特定目标可能限制了我们对创新的追求。”——这指出过分追求特定目标可能限制思维的开放性和创新能力。灵活、开放的思考方式对于创新至关重要。\n\n4. **科研资金的影响**：“科研资金的分配：资金分配过程中的目标导向思维可能影响科学领域的创新。”——科研资金的分配方式可能影响科学领域的创新。目标导向的资金分配可能忽视了那些看似风险较高但潜力巨大的创新研究。\n\n5. **共识与创新的矛盾**：“追求共识对创新的限制：过分追求共识可能阻碍创新的产生。”——在科学研究和其他领域，过分强调共识往往会抑制创新思维，因为真正创新的想法往往在一开始并不被广泛接受。\n\n6. **科学投资的目标导向问题**：“科学投资的目标导向问题：对科学领域的投资决策过度依赖目标导向思维，可能限制了对真正具有创新潜力的项目的支持。”——这指出科学研究资金的分配方式可能过于依赖于明确的目标和预期结果，而这种目标导向的思维可能忽视了那些初看起来不那么明确，但潜力巨大的创新研究。\n\n7. **科学项目评审的共识问题**：“科学项目评审中的共识问题：科学项目评审过程中的共识倾向可能导致真正创新的想法被忽视。”——在科学研究的资助评审过程中，过分依赖于专家群体的共识可能导致那些初看起来不太符合主流观点但具有创新潜力的项目被忽视。\n\n8. **目标思维与科学探索的冲突**：“目标思维与科学探索的冲突：目标导向的思维方式可能阻碍科学探索的真正创新。”——这强调了目标导向思维在科学探索中可能产生的负面影响，即过度注重预定目标可能限制了对更广泛、更有创造性的探索。\n\n9. **非目标探索的重要性**：“非目标探索的重要性：开放式、非目标导向的探索对于科学创新至关重要。”——这突出了在科学探索中保持开放性和灵活性的重要性，强调了非目标导向的探索对于促进真正的创新是必不可少的。\n\n10. **政策与科研投资的关系**：“政策对科研投资的影响：政府和资助机构的政策可能对科学研究的方向和创新产生重大影响。”——这指出政府政策和资助机构的决策对科研的方向和创新有着重大影响，可能导致某些领域或类型的研究受到偏重，而忽视其他可能同样重要的领域。\n\n  \n\n---\n\n  \n\n# 9. 彻底告别对目标的幻想\n\n  \n\n1. 成功与目标的非直接关系：“想要成功，反而不要以成功为目标；只需要做你喜欢和相信的事情，成功就会自然而然地到来。”——这句话强调了成功与追求目标之间不是直接关联的关系。它表明，真正的成功来自于对个人热情和信念的追求，而不是单纯的目标导向。\n\n2. 目标导向思维的限制：“目标导向的思维，会阻碍许多具有重大意义的社会事业的成功。”——这一观点指出，当人们过度强调目标时，可能会忽视过程中的创新和探索，从而限制了社会事业和个人成长的可能性。\n\n3. 非目标导向探索的价值：“通过考虑全新的、开放的、不以目标为重点的探索方法，我们在从教育领域到个性化汽车设计等一系列探索活动中，提出了全新的思路。”——这表明，在各种领域中采用非目标导向的探索方式，可以带来新的思路和创新。\n\n4. 摆脱目标的束缚：“彻底放弃目标，不意味着放任自流地生活，而是赋予生活新的意义。”——这强调了摆脱目标束缚后，人们可以更自由地探索和创新，从而给生活带来新的意义和方向。\n\n5. 目标与自我限制的关系：“高大上的目标可能更有可能成为骗人的工具，将我们的探索带进死胡同。”——这一观点指出，过于宏伟的目标反而可能限制人们的思维，阻碍真正的创新和发现。\n\n6. 寻宝者原则：“成为寻宝者，遵循趣味性和新奇性的线索，可以引导我们走向新的发现和创新。”——这一观点鼓励人们像寻宝者一样探索，跟随个人的兴趣和直觉，而非固守既定的目标。\n\n7. 目标思维的局限性：“目标驱动的思维限制了我们实现革命性成果的可能性。在探索根治疾病的方法、经久不衰的理论、令人炫目的结构等领域，我们需要跳出传统的目标思维。”——这指出，传统的目标导向思维在某些领域，尤其是需要创新和突破性成就的领域，可能会成为探索的障碍。跳出这种思维模式，可以促进新的发现和创新。\n\n8. 目标的欺骗性：“目标的欺骗性在于，它们似乎提供了对最终结果的控制，但实际上这种控制是虚幻的。”——这一观点强调，尽管目标看似提供了对结果的控制，但实际上这种控制是不实的。过于追求目标可能导致错过更多的机会和可能性。\n\n9. 寻宝者的方法论：“成为寻宝者，遵循新奇性和趣味性的线索，可以引导我们走向新的发现和创新。”——这一理念鼓励我们像寻宝者一样，遵循新奇性和趣味性的线索，而非固守既定目标，从而开辟新的发现和创新路径。\n\n10. 趣味性与新奇性的价值：“趣味性和新奇性是寻宝过程中的重要线索，它们可以引导我们探索未知，并带来新的发现。”——这强调了趣味性和新奇性在探索过程中的价值。遵循这些线索可以带来新的想法和发现。\n\n11. 目标思维的误导性：“目标思维可能误导我们，使我们错过真正的机会和创新。”——这一观点指出目标思维可能导致人们忽视真正的机会和创新路径，因为它限制了我们的思考范围和探索可能性。\n\n12. 避免目标的趋同性：“避免目标的趋同性，释放出多路出击的寻宝者。”——这提倡在探索和创新过程中避免单一目标的趋同性，鼓励多元化和多方位的探索，从而增加发现新事物的可能性。\n\n  \n\n---\n\n  \n\n# 10. 案例研究1：重新诠释自然进化\n\n  \n\n1. 人类和细胞：“人类由五十万亿个细胞组成，每个细胞都像迷你城市一样复杂精致。这种复杂结构的形成得益于自然进化。”——这段描述强调了人类体内细胞的复杂性及其在自然进化过程中的重要性。细胞不仅是生命的基本单位，还通过协同工作维持生命活动，这一点在生物学上极为关键。\n\n2. 自然进化的广泛影响：“自然进化设计了地球上的每一种有机生物。”——这句话概述了自然进化对地球生命多样性的全面影响。从海岸红杉到射水鱼，所有生物都是经过数亿年的自然选择和变异形成的，彼此间存在着基因上的远亲关系。\n\n3. 进化与创造性：“生物进化是一种独特的、不断创新的过程，不同于物理世界中的死物。”——这个观点强调了生物进化的创造性和不可预测性，与非生物过程形成鲜明对比。生物进化能够产生复杂的生命形式，如人类大脑，这在物理世界中是无法实现的。\n\n4. 智能设计与自然进化：“智能设计运动认为复杂生命体必有创造者，但达尔文的发现表明，自然进化过程足以解释这种复杂性。”——这段话提出了智能设计与自然进化两种相反的观点，后者通过自然选择和遗传变异来解释生物多样性和复杂性的形成。\n\n5. 自我复制的机器比喻：“不完美的自我复制产生了生物多样性。”——这个比喻用来解释自然进化的过程，其中不精确的遗传复制导致了生物多样性的产生，而这些变异又受到自然选择的影响。\n\n6. 进化论的支持与质疑：“尽管有分歧，但自然选择在进化中的重要性被广泛认可。”——这句话说明了虽然生物学家对进化的具体机制有不同看法，但自然选择在进化中扮演重要角色的观点得到了广泛的支持。\n\n7. 进化的目标性质：“自然选择导致的适者生存可能被错误地理解为进化的目标。”——这个观点对进化的常见解释提出质疑，指出将进化看作有目标的过程可能是误解。进化可能不是朝着某个特定目标前进，而是一个不断的、无目的的过程。\n\n8. 生命的多样性与进化：“生命的多样性不仅仅包括细菌等简单生命形式，还涵盖了复杂多变的生物种类。进化的过程类似于收集不同的‘踏脚石’，并不是有明确目标的直线发展。”——这段描述强调了生命多样性的丰富性和进化过程的非目标性质。进化不是朝着一个特定目标前进，而是类似于收集各种不同可能性的过程。\n\n9. 进化的非目标性探索：“将生存和繁衍等同于目标是误解。进化是一个开放式的探索过程，更像是寻找新奇性和多样性的尝试，而非单纯的生存竞争。”——这个观点挑战了传统将生存和繁衍视为生物进化的终极目标的看法，强调了进化的开放性和非目标性质。\n\n10. 进化的特点：“进化类似于寻宝过程，不仅仅是积累‘踏脚石’，偶然性也扮演了重要角色。”——这部分强调了进化过程中偶然性的作用，如基因突变，并非仅仅是生物间的竞争或自然选择的结果。\n\n11. 扩展适应在进化中的作用：“扩展适应指的是生物的某些特征在新环境中被用于不同的功能，这是非目标性探索的一个关键属性。”——这部分说明了进化过程中特征和功能的转换，强调了进化不是单一目标驱动的。\n\n12. 创造性与竞争在进化中的关系：“进化的创造性是逃避竞争的产物，而非竞争本身。自然进化倾向于探索和积累新的可能性。”——这段话说明了竞争在进化过程中的角色相对于创造性的次要性，强调了进化的多样性和探索性。\n\n13. 生物多样性的增长：“形成新生态位以逃避竞争是生物多样性增长的方式，这显示了进化趋向于多元化而非趋同化。”——这部分强调了进化过程中生态位的形成和变化对于生物多样性的重要性。\n\n14. 化石记录与进化理论：“化石记录揭示了生物进化的历史，但并不直接指向某些‘高级物种’，强调了进化的非目标性和机械性。”——这部分通过化石记录来支持进化作为一个无目标、无意识过程的观点。\n\n  \n\n---\n\n  \n\n# 11. 案例研究2：目标和人工智能领域的探索\n\n  \n\n1. 科学的本质与进步：“科学是对知识的探索，科学不断地拓展了人类可能性的边界，使人们能够更深入地了解这个世界。”——这强调了科学作为知识探索的过程，是人类理解和影响世界的关键途径。科学不仅是一系列知识和理论的集合，而且是一个持续进步和探索的动态过程。\n\n2. 科学家的人性与科学进步：“科学家也是人，跟所有其他人一样，并非完人。”——这表明即使在科学进步的背后，仍然存在人类的局限性和主观性。科学家作为人，他们的行为、信念和相互作用对科学的发展有重要影响。\n\n3. 科学社区的多样性与学科文化：“不同的科学家群体构成了各种学科，每个学科都有专属的惯例和文化。”——这揭示了科学社区的多样性和复杂性。不同学科之间存在文化差异，这些差异影响着学科的发展和科学家的交流方式。\n\n4. 科学成果的传播与同行评审：“科学家在期刊或会议中发表自己的想法，有助于进一步验证其研究，并能将科研的想法或成果传播到更大的社区。”——这强调了科学传播的重要性，以及同行评审在维护科学质量和促进知识传播中的作用。\n\n5. 目标在科学发展中的影响：“目标是具体的，并且允许人们衡量和鼓励科学的进展。”——这指出目标在科学探索中的双重作用：一方面，它们提供了明确的方向和动力，另一方面，过分依赖具体目标可能导致短视和创新的限制。\n\n6. 人工智能领域的案例研究：“人工智能领域的研究核心是创造高度智能化的机器或程序。”——这指出了人工智能领域的主要研究目标和挑战，展示了目标导向思维在科学领域的具体应用，并暗示了它对研究方向和方法的深远影响。\n\n7. 新算法与传统算法的比较：“‘超自然’算法尽管在性能上略逊于传统的‘老靠谱’算法，但它提出了全新的研究方向。”——这指出新算法可能在性能上暂时不及传统算法，但其创新性和潜在的未来价值不应被忽视。实验派启发式方法可能会导致这种新算法被过早排除，忽视了它们可能开启的新研究路径。\n\n8. 启发式方法对科学研究的限制：“严格依赖实验结果和定理验证可能导致科学研究的视野狭隘。”——这说明过分依赖传统的科学方法，如实验结果和理论验证，可能会限制科学探索的广度和深度，忽略了那些在现有评价体系下表现不佳但具有创新潜力的想法。\n\n9. 人工智能领域的搜索策略：“在人工智能领域，不同的搜索策略如实验派和定理派方法，影响着研究的方向和进展。”——这强调了在人工智能研究中，不同的方法和策略会导致不同的研究成果和方向。方法的选择可能会推动或限制某些类型的创新。\n\n10. 研究领域的创新与发展：“探索新想法的自由和开放的科学环境对于推动研究领域的长远发展至关重要。”——这强调了为了促进科学和技术的发展，需要一个更开放和包容的研究环境，其中新想法可以自由发展，而不受现有假设和限制的束缚。","slug":"杂集/为什么伟大不能被计划——肯尼斯·斯坦利,乔尔·雷曼","published":1,"updated":"2024-04-15T18:45:58.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnrd0015hk8z14no2m1k","content":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是《为什么伟大不能被计划》的读书笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>书评：这本书一般，翻来翻去车轱辘想表达同一个意思，其实呢，作者想说的全在书名里了，畅销书是这样的，干货不能再多了，以这本书在互联网上的声量，如果干货再多一点，就是下一本《人类简史》了。</p>\n<h1 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h1><ol>\n<li><p>人工智能研究之旅：“从最初做人工智能领域的研究，到出版这本书来质疑目标在生活和工作中的效用，此间过程既漫长，又充满了意想不到的崎岖。”——这句话概述了作者从事人工智能研究到出版本书的漫长而充满挑战的过程。这强调了科研旅程中的不确定性和探索性质。</p>\n</li>\n<li><p>目标对人工智能和人类的影响：“如果就目标对人工智能主体的影响进行深入研究，那我们自然也会期望了解不同的目标对人类的影响。”——这指出了作者研究的重点转向，即从人工智能的目标到人类的目标，以及这些目标如何影响智能主体，无论是人工智能还是人类。</p>\n</li>\n<li><p>目标的重大影响：“目标产生的影响是不容忽视且令人惊讶的，它们可能会彻底颠覆你对自己的人生成就和未来的思考方式。”——这强调了设定目标对个人成就和未来规划的深远影响，提示读者重新审视自己的目标和期望。</p>\n</li>\n<li><p>人工智能的快速变化：“深度学习已经成为一种趋势，新颖的生成算法持续产生着越来越惊人的结果。”——这反映了人工智能领域的快速发展和技术进步，特别是深度学习和生成算法的影响。</p>\n</li>\n<li><p>本书的时效性和普适性：“我们依然认为，这本书传递的核心经验和教训，经得起时间的考验，依然值得学习和借鉴。”——作者强调，尽管人工智能技术不断进步，本书的核心教训和经验仍具有普遍的适用性和长期的价值。</p>\n</li>\n<li><p>中国作为全球创新中心的角色：“随着中国逐步向‘全球创新中心’的方向转型，本书提供的经验和教训或能恰逢其时地提供一些裨益。”——这突出了中国在全球创新舞台上的重要角色，并暗示本书的内容对中国在创新和技术发展方面的贡献可能具有特别的意义。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"中文版推荐序\"><a href=\"#中文版推荐序\" class=\"headerlink\" title=\"中文版推荐序\"></a>中文版推荐序</h1><ol>\n<li><p><strong>科技发展的不确定性</strong>：“在某个平行宇宙中，你被任命为某国的科技部部长，你的任务是把该国科技发展水平提升至发达国家的水平。”——这个假设性的情景强调了科技发展的不确定性和复杂性。在现实世界中，科技的发展并不是简单的线性过程，而是受到多种因素的影响，包括创新的难以预测性和各种社会、经济、政治因素的交互作用。</p>\n</li>\n<li><p><strong>创新的“意外性”</strong>：“一些实现伟大成就的发明家并非比同行更勤奋、更努力，而是因为他们经常能捡到‘意外的’宝藏。”——这反映了创新过程中的一个关键特征：很多重大的科技突破往往源于意料之外的发现。这说明在科技创新中，灵感和偶然性扮演着重要角色。</p>\n</li>\n<li><p><strong>政府主导的创新局限性</strong>：“当下创新不是由政府主导，像OpenAI这样的小公司才有可能得到巨额的风险投资资金，才可以任性蛮干，才有机会做出伟大的创新。”——这突出了政府主导的科技创新模式的局限性，同时强调了私营部门在推动科技创新中的重要作用，尤其是在高风险、高回报的创新活动中。</p>\n</li>\n<li><p><strong>科技创新的历史案例</strong>：“考察科技史时，你会发现伟大的创造几乎都是由一些谁也想不到的人，在谁也没计划的领域中做出来的。”——这部分提供了多个历史案例，如比尔·盖茨、谷歌的创始、埃隆·马斯克的SpaceX和特斯拉等，这些案例表明科技创新往往来自于非传统路径和意想不到的领域。</p>\n</li>\n<li><p><strong>伟大创新的不可计划性</strong>：“伟大突破是不能计划的。”——这句话强调了伟大科技创新的不可预见性，暗示创新往往发生在最不被预期的情况下，而非通过严密的计划和预设目标来实现。</p>\n</li>\n<li><p><strong>新奇性搜索算法</strong>：“肯尼斯和乔尔发明的算法叫作‘新奇性搜索’(Novel Search)算法，这种算法会随机生成一组解决方案，通过评估新奇性并保留新奇性比较高的方案。”——这介绍了一种创新的算法设计思路，强调探索和实验性质的重要性，这与传统目标导向的算法设计有明显不同。</p>\n</li>\n<li><p><strong>创新过程中的“踏脚石”理论</strong>：“新方案是通往其他新方案的‘踏脚石’(Stepping Stones)。”——这一理论解释了创新过程中的逐步探索和积累，即每一步新奇的尝试都可能成为通向更大创新的基石。</p>\n</li>\n<li><p><strong>创新与目标的关系</strong>：“如果你一开始就向着一个明确的目标努力，你就走不远。目标会窄化你的探索范围。”——这部分阐述了过于明确的目标可能对创新产生限制的观点，暗示在某些情况下，开放和探索式的思维方式可能更有利于创新。</p>\n</li>\n<li><p><strong>政府主导科技发展的局限</strong>：“1971年，美国总统尼克松发起‘癌症战争’，但成效有限；1982年，日本通商产业省投入巨资研发第五代计算机系统，也未能突破。”——这些例子说明，即使是政府主导的、资源丰富的大型科技项目，也不一定能够保证成功。这些项目往往缺乏灵活性和创新性，可能导致效率低下和目标不达成。</p>\n</li>\n<li><p><strong>伟大创新的难以计划性</strong>：“伟大的科技创新往往不是通过明确的目标和计划实现的。”——这句话强调了真正伟大的科技创新通常超出了预设目标和计划的范围，是通过探索未知和追求新奇产生的。</p>\n</li>\n<li><p><strong>新奇性搜索算法的意义</strong>：“新奇性搜索算法不预设具体目标，但有价值观的指引，这个价值观就是新奇和有趣。”——这说明新奇性搜索算法的核心是探索和实验，而不是追求预设的具体目标。这种方法能够开拓更广阔的创新空间。</p>\n</li>\n<li><p><strong>伟大创新的途径</strong>：“如果你一开始就认准了想要得到一个什么样的珍宝，你就不会得到珍宝；最终得到珍宝的人，只是一直在寻找下一块踏脚石。”——这个观点指出，伟大的成就往往不是通过有意识地追求一个特定目标实现的，而是通过持续的探索和尝试，最终达到意想不到的结果。</p>\n</li>\n<li><p><strong>寻找“踏脚石”的重要性</strong>：“伟大不是目标指引的结果，因为通往伟大的路线从来都不是直线。”——这强调了在创新过程中，不断探索和尝试新事物的重要性，而不是一味地追求预设的目标。</p>\n</li>\n<li><p><strong>科技创新的自由发展</strong>：“在很多科技领域进入无人区，我们就必须自己寻找踏脚石。那种认准一个方向猛干，不惜成本投入人力物力的做法不是通往发达之路。”——这表明，在科技领域，自由和灵活的探索方式比固执地追求特定目标更为有效。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><hr>\n<h1 id=\"1-对目标的质疑\"><a href=\"#1-对目标的质疑\" class=\"headerlink\" title=\"1. 对目标的质疑\"></a>1. 对目标的质疑</h1><ol>\n<li><p>目标文化的普及性：“我们难得去谈论‘目标’在自身文化体系中的主导地位，尽管我们自出生起就受其影响。”——这段话指出目标在我们文化中的重要性和普及性。我们从小就被教导追求目标，无论是学习、工作还是生活中的其他方面，目标成为衡量成功的主要标准。</p>\n</li>\n<li><p>目标设定的普遍性：“几乎所有值得去做的事情，都以一个又一个目标的形式呈现出来。”——这反映了社会普遍认为设定目标是实现事物的必要步骤。从小事到大事，从个人到国家层面，目标设定被视为成功的前提。</p>\n</li>\n<li><p>目标对个人和社会的影响：“目标的达成进度，将通过某种方式来衡量。”——这强调了目标在我们文化中的评估性质。我们不断设定目标，并通过各种方式衡量其进展，这种做法影响着我们的思维方式和行动。</p>\n</li>\n<li><p>目标设定的悖论：“如果目标设置得足够适度，它就会起到积极作用；反之，目标越‘高大上’，情况就越复杂。”——这表明目标设定并非总是有效，尤其是在宏大的目标面前，可能会产生反效果，因为实现它们的路径通常是未知和不确定的。</p>\n</li>\n<li><p>目标与创造力的关系：“我们希望在本书中，强调一条异于常规的、不以目标为导向的成功之路。”——这指出除了传统的目标导向方法之外，还有其他成功的途径。书中强调探索和创造性思维的重要性，提出不以目标为导向可能更有助于发现和创新。</p>\n</li>\n<li><p>目标文化的质疑：“我们难得去谈论‘目标’在自身文化体系中的主导地位，尽管我们自出生起就受其影响。”——这段话指出目标在我们文化中的重要性和普及性。我们从小就被教导追求目标，无论是学习、工作还是生活中的其他方面，目标成为衡量成功的主要标准。</p>\n</li>\n<li><p>目标对个人和社会的影响：“目标的达成进度，将通过某种方式来衡量。”——这强调了目标在我们文化中的评估性质。我们不断设定目标，并通过各种方式衡量其进展，这种做法影响着我们的思维方式和行动。</p>\n</li>\n<li><p>目标设定的悖论：“如果目标设置得足够适度，它就会起到积极作用；反之，目标越‘高大上’，情况就越复杂。”——这表明目标设定并非总是有效，尤其是在宏大的目标面前，可能会产生反效果，因为实现它们的路径通常是未知和不确定的。</p>\n</li>\n<li><p>目标与创造力的关系：“我们希望在本书中，强调一条异于常规的、不以目标为导向的成功之路。”——这指出除了传统的目标导向方法之外，还有其他成功的途径。书中强调探索和创造性思维的重要性，提出不以目标为导向可能更有助于发现和创新。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"2-无目标者的胜利\"><a href=\"#2-无目标者的胜利\" class=\"headerlink\" title=\"2. 无目标者的胜利\"></a>2. 无目标者的胜利</h1><ol>\n<li><p><strong>无目标的优势</strong>：“在你规划之际，生活已悄然前行。” ——约翰·列侬(John Lennon)。这句话暗示了生活中的很多重大成就和转变往往不是出于周密的计划和目标设定，而是在不经意间、在没有固定目标的情况下发生的。这挑战了传统上对于目标设定和规划的重视，强调了顺其自然和灵活适应的重要性。</p>\n</li>\n<li><p><strong>成功人士的非传统道路</strong>：“改变世界的神奇公式并不存在，或者说，伟大的成就并没有所谓的成功脚本，它们往往没有经过周密的计划便诞生。”这强调了伟大成就往往来自于非传统的途径，不遵循常规的路径也可能导致出乎意料的成功。</p>\n</li>\n<li><p><strong>偶然性的作用</strong>：“那些沉浸于数照片这个目标的人，完成任务的时间比那些不太专注于这个目标的人更长。” ——理查德·怀斯曼(Richard Wiseman)的实验。这个实验结果表明，过度专注于特定目标可能会忽视其他重要或有价值的信息或机会，强调了对偶然性和意外发现的开放性的重要性。</p>\n</li>\n<li><p><strong>职业道路的偶然转变</strong>：“美国畅销小说家约翰·格里森姆(John Grisham)在转行成为作家之前，学的是法律专业，还当了十年的刑事辩护律师。” 这个例子说明了人们的职业道路可能会因为偶然的事件或发现而发生重大转变，有时这些转变可能导致更大的成功和满足。</p>\n</li>\n<li><p><strong>追随激情的重要性</strong>：“如果你只能从本章中学到一个道理，那么它也许应该是：每个人都有权追随人生的激情所在，即使它们偏离了最初的计划，或与最初的目标相冲突。” 这强调了追随内心的激情和直觉比坚持刚性的目标和计划更重要，有时这种追随可能会带来更大的满足和意外的成功。</p>\n</li>\n<li><p><strong>逆境中的机会发现</strong>：“无论是德普对音乐的热爱意外地把他拉进了演艺圈，还是格里森姆在法律领域的从业经历最终激发了他的写作灵感。” ——这说明有时逆境和意外会带来意想不到的转机，成功人士往往能够在看似偶然的事情中发现新的机会并且勇于追求。</p>\n</li>\n<li><p><strong>开放性与职业探索</strong>：“互联网企业的转型成功案例。” ——许多著名的互联网公司，如YouTube和Flickr，最初的目标与最终的成功方向大相径庭。这些例子表明，在职业和企业发展中保持开放性和灵活性是非常重要的，有时偏离原定目标反而能带来更大的成功。</p>\n</li>\n<li><p><strong>非传统职业道路的成功</strong>：“任天堂最初的业务与后来的转型。” ——任天堂的成功转型显示了非传统职业道路的潜力，说明在职业选择上保持灵活和开放，对新的机会敏感可以带来意想不到的成功。</p>\n</li>\n<li><p><strong>偶然性和激情的追求</strong>：“不寻找，就是最好的寻找方式。” ——这一原则强调了对偶然性和激情的重视，说明在职业和生活中追随直觉和兴趣，而不是死板地坚持原有计划或目标，可能会带来更大的满足和成功。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"3-繁育艺术的艺术\"><a href=\"#3-繁育艺术的艺术\" class=\"headerlink\" title=\"3. 繁育艺术的艺术\"></a>3. 繁育艺术的艺术</h1><ol>\n<li><p><strong>繁育艺术的艺术</strong>：“繁育艺术的艺术：我不会追随小路的方向，而是前往无人踏足之地，留下自己的足迹。”——这句话象征着创新和探索的精神，强调了走出常规思维框架的重要性。在艺术和科学的探索中，走出已知的路径，创造独特的价值和发现，是一个核心概念。</p>\n</li>\n<li><p><strong>图片孵化器网站的创意</strong>：“图片孵化器：一次非常独特的科学实验。”——这一概念阐述了作者通过创建一个能够让用户“繁育”图片的网站，来探索艺术与科技结合的新领域。用户可以选择他们喜欢的图片，这些图片就像动物一样产生后代，从而产生新的艺术作品。</p>\n</li>\n<li><p><strong>遗传艺术的概念</strong>：“遗传艺术：理查德·道金斯在《盲眼钟表匠》中提出的概念。”——遗传艺术是一种创新的艺术形式，它模仿生物遗传的原理，将艺术品视为具有“基因”的实体，通过模拟遗传过程产生新的艺术作品。</p>\n</li>\n<li><p><strong>实验结果与目标设定的关系</strong>：“目标设定的反思：最终得到的图片，与目标图片完全不同。”——这一发现挑战了传统的目标设定观念。实验表明，当人们设定具体目标进行创作时，最终的成果往往与最初的目标不符，这揭示了创作过程中偶然性和不可预见性的重要性。</p>\n</li>\n<li><p><strong>放弃目标可能带来更好的结果</strong>：“放弃目标：不管看起来多么诱人、多么有说服力，遥远而宏伟的目标并不能指引你来到它的身边。”——这一结论表明，在创意和探索的过程中，过分专注于具体目标可能会限制创新和意外发现的可能性。有时候，放弃固定的目标，保持开放和灵活的思维，可能会带来更加出人意料和有价值的结果。</p>\n</li>\n<li><p><strong>用户在图片孵化器网站的体验</strong>：“图片孵化器网站的用户体验：在网站上‘繁育’出的图片，激起了我们的好奇心，这些图片生动且富有内涵。”——这段描述说明了用户在参与图片孵化器网站时的体验。用户可以通过选择和“繁育”图片，创造出既富有创意又具个性的艺术作品，这些作品往往超出了初始的预期和想象。</p>\n</li>\n<li><p><strong>目标与实际成果的不符合</strong>：“目标与结果的偏差：最终得到的图片，与用户原本的目标设定完全不同。”——这一点揭示了在创造性活动中，目标和结果之间常常存在的差异。用户可能最初有一个明确的目标，但在创作过程中，实际的结果往往与最初的目标不符，展现了创作过程中的不可预测性和灵活性。</p>\n</li>\n<li><p><strong>放弃特定目标的优势</strong>：“放弃特定目标：当用户对自己想要寻找的东西保持开放心态时，网站便能提供出乎意料但最令人满意的结果。”——这说明在创意和艺术的领域里，有时候放弃过于具体的目标，保持一种开放和探索的心态，可能会带来更加令人满意和创新的成果。</p>\n</li>\n<li><p><strong>图片孵化器网站的演化效应</strong>：“图片孵化器网站的演化效应：通过用户们的前后接力，图片可以完成数百代的进化。”——这描述了图片孵化器网站如何利用用户的集体努力，通过“繁育”和迭代，创造出完全新颖和独特的艺术作品。</p>\n</li>\n<li><p><strong>实验和生活中目标设定的相似性</strong>：“目标设定在实验和生活中的相似性：在生活中与实现目标有关的方方面面，似乎都反映了从图片孵化网站上分析出的原理。”——这一结论将图片孵化器网站的经验扩展到了更广泛的生活和工作领域，提示了在目标设定和实现过程中存在的普遍现象和原则。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"4-目标是错误的指南针\"><a href=\"#4-目标是错误的指南针\" class=\"headerlink\" title=\"4. 目标是错误的指南针\"></a>4. 目标是错误的指南针</h1><ol>\n<li><p>偏见和先验性谬论：偏见和先验性谬论是根深蒂固且普遍存在的，这些偏见不仅在古代世界占据至高无上的地位，而且在现代仍然对许多人有着巨大影响。这些偏见和谬论影响我们对现象和其条件的理解。</p>\n</li>\n<li><p>踏脚石概念：踏脚石是实现目标的必要步骤，但在开始探索时，我们通常不知道哪些踏脚石会通往最终目标。这种不确定性让我们的探索充满了未知和变数。</p>\n</li>\n<li><p>目标函数的局限性：目标函数是衡量目标实现进度的方法，但它们常常是不完美的。目标函数的不完美之处在于，它可能无法正确反映实际的进展，甚至可能导致误导。</p>\n</li>\n<li><p>欺骗性目标：存在欺骗性的目标会导致我们做出错误的决策。当目标函数作为指南针时，如果它们指向错误的方向，我们就可能被欺骗，永远无法抵达正确的目的地。</p>\n</li>\n<li><p>非目标伟大探索系统：非目标伟大探索系统如图片孵化器网站展示了不设定最终目标的探索方式。这种探索方法更加开放，允许探索者在未知的可能性中寻找新的踏脚石。</p>\n</li>\n<li><p>自然进化和人类创新：自然进化和人类创新都发生在没有明确终极目标的情况下。这两个过程显示了无目标探索的力量和潜力。</p>\n</li>\n<li><p>智力测试的思维实验：智力测试的思维实验表明，如果我们试图通过目标导向的方式控制进化，结果可能是不切实际的。真正的进化是通过非目标导向的探索实现的。</p>\n</li>\n<li><p>人类创新的过程：人类的创新过程也是收集踏脚石的过程。这些踏脚石可能不直接指向某个特定的目标，但它们在整体上贡献于创新和发现。</p>\n</li>\n<li><p>目标的欺骗性和非目标探索的价值：本章强调了目标的欺骗性和非目标探索的价值。通过探索不同的案例，作者指出追求“高大上”的目标可能会导致我们迷失方向，而非目标探索可能是通往伟大发现的正确路径。</p>\n</li>\n<li><p>思维实验 - 人类智能的进化：自然进化的思维实验显示，如果以提升智力为目标来引导进化，结果将是失败的。自然进化不是目标驱动的，而是通过适应性和随机变异不断探索未知的过程。这表明，即使是人类智能这样复杂的特性，也是在无目标的进化过程中偶然形成的。</p>\n</li>\n<li><p>人类创新过程：与自然进化相似，人类的创新过程也不是单一目标驱动的。创新往往是基于现有技术和知识的组合，以及对新问题的回应，而非单纯为了实现某个预设的目标。</p>\n</li>\n<li><p>目标驱动的误导：在探索和创新过程中，目标驱动可能导致误导和局限性。追求具体目标可能阻碍了对广泛可能性的探索，限制了创新的范围。</p>\n</li>\n<li><p>非目标探索的价值：非目标探索允许更广泛、更开放的探索空间，它强调探索过程本身的重要性，而不是单一的、具体的目标。这种探索方式更能适应不断变化的环境和需求，也更有可能导致意想不到的重大发现。</p>\n</li>\n<li><p>探索新机会的思考：作者提出，我们应该重新思考探索和创新的方式，转向非目标驱动的探索。这种转变可能需要挑战传统观念和习惯思维，但可能为我们打开新的可能性和机遇。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"5-有趣的和新奇的探索\"><a href=\"#5-有趣的和新奇的探索\" class=\"headerlink\" title=\"5. 有趣的和新奇的探索\"></a>5. 有趣的和新奇的探索</h1><ol>\n<li><p><strong>新年愿望的现实挑战</strong>：“新年愿望通常很难实现：超过半数的人认为自己能坚持新年愿望，但实际上只有12%的人能做到。”——这表明人们在制定目标时过于乐观，而现实中实现这些目标的难度远超预期。这反映了人们在目标设定和执行上的心理差距。</p>\n</li>\n<li><p><strong>目标与踏脚石的关系</strong>：“我们很难确定从当前位置到最终目标之间的踏脚石。”——这指出在追求长期目标的过程中，人们往往忽视了实现这些目标所需的具体步骤或中间过程。这强调了在目标追求过程中识别和利用踏脚石的重要性。</p>\n</li>\n<li><p><strong>对目标的过度关注可能导致误导</strong>：“对目标的过度关注可能将我们引入歧途。”——这个观点提示我们，盲目追求目标而忽视过程中的新发现和机遇可能导致资源的浪费和方向的错误。</p>\n</li>\n<li><p><strong>新奇性的重要性</strong>：“新奇性是推动进步的重要因素。”——这一点强调了探索未知领域和接受新奇事物的重要性，新奇性不仅为创新提供动力，也是认知发展的关键。</p>\n</li>\n<li><p><strong>偶然性发现的价值</strong>：“偶然性发现在历史上扮演了重要角色。”——这说明在科学和技术的发展过程中，许多重大的发现并非完全是预先计划和目标导向的结果，而是在探索过程中偶然发现的。</p>\n</li>\n<li><p><strong>非目标驱动的探索</strong>：“非目标驱动的探索可以产生意想不到的收获。”——这反映了在探索和研究中，没有具体目标的自由探索同样能够带来重要的发现和创新。</p>\n</li>\n<li><p><strong>物理世界约束与创新</strong>：“物理世界的约束对于新奇性搜索和创新至关重要。”——这一点揭示了在探索新奇事物时，现实世界的物理法则和条件对于引导和限制创新过程的重要性。</p>\n</li>\n<li><p><strong>通过算法测试理论的重要性</strong>：“通过构建算法来测试理论的理念，在人工智能领域已被普遍接受。”——这一观点说明了人工智能领域中，一个理论只有在被构建成计算机程序并成功运行测试后，才被广泛认可。这强调了在理论研究中，通过实践验证理论的重要性。</p>\n</li>\n<li><p><strong>新奇性搜索算法的应用</strong>：“新奇性搜索算法的灵感来源于用户在图片孵化器网站上的操作。”——这说明了在创新和科学研究中，生活中的观察和经验可以激发新的研究思路和方法。新奇性搜索算法是通过观察用户行为而得到灵感，进而用于指导机器自主探索新奇事物。</p>\n</li>\n<li><p><strong>从简单到复杂的行为变化</strong>：“新奇性搜索导致行为从简单变得复杂。”——这一观点揭示了在新奇性搜索中，行为的演变不是基于目标导向，而是从简单的尝试逐渐进展到更复杂的行为模式。这反映了在没有明确目标的探索过程中，信息和复杂性的逐步积累。</p>\n</li>\n<li><p><strong>新奇性搜索与目标驱动搜索的对比</strong>：“新奇性搜索可能比寻找一个特定的目标产生更好的结果。”——这表明在某些情况下，没有具体目标的探索方式可能比传统的目标导向方式更有效，因为它允许更广泛的探索和意外发现。</p>\n</li>\n<li><p><strong>新奇性搜索的限制与挑战</strong>：“新奇性搜索的能力维度更大，但也不是无限的。”——这一结论提示我们，尽管新奇性搜索在某些情况下非常有效，但它也有其局限性，尤其在面对极其复杂的问题时。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"6-寻宝者万岁\"><a href=\"#6-寻宝者万岁\" class=\"headerlink\" title=\"6. 寻宝者万岁\"></a>6. 寻宝者万岁</h1><ol>\n<li><p>新奇性搜索的定义和局限性：“新奇性搜索：基于本书前一章的内容，新奇性搜索带来的经验看起来是在不刻意寻找目标的时候，找到‘目标’反而更容易。”——这强调了新奇性搜索在寻找解决方案时的有效性，即在不专注于特定目标时，可能更容易发现新方法或解决方案。但同时也强调了其局限性，即它并不总能帮助我们找到所需的东西。</p>\n</li>\n<li><p>目标驱动型搜索与新奇性搜索的对比：“目标驱动型搜索：在许多简单的问题中，朝着一个遥远的目标前进并不是一个好主意，它们显然比没有特定目标的搜索更糟糕。”——这指出在简单问题上，固定目标的搜索方式可能不如新奇性搜索有效。</p>\n</li>\n<li><p>维持多样性思维的重要性：“保持多样性思维：因为一心一意地追求某个特定目标太有欺骗性，所以我们应该尽可能保留不同选择的可能性。”——这强调在追求目标时应保持开放和多元化的思维方式，避免被单一目标的潜在欺骗性所限制。</p>\n</li>\n<li><p>目标的欺骗性：“目标的欺骗性：目标越是‘高大上’，其欺骗性也就越强。”——这说明目标本身可能具有误导性，特别是那些听起来很宏伟的目标，可能会导致错误的方向或方法。</p>\n</li>\n<li><p>新奇性搜索作为寻宝工具：“新奇性搜索作为寻宝工具：在漫无目标的新奇性搜索中，你不一定能找到心中想要的宝藏，反而可能发现许多意料之外的宝藏。”——这表明在探索和发现过程中，新奇性搜索可能带来意外的收获，尽管这些收获可能不是最初的目标。</p>\n</li>\n<li><p>寻宝者的心态和方法：“寻宝者的心态：寻宝者又可以说是秉持机会主义的探险家，他们致力于寻找任何有价值的东西，而不在乎这些东西具体是什么。”——这强调了作为寻宝者，应该拥有开放和灵活的心态，专注于发现有价值的事物，而不是单一的预设目标。</p>\n</li>\n<li><p>目标导向型搜索的局限性：“目标导向型搜索的局限性：目标驱动型搜索的‘无能’程度，有时甚至到了‘不堪入目’的地步。”——这反映了在某些情况下，目标导向型搜索可能非常低效，甚至无法解决问题。</p>\n</li>\n<li><p>搜索的局限性：“搜索的局限性：虽然我们可以找出一些问题，在所有可能的答案中漫无目的地搜索，但最终却找不到解决办法。”——这指出虽然新奇性搜索有其优势，但它并不能保证总能找到解决方案，特别是在面对复杂和广泛的问题时。</p>\n</li>\n<li><p>目标的欺骗性与搜索方法的选择：“目标的欺骗性与搜索方法：目标越是‘高大上’，其欺骗性也就越强。在选择搜索方法时，我们不能只依赖目标。”——这强调了在探索和发现的过程中，目标的欺骗性可能导致我们选择错误的方法，因此在选择搜索方法时需要考虑更多因素。</p>\n</li>\n<li><p>目标导向型搜索的无效性：“目标导向型搜索的无效性：在一个简单的走迷宫测试中，目标驱动的方法远远逊色于新奇性搜索。”——这说明在某些情况下，固定目标的搜索方式可能不如新奇性搜索有效。</p>\n</li>\n<li><p>新奇性搜索的实用性：“新奇性搜索的实用性：在漫无目标的新奇性搜索中，有时可以发现意料之外的宝藏。”——这表明在没有设定具体目标的搜索中，有时可以发现意想不到的有价值的事物，强调了新奇性搜索的实用性。</p>\n</li>\n<li><p>寻宝者心态的重要性：“寻宝者心态：要想成为一名合格的寻宝者，我们就必须尽可能多地积累踏脚石，因为我们永远不知道哪块踏脚石可能通往有价值的地方。”——这强调了拥有开放和灵活的探索心态的重要性，即寻宝者不仅仅追求特定目标，而是保持对所有可能性的开放。</p>\n</li>\n<li><p>非目标型创新的意义：“非目标型创新：探索和发现本身就不应该专注于具体的目标，而是应着眼于一些更伟大的东西。”——这指出探索和发现的过程不应该被限制于特定目标，而是应该开放于更广阔的可能性。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"7-解开禁锢教育的枷锁\"><a href=\"#7-解开禁锢教育的枷锁\" class=\"headerlink\" title=\"7. 解开禁锢教育的枷锁\"></a>7. 解开禁锢教育的枷锁</h1><ol>\n<li><p>目标导向的弊端：“目标导向的问题：目标可能轻易地欺骗我们。”——这表明目标导向的方法虽普遍存在，但可能会误导我们，导致未能实现真正的进步。目标导向意味着以特定的结果为导向，而忽视了过程中的探索和创新。</p>\n</li>\n<li><p>教育中的目标导向危害：“教育中的目标导向危害：目标导向方法在教育领域中导致了应试教育和剥夺教师自主权等问题。”——指出教育领域过分依赖目标导向，如过分强调标准化考试，可能导致教育的质量降低。</p>\n</li>\n<li><p>坎贝尔定律：“坎贝尔定律：量化的社会指标越是被用于社会决策，社会腐败的压力便越大。”——这说明过度依赖量化指标会导致负面结果，因为量化目标可能扭曲原有的意图和过程。</p>\n</li>\n<li><p>不当激励的例子：“不当激励的例子：如英国政府在印度奖励杀死毒蛇的政策，最终导致毒蛇数量增加。”——这说明如果激励机制设计不当，可能会产生反效果，违背初衷。</p>\n</li>\n<li><p>教育中的非目标思维：“非目标思维在教育中的作用：探索未知、多样性发展和创造力的激发。”——强调在教育领域，非目标导向的思维方式能够促进更多创新和个性化的发展。</p>\n</li>\n<li><p>教育统一性的问题：“教育统一性的问题：强加的教育统一性可能损害学生的创造力和探索能力。”——指出统一的教育标准虽看似公平，但可能限制教师的教学自由和学生的创新能力。</p>\n</li>\n<li><p>美国教育制度的批评：“美国教育制度批评：目标导向和统一性导致的问题，反映在美国小学教育的滞后。”——通过比较芬兰和美国的教育制度，指出过分强调目标和统一性可能导致教育质量下降。</p>\n</li>\n<li><p>目标驱动与社会问题：“目标驱动型思维在社会事业中的破坏性：过度强调目标可能导致教育和其他社会事业领域的隐性破坏。”——这指出，当社会事业（如教育）过度依赖目标时，可能会忽视真正的创新和进步，导致长期的潜在问题。</p>\n</li>\n<li><p>教育领域的统一标准问题：“统一标准在教育中的限制：追求统一性可能限制创新，导致缺乏多样性的教育体系。”——这强调了教育中的统一性带来的风险，如限制教师的创造力和教学自由，从而抑制学生多样性的发展。</p>\n</li>\n<li><p>寻宝者原则在教育中的应用：“寻宝者原则：鼓励教师和学校遵循直觉和创新，而非过度依赖标准化测试和统一教育标准。”——这提倡教育领域应更多地依赖于教师的直觉和创造性思考，而不是单一的标准化指导。</p>\n</li>\n<li><p>重新定义教育评估：“重新定义教育评估：提倡同行评审和多样性探索，而非单一的标准化测试。”——这建议采用更为灵活的评估方式，如同行评审，以促进教育创新和多样性。</p>\n</li>\n<li><p>教育创新的挑战：“教育创新的挑战：尽管存在困难，但在教育领域探索非目标导向的创新方法是有价值的。”——这强调了教育领域面临的挑战，并呼吁探索新的教学方法和创新。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"8-解开禁锢创新的枷锁\"><a href=\"#8-解开禁锢创新的枷锁\" class=\"headerlink\" title=\"8. 解开禁锢创新的枷锁\"></a>8. 解开禁锢创新的枷锁</h1><ol>\n<li><p><strong>探险精神与创新的关系</strong>：“探险家的历史：勇敢的探险家们在面对未知时展现出的勇气和创新精神，扩展了人类的认知边界。”——这强调了探险精神在推动人类发展和创新中的重要性。探险家们面对未知的勇气和创新能力是人类知识扩展的关键。</p>\n</li>\n<li><p><strong>科学创新的必要性</strong>：“科学创新的重要性：科学进步极大地改变了人类的生活方式，对社会产生了深远的影响。”——这突显了科学创新在推动社会发展中的核心作用。科学技术的进步不仅改善了人们的日常生活，还推动了社会的整体进步。</p>\n</li>\n<li><p><strong>目标导向思维对创新的影响</strong>：“对目标的盲目崇拜：过分专注于特定目标可能限制了我们对创新的追求。”——这指出过分追求特定目标可能限制思维的开放性和创新能力。灵活、开放的思考方式对于创新至关重要。</p>\n</li>\n<li><p><strong>科研资金的影响</strong>：“科研资金的分配：资金分配过程中的目标导向思维可能影响科学领域的创新。”——科研资金的分配方式可能影响科学领域的创新。目标导向的资金分配可能忽视了那些看似风险较高但潜力巨大的创新研究。</p>\n</li>\n<li><p><strong>共识与创新的矛盾</strong>：“追求共识对创新的限制：过分追求共识可能阻碍创新的产生。”——在科学研究和其他领域，过分强调共识往往会抑制创新思维，因为真正创新的想法往往在一开始并不被广泛接受。</p>\n</li>\n<li><p><strong>科学投资的目标导向问题</strong>：“科学投资的目标导向问题：对科学领域的投资决策过度依赖目标导向思维，可能限制了对真正具有创新潜力的项目的支持。”——这指出科学研究资金的分配方式可能过于依赖于明确的目标和预期结果，而这种目标导向的思维可能忽视了那些初看起来不那么明确，但潜力巨大的创新研究。</p>\n</li>\n<li><p><strong>科学项目评审的共识问题</strong>：“科学项目评审中的共识问题：科学项目评审过程中的共识倾向可能导致真正创新的想法被忽视。”——在科学研究的资助评审过程中，过分依赖于专家群体的共识可能导致那些初看起来不太符合主流观点但具有创新潜力的项目被忽视。</p>\n</li>\n<li><p><strong>目标思维与科学探索的冲突</strong>：“目标思维与科学探索的冲突：目标导向的思维方式可能阻碍科学探索的真正创新。”——这强调了目标导向思维在科学探索中可能产生的负面影响，即过度注重预定目标可能限制了对更广泛、更有创造性的探索。</p>\n</li>\n<li><p><strong>非目标探索的重要性</strong>：“非目标探索的重要性：开放式、非目标导向的探索对于科学创新至关重要。”——这突出了在科学探索中保持开放性和灵活性的重要性，强调了非目标导向的探索对于促进真正的创新是必不可少的。</p>\n</li>\n<li><p><strong>政策与科研投资的关系</strong>：“政策对科研投资的影响：政府和资助机构的政策可能对科学研究的方向和创新产生重大影响。”——这指出政府政策和资助机构的决策对科研的方向和创新有着重大影响，可能导致某些领域或类型的研究受到偏重，而忽视其他可能同样重要的领域。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"9-彻底告别对目标的幻想\"><a href=\"#9-彻底告别对目标的幻想\" class=\"headerlink\" title=\"9. 彻底告别对目标的幻想\"></a>9. 彻底告别对目标的幻想</h1><ol>\n<li><p>成功与目标的非直接关系：“想要成功，反而不要以成功为目标；只需要做你喜欢和相信的事情，成功就会自然而然地到来。”——这句话强调了成功与追求目标之间不是直接关联的关系。它表明，真正的成功来自于对个人热情和信念的追求，而不是单纯的目标导向。</p>\n</li>\n<li><p>目标导向思维的限制：“目标导向的思维，会阻碍许多具有重大意义的社会事业的成功。”——这一观点指出，当人们过度强调目标时，可能会忽视过程中的创新和探索，从而限制了社会事业和个人成长的可能性。</p>\n</li>\n<li><p>非目标导向探索的价值：“通过考虑全新的、开放的、不以目标为重点的探索方法，我们在从教育领域到个性化汽车设计等一系列探索活动中，提出了全新的思路。”——这表明，在各种领域中采用非目标导向的探索方式，可以带来新的思路和创新。</p>\n</li>\n<li><p>摆脱目标的束缚：“彻底放弃目标，不意味着放任自流地生活，而是赋予生活新的意义。”——这强调了摆脱目标束缚后，人们可以更自由地探索和创新，从而给生活带来新的意义和方向。</p>\n</li>\n<li><p>目标与自我限制的关系：“高大上的目标可能更有可能成为骗人的工具，将我们的探索带进死胡同。”——这一观点指出，过于宏伟的目标反而可能限制人们的思维，阻碍真正的创新和发现。</p>\n</li>\n<li><p>寻宝者原则：“成为寻宝者，遵循趣味性和新奇性的线索，可以引导我们走向新的发现和创新。”——这一观点鼓励人们像寻宝者一样探索，跟随个人的兴趣和直觉，而非固守既定的目标。</p>\n</li>\n<li><p>目标思维的局限性：“目标驱动的思维限制了我们实现革命性成果的可能性。在探索根治疾病的方法、经久不衰的理论、令人炫目的结构等领域，我们需要跳出传统的目标思维。”——这指出，传统的目标导向思维在某些领域，尤其是需要创新和突破性成就的领域，可能会成为探索的障碍。跳出这种思维模式，可以促进新的发现和创新。</p>\n</li>\n<li><p>目标的欺骗性：“目标的欺骗性在于，它们似乎提供了对最终结果的控制，但实际上这种控制是虚幻的。”——这一观点强调，尽管目标看似提供了对结果的控制，但实际上这种控制是不实的。过于追求目标可能导致错过更多的机会和可能性。</p>\n</li>\n<li><p>寻宝者的方法论：“成为寻宝者，遵循新奇性和趣味性的线索，可以引导我们走向新的发现和创新。”——这一理念鼓励我们像寻宝者一样，遵循新奇性和趣味性的线索，而非固守既定目标，从而开辟新的发现和创新路径。</p>\n</li>\n<li><p>趣味性与新奇性的价值：“趣味性和新奇性是寻宝过程中的重要线索，它们可以引导我们探索未知，并带来新的发现。”——这强调了趣味性和新奇性在探索过程中的价值。遵循这些线索可以带来新的想法和发现。</p>\n</li>\n<li><p>目标思维的误导性：“目标思维可能误导我们，使我们错过真正的机会和创新。”——这一观点指出目标思维可能导致人们忽视真正的机会和创新路径，因为它限制了我们的思考范围和探索可能性。</p>\n</li>\n<li><p>避免目标的趋同性：“避免目标的趋同性，释放出多路出击的寻宝者。”——这提倡在探索和创新过程中避免单一目标的趋同性，鼓励多元化和多方位的探索，从而增加发现新事物的可能性。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"10-案例研究1：重新诠释自然进化\"><a href=\"#10-案例研究1：重新诠释自然进化\" class=\"headerlink\" title=\"10. 案例研究1：重新诠释自然进化\"></a>10. 案例研究1：重新诠释自然进化</h1><ol>\n<li><p>人类和细胞：“人类由五十万亿个细胞组成，每个细胞都像迷你城市一样复杂精致。这种复杂结构的形成得益于自然进化。”——这段描述强调了人类体内细胞的复杂性及其在自然进化过程中的重要性。细胞不仅是生命的基本单位，还通过协同工作维持生命活动，这一点在生物学上极为关键。</p>\n</li>\n<li><p>自然进化的广泛影响：“自然进化设计了地球上的每一种有机生物。”——这句话概述了自然进化对地球生命多样性的全面影响。从海岸红杉到射水鱼，所有生物都是经过数亿年的自然选择和变异形成的，彼此间存在着基因上的远亲关系。</p>\n</li>\n<li><p>进化与创造性：“生物进化是一种独特的、不断创新的过程，不同于物理世界中的死物。”——这个观点强调了生物进化的创造性和不可预测性，与非生物过程形成鲜明对比。生物进化能够产生复杂的生命形式，如人类大脑，这在物理世界中是无法实现的。</p>\n</li>\n<li><p>智能设计与自然进化：“智能设计运动认为复杂生命体必有创造者，但达尔文的发现表明，自然进化过程足以解释这种复杂性。”——这段话提出了智能设计与自然进化两种相反的观点，后者通过自然选择和遗传变异来解释生物多样性和复杂性的形成。</p>\n</li>\n<li><p>自我复制的机器比喻：“不完美的自我复制产生了生物多样性。”——这个比喻用来解释自然进化的过程，其中不精确的遗传复制导致了生物多样性的产生，而这些变异又受到自然选择的影响。</p>\n</li>\n<li><p>进化论的支持与质疑：“尽管有分歧，但自然选择在进化中的重要性被广泛认可。”——这句话说明了虽然生物学家对进化的具体机制有不同看法，但自然选择在进化中扮演重要角色的观点得到了广泛的支持。</p>\n</li>\n<li><p>进化的目标性质：“自然选择导致的适者生存可能被错误地理解为进化的目标。”——这个观点对进化的常见解释提出质疑，指出将进化看作有目标的过程可能是误解。进化可能不是朝着某个特定目标前进，而是一个不断的、无目的的过程。</p>\n</li>\n<li><p>生命的多样性与进化：“生命的多样性不仅仅包括细菌等简单生命形式，还涵盖了复杂多变的生物种类。进化的过程类似于收集不同的‘踏脚石’，并不是有明确目标的直线发展。”——这段描述强调了生命多样性的丰富性和进化过程的非目标性质。进化不是朝着一个特定目标前进，而是类似于收集各种不同可能性的过程。</p>\n</li>\n<li><p>进化的非目标性探索：“将生存和繁衍等同于目标是误解。进化是一个开放式的探索过程，更像是寻找新奇性和多样性的尝试，而非单纯的生存竞争。”——这个观点挑战了传统将生存和繁衍视为生物进化的终极目标的看法，强调了进化的开放性和非目标性质。</p>\n</li>\n<li><p>进化的特点：“进化类似于寻宝过程，不仅仅是积累‘踏脚石’，偶然性也扮演了重要角色。”——这部分强调了进化过程中偶然性的作用，如基因突变，并非仅仅是生物间的竞争或自然选择的结果。</p>\n</li>\n<li><p>扩展适应在进化中的作用：“扩展适应指的是生物的某些特征在新环境中被用于不同的功能，这是非目标性探索的一个关键属性。”——这部分说明了进化过程中特征和功能的转换，强调了进化不是单一目标驱动的。</p>\n</li>\n<li><p>创造性与竞争在进化中的关系：“进化的创造性是逃避竞争的产物，而非竞争本身。自然进化倾向于探索和积累新的可能性。”——这段话说明了竞争在进化过程中的角色相对于创造性的次要性，强调了进化的多样性和探索性。</p>\n</li>\n<li><p>生物多样性的增长：“形成新生态位以逃避竞争是生物多样性增长的方式，这显示了进化趋向于多元化而非趋同化。”——这部分强调了进化过程中生态位的形成和变化对于生物多样性的重要性。</p>\n</li>\n<li><p>化石记录与进化理论：“化石记录揭示了生物进化的历史，但并不直接指向某些‘高级物种’，强调了进化的非目标性和机械性。”——这部分通过化石记录来支持进化作为一个无目标、无意识过程的观点。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"11-案例研究2：目标和人工智能领域的探索\"><a href=\"#11-案例研究2：目标和人工智能领域的探索\" class=\"headerlink\" title=\"11. 案例研究2：目标和人工智能领域的探索\"></a>11. 案例研究2：目标和人工智能领域的探索</h1><ol>\n<li><p>科学的本质与进步：“科学是对知识的探索，科学不断地拓展了人类可能性的边界，使人们能够更深入地了解这个世界。”——这强调了科学作为知识探索的过程，是人类理解和影响世界的关键途径。科学不仅是一系列知识和理论的集合，而且是一个持续进步和探索的动态过程。</p>\n</li>\n<li><p>科学家的人性与科学进步：“科学家也是人，跟所有其他人一样，并非完人。”——这表明即使在科学进步的背后，仍然存在人类的局限性和主观性。科学家作为人，他们的行为、信念和相互作用对科学的发展有重要影响。</p>\n</li>\n<li><p>科学社区的多样性与学科文化：“不同的科学家群体构成了各种学科，每个学科都有专属的惯例和文化。”——这揭示了科学社区的多样性和复杂性。不同学科之间存在文化差异，这些差异影响着学科的发展和科学家的交流方式。</p>\n</li>\n<li><p>科学成果的传播与同行评审：“科学家在期刊或会议中发表自己的想法，有助于进一步验证其研究，并能将科研的想法或成果传播到更大的社区。”——这强调了科学传播的重要性，以及同行评审在维护科学质量和促进知识传播中的作用。</p>\n</li>\n<li><p>目标在科学发展中的影响：“目标是具体的，并且允许人们衡量和鼓励科学的进展。”——这指出目标在科学探索中的双重作用：一方面，它们提供了明确的方向和动力，另一方面，过分依赖具体目标可能导致短视和创新的限制。</p>\n</li>\n<li><p>人工智能领域的案例研究：“人工智能领域的研究核心是创造高度智能化的机器或程序。”——这指出了人工智能领域的主要研究目标和挑战，展示了目标导向思维在科学领域的具体应用，并暗示了它对研究方向和方法的深远影响。</p>\n</li>\n<li><p>新算法与传统算法的比较：“‘超自然’算法尽管在性能上略逊于传统的‘老靠谱’算法，但它提出了全新的研究方向。”——这指出新算法可能在性能上暂时不及传统算法，但其创新性和潜在的未来价值不应被忽视。实验派启发式方法可能会导致这种新算法被过早排除，忽视了它们可能开启的新研究路径。</p>\n</li>\n<li><p>启发式方法对科学研究的限制：“严格依赖实验结果和定理验证可能导致科学研究的视野狭隘。”——这说明过分依赖传统的科学方法，如实验结果和理论验证，可能会限制科学探索的广度和深度，忽略了那些在现有评价体系下表现不佳但具有创新潜力的想法。</p>\n</li>\n<li><p>人工智能领域的搜索策略：“在人工智能领域，不同的搜索策略如实验派和定理派方法，影响着研究的方向和进展。”——这强调了在人工智能研究中，不同的方法和策略会导致不同的研究成果和方向。方法的选择可能会推动或限制某些类型的创新。</p>\n</li>\n<li><p>研究领域的创新与发展：“探索新想法的自由和开放的科学环境对于推动研究领域的长远发展至关重要。”——这强调了为了促进科学和技术的发展，需要一个更开放和包容的研究环境，其中新想法可以自由发展，而不受现有假设和限制的束缚。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是《为什么伟大不能被计划》的读书笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>书评：这本书一般，翻来翻去车轱辘想表达同一个意思，其实呢，作者想说的全在书名里了，畅销书是这样的，干货不能再多了，以这本书在互联网上的声量，如果干货再多一点，就是下一本《人类简史》了。</p>\n<h1 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h1><ol>\n<li><p>人工智能研究之旅：“从最初做人工智能领域的研究，到出版这本书来质疑目标在生活和工作中的效用，此间过程既漫长，又充满了意想不到的崎岖。”——这句话概述了作者从事人工智能研究到出版本书的漫长而充满挑战的过程。这强调了科研旅程中的不确定性和探索性质。</p>\n</li>\n<li><p>目标对人工智能和人类的影响：“如果就目标对人工智能主体的影响进行深入研究，那我们自然也会期望了解不同的目标对人类的影响。”——这指出了作者研究的重点转向，即从人工智能的目标到人类的目标，以及这些目标如何影响智能主体，无论是人工智能还是人类。</p>\n</li>\n<li><p>目标的重大影响：“目标产生的影响是不容忽视且令人惊讶的，它们可能会彻底颠覆你对自己的人生成就和未来的思考方式。”——这强调了设定目标对个人成就和未来规划的深远影响，提示读者重新审视自己的目标和期望。</p>\n</li>\n<li><p>人工智能的快速变化：“深度学习已经成为一种趋势，新颖的生成算法持续产生着越来越惊人的结果。”——这反映了人工智能领域的快速发展和技术进步，特别是深度学习和生成算法的影响。</p>\n</li>\n<li><p>本书的时效性和普适性：“我们依然认为，这本书传递的核心经验和教训，经得起时间的考验，依然值得学习和借鉴。”——作者强调，尽管人工智能技术不断进步，本书的核心教训和经验仍具有普遍的适用性和长期的价值。</p>\n</li>\n<li><p>中国作为全球创新中心的角色：“随着中国逐步向‘全球创新中心’的方向转型，本书提供的经验和教训或能恰逢其时地提供一些裨益。”——这突出了中国在全球创新舞台上的重要角色，并暗示本书的内容对中国在创新和技术发展方面的贡献可能具有特别的意义。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"中文版推荐序\"><a href=\"#中文版推荐序\" class=\"headerlink\" title=\"中文版推荐序\"></a>中文版推荐序</h1><ol>\n<li><p><strong>科技发展的不确定性</strong>：“在某个平行宇宙中，你被任命为某国的科技部部长，你的任务是把该国科技发展水平提升至发达国家的水平。”——这个假设性的情景强调了科技发展的不确定性和复杂性。在现实世界中，科技的发展并不是简单的线性过程，而是受到多种因素的影响，包括创新的难以预测性和各种社会、经济、政治因素的交互作用。</p>\n</li>\n<li><p><strong>创新的“意外性”</strong>：“一些实现伟大成就的发明家并非比同行更勤奋、更努力，而是因为他们经常能捡到‘意外的’宝藏。”——这反映了创新过程中的一个关键特征：很多重大的科技突破往往源于意料之外的发现。这说明在科技创新中，灵感和偶然性扮演着重要角色。</p>\n</li>\n<li><p><strong>政府主导的创新局限性</strong>：“当下创新不是由政府主导，像OpenAI这样的小公司才有可能得到巨额的风险投资资金，才可以任性蛮干，才有机会做出伟大的创新。”——这突出了政府主导的科技创新模式的局限性，同时强调了私营部门在推动科技创新中的重要作用，尤其是在高风险、高回报的创新活动中。</p>\n</li>\n<li><p><strong>科技创新的历史案例</strong>：“考察科技史时，你会发现伟大的创造几乎都是由一些谁也想不到的人，在谁也没计划的领域中做出来的。”——这部分提供了多个历史案例，如比尔·盖茨、谷歌的创始、埃隆·马斯克的SpaceX和特斯拉等，这些案例表明科技创新往往来自于非传统路径和意想不到的领域。</p>\n</li>\n<li><p><strong>伟大创新的不可计划性</strong>：“伟大突破是不能计划的。”——这句话强调了伟大科技创新的不可预见性，暗示创新往往发生在最不被预期的情况下，而非通过严密的计划和预设目标来实现。</p>\n</li>\n<li><p><strong>新奇性搜索算法</strong>：“肯尼斯和乔尔发明的算法叫作‘新奇性搜索’(Novel Search)算法，这种算法会随机生成一组解决方案，通过评估新奇性并保留新奇性比较高的方案。”——这介绍了一种创新的算法设计思路，强调探索和实验性质的重要性，这与传统目标导向的算法设计有明显不同。</p>\n</li>\n<li><p><strong>创新过程中的“踏脚石”理论</strong>：“新方案是通往其他新方案的‘踏脚石’(Stepping Stones)。”——这一理论解释了创新过程中的逐步探索和积累，即每一步新奇的尝试都可能成为通向更大创新的基石。</p>\n</li>\n<li><p><strong>创新与目标的关系</strong>：“如果你一开始就向着一个明确的目标努力，你就走不远。目标会窄化你的探索范围。”——这部分阐述了过于明确的目标可能对创新产生限制的观点，暗示在某些情况下，开放和探索式的思维方式可能更有利于创新。</p>\n</li>\n<li><p><strong>政府主导科技发展的局限</strong>：“1971年，美国总统尼克松发起‘癌症战争’，但成效有限；1982年，日本通商产业省投入巨资研发第五代计算机系统，也未能突破。”——这些例子说明，即使是政府主导的、资源丰富的大型科技项目，也不一定能够保证成功。这些项目往往缺乏灵活性和创新性，可能导致效率低下和目标不达成。</p>\n</li>\n<li><p><strong>伟大创新的难以计划性</strong>：“伟大的科技创新往往不是通过明确的目标和计划实现的。”——这句话强调了真正伟大的科技创新通常超出了预设目标和计划的范围，是通过探索未知和追求新奇产生的。</p>\n</li>\n<li><p><strong>新奇性搜索算法的意义</strong>：“新奇性搜索算法不预设具体目标，但有价值观的指引，这个价值观就是新奇和有趣。”——这说明新奇性搜索算法的核心是探索和实验，而不是追求预设的具体目标。这种方法能够开拓更广阔的创新空间。</p>\n</li>\n<li><p><strong>伟大创新的途径</strong>：“如果你一开始就认准了想要得到一个什么样的珍宝，你就不会得到珍宝；最终得到珍宝的人，只是一直在寻找下一块踏脚石。”——这个观点指出，伟大的成就往往不是通过有意识地追求一个特定目标实现的，而是通过持续的探索和尝试，最终达到意想不到的结果。</p>\n</li>\n<li><p><strong>寻找“踏脚石”的重要性</strong>：“伟大不是目标指引的结果，因为通往伟大的路线从来都不是直线。”——这强调了在创新过程中，不断探索和尝试新事物的重要性，而不是一味地追求预设的目标。</p>\n</li>\n<li><p><strong>科技创新的自由发展</strong>：“在很多科技领域进入无人区，我们就必须自己寻找踏脚石。那种认准一个方向猛干，不惜成本投入人力物力的做法不是通往发达之路。”——这表明，在科技领域，自由和灵活的探索方式比固执地追求特定目标更为有效。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><hr>\n<h1 id=\"1-对目标的质疑\"><a href=\"#1-对目标的质疑\" class=\"headerlink\" title=\"1. 对目标的质疑\"></a>1. 对目标的质疑</h1><ol>\n<li><p>目标文化的普及性：“我们难得去谈论‘目标’在自身文化体系中的主导地位，尽管我们自出生起就受其影响。”——这段话指出目标在我们文化中的重要性和普及性。我们从小就被教导追求目标，无论是学习、工作还是生活中的其他方面，目标成为衡量成功的主要标准。</p>\n</li>\n<li><p>目标设定的普遍性：“几乎所有值得去做的事情，都以一个又一个目标的形式呈现出来。”——这反映了社会普遍认为设定目标是实现事物的必要步骤。从小事到大事，从个人到国家层面，目标设定被视为成功的前提。</p>\n</li>\n<li><p>目标对个人和社会的影响：“目标的达成进度，将通过某种方式来衡量。”——这强调了目标在我们文化中的评估性质。我们不断设定目标，并通过各种方式衡量其进展，这种做法影响着我们的思维方式和行动。</p>\n</li>\n<li><p>目标设定的悖论：“如果目标设置得足够适度，它就会起到积极作用；反之，目标越‘高大上’，情况就越复杂。”——这表明目标设定并非总是有效，尤其是在宏大的目标面前，可能会产生反效果，因为实现它们的路径通常是未知和不确定的。</p>\n</li>\n<li><p>目标与创造力的关系：“我们希望在本书中，强调一条异于常规的、不以目标为导向的成功之路。”——这指出除了传统的目标导向方法之外，还有其他成功的途径。书中强调探索和创造性思维的重要性，提出不以目标为导向可能更有助于发现和创新。</p>\n</li>\n<li><p>目标文化的质疑：“我们难得去谈论‘目标’在自身文化体系中的主导地位，尽管我们自出生起就受其影响。”——这段话指出目标在我们文化中的重要性和普及性。我们从小就被教导追求目标，无论是学习、工作还是生活中的其他方面，目标成为衡量成功的主要标准。</p>\n</li>\n<li><p>目标对个人和社会的影响：“目标的达成进度，将通过某种方式来衡量。”——这强调了目标在我们文化中的评估性质。我们不断设定目标，并通过各种方式衡量其进展，这种做法影响着我们的思维方式和行动。</p>\n</li>\n<li><p>目标设定的悖论：“如果目标设置得足够适度，它就会起到积极作用；反之，目标越‘高大上’，情况就越复杂。”——这表明目标设定并非总是有效，尤其是在宏大的目标面前，可能会产生反效果，因为实现它们的路径通常是未知和不确定的。</p>\n</li>\n<li><p>目标与创造力的关系：“我们希望在本书中，强调一条异于常规的、不以目标为导向的成功之路。”——这指出除了传统的目标导向方法之外，还有其他成功的途径。书中强调探索和创造性思维的重要性，提出不以目标为导向可能更有助于发现和创新。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"2-无目标者的胜利\"><a href=\"#2-无目标者的胜利\" class=\"headerlink\" title=\"2. 无目标者的胜利\"></a>2. 无目标者的胜利</h1><ol>\n<li><p><strong>无目标的优势</strong>：“在你规划之际，生活已悄然前行。” ——约翰·列侬(John Lennon)。这句话暗示了生活中的很多重大成就和转变往往不是出于周密的计划和目标设定，而是在不经意间、在没有固定目标的情况下发生的。这挑战了传统上对于目标设定和规划的重视，强调了顺其自然和灵活适应的重要性。</p>\n</li>\n<li><p><strong>成功人士的非传统道路</strong>：“改变世界的神奇公式并不存在，或者说，伟大的成就并没有所谓的成功脚本，它们往往没有经过周密的计划便诞生。”这强调了伟大成就往往来自于非传统的途径，不遵循常规的路径也可能导致出乎意料的成功。</p>\n</li>\n<li><p><strong>偶然性的作用</strong>：“那些沉浸于数照片这个目标的人，完成任务的时间比那些不太专注于这个目标的人更长。” ——理查德·怀斯曼(Richard Wiseman)的实验。这个实验结果表明，过度专注于特定目标可能会忽视其他重要或有价值的信息或机会，强调了对偶然性和意外发现的开放性的重要性。</p>\n</li>\n<li><p><strong>职业道路的偶然转变</strong>：“美国畅销小说家约翰·格里森姆(John Grisham)在转行成为作家之前，学的是法律专业，还当了十年的刑事辩护律师。” 这个例子说明了人们的职业道路可能会因为偶然的事件或发现而发生重大转变，有时这些转变可能导致更大的成功和满足。</p>\n</li>\n<li><p><strong>追随激情的重要性</strong>：“如果你只能从本章中学到一个道理，那么它也许应该是：每个人都有权追随人生的激情所在，即使它们偏离了最初的计划，或与最初的目标相冲突。” 这强调了追随内心的激情和直觉比坚持刚性的目标和计划更重要，有时这种追随可能会带来更大的满足和意外的成功。</p>\n</li>\n<li><p><strong>逆境中的机会发现</strong>：“无论是德普对音乐的热爱意外地把他拉进了演艺圈，还是格里森姆在法律领域的从业经历最终激发了他的写作灵感。” ——这说明有时逆境和意外会带来意想不到的转机，成功人士往往能够在看似偶然的事情中发现新的机会并且勇于追求。</p>\n</li>\n<li><p><strong>开放性与职业探索</strong>：“互联网企业的转型成功案例。” ——许多著名的互联网公司，如YouTube和Flickr，最初的目标与最终的成功方向大相径庭。这些例子表明，在职业和企业发展中保持开放性和灵活性是非常重要的，有时偏离原定目标反而能带来更大的成功。</p>\n</li>\n<li><p><strong>非传统职业道路的成功</strong>：“任天堂最初的业务与后来的转型。” ——任天堂的成功转型显示了非传统职业道路的潜力，说明在职业选择上保持灵活和开放，对新的机会敏感可以带来意想不到的成功。</p>\n</li>\n<li><p><strong>偶然性和激情的追求</strong>：“不寻找，就是最好的寻找方式。” ——这一原则强调了对偶然性和激情的重视，说明在职业和生活中追随直觉和兴趣，而不是死板地坚持原有计划或目标，可能会带来更大的满足和成功。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"3-繁育艺术的艺术\"><a href=\"#3-繁育艺术的艺术\" class=\"headerlink\" title=\"3. 繁育艺术的艺术\"></a>3. 繁育艺术的艺术</h1><ol>\n<li><p><strong>繁育艺术的艺术</strong>：“繁育艺术的艺术：我不会追随小路的方向，而是前往无人踏足之地，留下自己的足迹。”——这句话象征着创新和探索的精神，强调了走出常规思维框架的重要性。在艺术和科学的探索中，走出已知的路径，创造独特的价值和发现，是一个核心概念。</p>\n</li>\n<li><p><strong>图片孵化器网站的创意</strong>：“图片孵化器：一次非常独特的科学实验。”——这一概念阐述了作者通过创建一个能够让用户“繁育”图片的网站，来探索艺术与科技结合的新领域。用户可以选择他们喜欢的图片，这些图片就像动物一样产生后代，从而产生新的艺术作品。</p>\n</li>\n<li><p><strong>遗传艺术的概念</strong>：“遗传艺术：理查德·道金斯在《盲眼钟表匠》中提出的概念。”——遗传艺术是一种创新的艺术形式，它模仿生物遗传的原理，将艺术品视为具有“基因”的实体，通过模拟遗传过程产生新的艺术作品。</p>\n</li>\n<li><p><strong>实验结果与目标设定的关系</strong>：“目标设定的反思：最终得到的图片，与目标图片完全不同。”——这一发现挑战了传统的目标设定观念。实验表明，当人们设定具体目标进行创作时，最终的成果往往与最初的目标不符，这揭示了创作过程中偶然性和不可预见性的重要性。</p>\n</li>\n<li><p><strong>放弃目标可能带来更好的结果</strong>：“放弃目标：不管看起来多么诱人、多么有说服力，遥远而宏伟的目标并不能指引你来到它的身边。”——这一结论表明，在创意和探索的过程中，过分专注于具体目标可能会限制创新和意外发现的可能性。有时候，放弃固定的目标，保持开放和灵活的思维，可能会带来更加出人意料和有价值的结果。</p>\n</li>\n<li><p><strong>用户在图片孵化器网站的体验</strong>：“图片孵化器网站的用户体验：在网站上‘繁育’出的图片，激起了我们的好奇心，这些图片生动且富有内涵。”——这段描述说明了用户在参与图片孵化器网站时的体验。用户可以通过选择和“繁育”图片，创造出既富有创意又具个性的艺术作品，这些作品往往超出了初始的预期和想象。</p>\n</li>\n<li><p><strong>目标与实际成果的不符合</strong>：“目标与结果的偏差：最终得到的图片，与用户原本的目标设定完全不同。”——这一点揭示了在创造性活动中，目标和结果之间常常存在的差异。用户可能最初有一个明确的目标，但在创作过程中，实际的结果往往与最初的目标不符，展现了创作过程中的不可预测性和灵活性。</p>\n</li>\n<li><p><strong>放弃特定目标的优势</strong>：“放弃特定目标：当用户对自己想要寻找的东西保持开放心态时，网站便能提供出乎意料但最令人满意的结果。”——这说明在创意和艺术的领域里，有时候放弃过于具体的目标，保持一种开放和探索的心态，可能会带来更加令人满意和创新的成果。</p>\n</li>\n<li><p><strong>图片孵化器网站的演化效应</strong>：“图片孵化器网站的演化效应：通过用户们的前后接力，图片可以完成数百代的进化。”——这描述了图片孵化器网站如何利用用户的集体努力，通过“繁育”和迭代，创造出完全新颖和独特的艺术作品。</p>\n</li>\n<li><p><strong>实验和生活中目标设定的相似性</strong>：“目标设定在实验和生活中的相似性：在生活中与实现目标有关的方方面面，似乎都反映了从图片孵化网站上分析出的原理。”——这一结论将图片孵化器网站的经验扩展到了更广泛的生活和工作领域，提示了在目标设定和实现过程中存在的普遍现象和原则。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"4-目标是错误的指南针\"><a href=\"#4-目标是错误的指南针\" class=\"headerlink\" title=\"4. 目标是错误的指南针\"></a>4. 目标是错误的指南针</h1><ol>\n<li><p>偏见和先验性谬论：偏见和先验性谬论是根深蒂固且普遍存在的，这些偏见不仅在古代世界占据至高无上的地位，而且在现代仍然对许多人有着巨大影响。这些偏见和谬论影响我们对现象和其条件的理解。</p>\n</li>\n<li><p>踏脚石概念：踏脚石是实现目标的必要步骤，但在开始探索时，我们通常不知道哪些踏脚石会通往最终目标。这种不确定性让我们的探索充满了未知和变数。</p>\n</li>\n<li><p>目标函数的局限性：目标函数是衡量目标实现进度的方法，但它们常常是不完美的。目标函数的不完美之处在于，它可能无法正确反映实际的进展，甚至可能导致误导。</p>\n</li>\n<li><p>欺骗性目标：存在欺骗性的目标会导致我们做出错误的决策。当目标函数作为指南针时，如果它们指向错误的方向，我们就可能被欺骗，永远无法抵达正确的目的地。</p>\n</li>\n<li><p>非目标伟大探索系统：非目标伟大探索系统如图片孵化器网站展示了不设定最终目标的探索方式。这种探索方法更加开放，允许探索者在未知的可能性中寻找新的踏脚石。</p>\n</li>\n<li><p>自然进化和人类创新：自然进化和人类创新都发生在没有明确终极目标的情况下。这两个过程显示了无目标探索的力量和潜力。</p>\n</li>\n<li><p>智力测试的思维实验：智力测试的思维实验表明，如果我们试图通过目标导向的方式控制进化，结果可能是不切实际的。真正的进化是通过非目标导向的探索实现的。</p>\n</li>\n<li><p>人类创新的过程：人类的创新过程也是收集踏脚石的过程。这些踏脚石可能不直接指向某个特定的目标，但它们在整体上贡献于创新和发现。</p>\n</li>\n<li><p>目标的欺骗性和非目标探索的价值：本章强调了目标的欺骗性和非目标探索的价值。通过探索不同的案例，作者指出追求“高大上”的目标可能会导致我们迷失方向，而非目标探索可能是通往伟大发现的正确路径。</p>\n</li>\n<li><p>思维实验 - 人类智能的进化：自然进化的思维实验显示，如果以提升智力为目标来引导进化，结果将是失败的。自然进化不是目标驱动的，而是通过适应性和随机变异不断探索未知的过程。这表明，即使是人类智能这样复杂的特性，也是在无目标的进化过程中偶然形成的。</p>\n</li>\n<li><p>人类创新过程：与自然进化相似，人类的创新过程也不是单一目标驱动的。创新往往是基于现有技术和知识的组合，以及对新问题的回应，而非单纯为了实现某个预设的目标。</p>\n</li>\n<li><p>目标驱动的误导：在探索和创新过程中，目标驱动可能导致误导和局限性。追求具体目标可能阻碍了对广泛可能性的探索，限制了创新的范围。</p>\n</li>\n<li><p>非目标探索的价值：非目标探索允许更广泛、更开放的探索空间，它强调探索过程本身的重要性，而不是单一的、具体的目标。这种探索方式更能适应不断变化的环境和需求，也更有可能导致意想不到的重大发现。</p>\n</li>\n<li><p>探索新机会的思考：作者提出，我们应该重新思考探索和创新的方式，转向非目标驱动的探索。这种转变可能需要挑战传统观念和习惯思维，但可能为我们打开新的可能性和机遇。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"5-有趣的和新奇的探索\"><a href=\"#5-有趣的和新奇的探索\" class=\"headerlink\" title=\"5. 有趣的和新奇的探索\"></a>5. 有趣的和新奇的探索</h1><ol>\n<li><p><strong>新年愿望的现实挑战</strong>：“新年愿望通常很难实现：超过半数的人认为自己能坚持新年愿望，但实际上只有12%的人能做到。”——这表明人们在制定目标时过于乐观，而现实中实现这些目标的难度远超预期。这反映了人们在目标设定和执行上的心理差距。</p>\n</li>\n<li><p><strong>目标与踏脚石的关系</strong>：“我们很难确定从当前位置到最终目标之间的踏脚石。”——这指出在追求长期目标的过程中，人们往往忽视了实现这些目标所需的具体步骤或中间过程。这强调了在目标追求过程中识别和利用踏脚石的重要性。</p>\n</li>\n<li><p><strong>对目标的过度关注可能导致误导</strong>：“对目标的过度关注可能将我们引入歧途。”——这个观点提示我们，盲目追求目标而忽视过程中的新发现和机遇可能导致资源的浪费和方向的错误。</p>\n</li>\n<li><p><strong>新奇性的重要性</strong>：“新奇性是推动进步的重要因素。”——这一点强调了探索未知领域和接受新奇事物的重要性，新奇性不仅为创新提供动力，也是认知发展的关键。</p>\n</li>\n<li><p><strong>偶然性发现的价值</strong>：“偶然性发现在历史上扮演了重要角色。”——这说明在科学和技术的发展过程中，许多重大的发现并非完全是预先计划和目标导向的结果，而是在探索过程中偶然发现的。</p>\n</li>\n<li><p><strong>非目标驱动的探索</strong>：“非目标驱动的探索可以产生意想不到的收获。”——这反映了在探索和研究中，没有具体目标的自由探索同样能够带来重要的发现和创新。</p>\n</li>\n<li><p><strong>物理世界约束与创新</strong>：“物理世界的约束对于新奇性搜索和创新至关重要。”——这一点揭示了在探索新奇事物时，现实世界的物理法则和条件对于引导和限制创新过程的重要性。</p>\n</li>\n<li><p><strong>通过算法测试理论的重要性</strong>：“通过构建算法来测试理论的理念，在人工智能领域已被普遍接受。”——这一观点说明了人工智能领域中，一个理论只有在被构建成计算机程序并成功运行测试后，才被广泛认可。这强调了在理论研究中，通过实践验证理论的重要性。</p>\n</li>\n<li><p><strong>新奇性搜索算法的应用</strong>：“新奇性搜索算法的灵感来源于用户在图片孵化器网站上的操作。”——这说明了在创新和科学研究中，生活中的观察和经验可以激发新的研究思路和方法。新奇性搜索算法是通过观察用户行为而得到灵感，进而用于指导机器自主探索新奇事物。</p>\n</li>\n<li><p><strong>从简单到复杂的行为变化</strong>：“新奇性搜索导致行为从简单变得复杂。”——这一观点揭示了在新奇性搜索中，行为的演变不是基于目标导向，而是从简单的尝试逐渐进展到更复杂的行为模式。这反映了在没有明确目标的探索过程中，信息和复杂性的逐步积累。</p>\n</li>\n<li><p><strong>新奇性搜索与目标驱动搜索的对比</strong>：“新奇性搜索可能比寻找一个特定的目标产生更好的结果。”——这表明在某些情况下，没有具体目标的探索方式可能比传统的目标导向方式更有效，因为它允许更广泛的探索和意外发现。</p>\n</li>\n<li><p><strong>新奇性搜索的限制与挑战</strong>：“新奇性搜索的能力维度更大，但也不是无限的。”——这一结论提示我们，尽管新奇性搜索在某些情况下非常有效，但它也有其局限性，尤其在面对极其复杂的问题时。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"6-寻宝者万岁\"><a href=\"#6-寻宝者万岁\" class=\"headerlink\" title=\"6. 寻宝者万岁\"></a>6. 寻宝者万岁</h1><ol>\n<li><p>新奇性搜索的定义和局限性：“新奇性搜索：基于本书前一章的内容，新奇性搜索带来的经验看起来是在不刻意寻找目标的时候，找到‘目标’反而更容易。”——这强调了新奇性搜索在寻找解决方案时的有效性，即在不专注于特定目标时，可能更容易发现新方法或解决方案。但同时也强调了其局限性，即它并不总能帮助我们找到所需的东西。</p>\n</li>\n<li><p>目标驱动型搜索与新奇性搜索的对比：“目标驱动型搜索：在许多简单的问题中，朝着一个遥远的目标前进并不是一个好主意，它们显然比没有特定目标的搜索更糟糕。”——这指出在简单问题上，固定目标的搜索方式可能不如新奇性搜索有效。</p>\n</li>\n<li><p>维持多样性思维的重要性：“保持多样性思维：因为一心一意地追求某个特定目标太有欺骗性，所以我们应该尽可能保留不同选择的可能性。”——这强调在追求目标时应保持开放和多元化的思维方式，避免被单一目标的潜在欺骗性所限制。</p>\n</li>\n<li><p>目标的欺骗性：“目标的欺骗性：目标越是‘高大上’，其欺骗性也就越强。”——这说明目标本身可能具有误导性，特别是那些听起来很宏伟的目标，可能会导致错误的方向或方法。</p>\n</li>\n<li><p>新奇性搜索作为寻宝工具：“新奇性搜索作为寻宝工具：在漫无目标的新奇性搜索中，你不一定能找到心中想要的宝藏，反而可能发现许多意料之外的宝藏。”——这表明在探索和发现过程中，新奇性搜索可能带来意外的收获，尽管这些收获可能不是最初的目标。</p>\n</li>\n<li><p>寻宝者的心态和方法：“寻宝者的心态：寻宝者又可以说是秉持机会主义的探险家，他们致力于寻找任何有价值的东西，而不在乎这些东西具体是什么。”——这强调了作为寻宝者，应该拥有开放和灵活的心态，专注于发现有价值的事物，而不是单一的预设目标。</p>\n</li>\n<li><p>目标导向型搜索的局限性：“目标导向型搜索的局限性：目标驱动型搜索的‘无能’程度，有时甚至到了‘不堪入目’的地步。”——这反映了在某些情况下，目标导向型搜索可能非常低效，甚至无法解决问题。</p>\n</li>\n<li><p>搜索的局限性：“搜索的局限性：虽然我们可以找出一些问题，在所有可能的答案中漫无目的地搜索，但最终却找不到解决办法。”——这指出虽然新奇性搜索有其优势，但它并不能保证总能找到解决方案，特别是在面对复杂和广泛的问题时。</p>\n</li>\n<li><p>目标的欺骗性与搜索方法的选择：“目标的欺骗性与搜索方法：目标越是‘高大上’，其欺骗性也就越强。在选择搜索方法时，我们不能只依赖目标。”——这强调了在探索和发现的过程中，目标的欺骗性可能导致我们选择错误的方法，因此在选择搜索方法时需要考虑更多因素。</p>\n</li>\n<li><p>目标导向型搜索的无效性：“目标导向型搜索的无效性：在一个简单的走迷宫测试中，目标驱动的方法远远逊色于新奇性搜索。”——这说明在某些情况下，固定目标的搜索方式可能不如新奇性搜索有效。</p>\n</li>\n<li><p>新奇性搜索的实用性：“新奇性搜索的实用性：在漫无目标的新奇性搜索中，有时可以发现意料之外的宝藏。”——这表明在没有设定具体目标的搜索中，有时可以发现意想不到的有价值的事物，强调了新奇性搜索的实用性。</p>\n</li>\n<li><p>寻宝者心态的重要性：“寻宝者心态：要想成为一名合格的寻宝者，我们就必须尽可能多地积累踏脚石，因为我们永远不知道哪块踏脚石可能通往有价值的地方。”——这强调了拥有开放和灵活的探索心态的重要性，即寻宝者不仅仅追求特定目标，而是保持对所有可能性的开放。</p>\n</li>\n<li><p>非目标型创新的意义：“非目标型创新：探索和发现本身就不应该专注于具体的目标，而是应着眼于一些更伟大的东西。”——这指出探索和发现的过程不应该被限制于特定目标，而是应该开放于更广阔的可能性。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"7-解开禁锢教育的枷锁\"><a href=\"#7-解开禁锢教育的枷锁\" class=\"headerlink\" title=\"7. 解开禁锢教育的枷锁\"></a>7. 解开禁锢教育的枷锁</h1><ol>\n<li><p>目标导向的弊端：“目标导向的问题：目标可能轻易地欺骗我们。”——这表明目标导向的方法虽普遍存在，但可能会误导我们，导致未能实现真正的进步。目标导向意味着以特定的结果为导向，而忽视了过程中的探索和创新。</p>\n</li>\n<li><p>教育中的目标导向危害：“教育中的目标导向危害：目标导向方法在教育领域中导致了应试教育和剥夺教师自主权等问题。”——指出教育领域过分依赖目标导向，如过分强调标准化考试，可能导致教育的质量降低。</p>\n</li>\n<li><p>坎贝尔定律：“坎贝尔定律：量化的社会指标越是被用于社会决策，社会腐败的压力便越大。”——这说明过度依赖量化指标会导致负面结果，因为量化目标可能扭曲原有的意图和过程。</p>\n</li>\n<li><p>不当激励的例子：“不当激励的例子：如英国政府在印度奖励杀死毒蛇的政策，最终导致毒蛇数量增加。”——这说明如果激励机制设计不当，可能会产生反效果，违背初衷。</p>\n</li>\n<li><p>教育中的非目标思维：“非目标思维在教育中的作用：探索未知、多样性发展和创造力的激发。”——强调在教育领域，非目标导向的思维方式能够促进更多创新和个性化的发展。</p>\n</li>\n<li><p>教育统一性的问题：“教育统一性的问题：强加的教育统一性可能损害学生的创造力和探索能力。”——指出统一的教育标准虽看似公平，但可能限制教师的教学自由和学生的创新能力。</p>\n</li>\n<li><p>美国教育制度的批评：“美国教育制度批评：目标导向和统一性导致的问题，反映在美国小学教育的滞后。”——通过比较芬兰和美国的教育制度，指出过分强调目标和统一性可能导致教育质量下降。</p>\n</li>\n<li><p>目标驱动与社会问题：“目标驱动型思维在社会事业中的破坏性：过度强调目标可能导致教育和其他社会事业领域的隐性破坏。”——这指出，当社会事业（如教育）过度依赖目标时，可能会忽视真正的创新和进步，导致长期的潜在问题。</p>\n</li>\n<li><p>教育领域的统一标准问题：“统一标准在教育中的限制：追求统一性可能限制创新，导致缺乏多样性的教育体系。”——这强调了教育中的统一性带来的风险，如限制教师的创造力和教学自由，从而抑制学生多样性的发展。</p>\n</li>\n<li><p>寻宝者原则在教育中的应用：“寻宝者原则：鼓励教师和学校遵循直觉和创新，而非过度依赖标准化测试和统一教育标准。”——这提倡教育领域应更多地依赖于教师的直觉和创造性思考，而不是单一的标准化指导。</p>\n</li>\n<li><p>重新定义教育评估：“重新定义教育评估：提倡同行评审和多样性探索，而非单一的标准化测试。”——这建议采用更为灵活的评估方式，如同行评审，以促进教育创新和多样性。</p>\n</li>\n<li><p>教育创新的挑战：“教育创新的挑战：尽管存在困难，但在教育领域探索非目标导向的创新方法是有价值的。”——这强调了教育领域面临的挑战，并呼吁探索新的教学方法和创新。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"8-解开禁锢创新的枷锁\"><a href=\"#8-解开禁锢创新的枷锁\" class=\"headerlink\" title=\"8. 解开禁锢创新的枷锁\"></a>8. 解开禁锢创新的枷锁</h1><ol>\n<li><p><strong>探险精神与创新的关系</strong>：“探险家的历史：勇敢的探险家们在面对未知时展现出的勇气和创新精神，扩展了人类的认知边界。”——这强调了探险精神在推动人类发展和创新中的重要性。探险家们面对未知的勇气和创新能力是人类知识扩展的关键。</p>\n</li>\n<li><p><strong>科学创新的必要性</strong>：“科学创新的重要性：科学进步极大地改变了人类的生活方式，对社会产生了深远的影响。”——这突显了科学创新在推动社会发展中的核心作用。科学技术的进步不仅改善了人们的日常生活，还推动了社会的整体进步。</p>\n</li>\n<li><p><strong>目标导向思维对创新的影响</strong>：“对目标的盲目崇拜：过分专注于特定目标可能限制了我们对创新的追求。”——这指出过分追求特定目标可能限制思维的开放性和创新能力。灵活、开放的思考方式对于创新至关重要。</p>\n</li>\n<li><p><strong>科研资金的影响</strong>：“科研资金的分配：资金分配过程中的目标导向思维可能影响科学领域的创新。”——科研资金的分配方式可能影响科学领域的创新。目标导向的资金分配可能忽视了那些看似风险较高但潜力巨大的创新研究。</p>\n</li>\n<li><p><strong>共识与创新的矛盾</strong>：“追求共识对创新的限制：过分追求共识可能阻碍创新的产生。”——在科学研究和其他领域，过分强调共识往往会抑制创新思维，因为真正创新的想法往往在一开始并不被广泛接受。</p>\n</li>\n<li><p><strong>科学投资的目标导向问题</strong>：“科学投资的目标导向问题：对科学领域的投资决策过度依赖目标导向思维，可能限制了对真正具有创新潜力的项目的支持。”——这指出科学研究资金的分配方式可能过于依赖于明确的目标和预期结果，而这种目标导向的思维可能忽视了那些初看起来不那么明确，但潜力巨大的创新研究。</p>\n</li>\n<li><p><strong>科学项目评审的共识问题</strong>：“科学项目评审中的共识问题：科学项目评审过程中的共识倾向可能导致真正创新的想法被忽视。”——在科学研究的资助评审过程中，过分依赖于专家群体的共识可能导致那些初看起来不太符合主流观点但具有创新潜力的项目被忽视。</p>\n</li>\n<li><p><strong>目标思维与科学探索的冲突</strong>：“目标思维与科学探索的冲突：目标导向的思维方式可能阻碍科学探索的真正创新。”——这强调了目标导向思维在科学探索中可能产生的负面影响，即过度注重预定目标可能限制了对更广泛、更有创造性的探索。</p>\n</li>\n<li><p><strong>非目标探索的重要性</strong>：“非目标探索的重要性：开放式、非目标导向的探索对于科学创新至关重要。”——这突出了在科学探索中保持开放性和灵活性的重要性，强调了非目标导向的探索对于促进真正的创新是必不可少的。</p>\n</li>\n<li><p><strong>政策与科研投资的关系</strong>：“政策对科研投资的影响：政府和资助机构的政策可能对科学研究的方向和创新产生重大影响。”——这指出政府政策和资助机构的决策对科研的方向和创新有着重大影响，可能导致某些领域或类型的研究受到偏重，而忽视其他可能同样重要的领域。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"9-彻底告别对目标的幻想\"><a href=\"#9-彻底告别对目标的幻想\" class=\"headerlink\" title=\"9. 彻底告别对目标的幻想\"></a>9. 彻底告别对目标的幻想</h1><ol>\n<li><p>成功与目标的非直接关系：“想要成功，反而不要以成功为目标；只需要做你喜欢和相信的事情，成功就会自然而然地到来。”——这句话强调了成功与追求目标之间不是直接关联的关系。它表明，真正的成功来自于对个人热情和信念的追求，而不是单纯的目标导向。</p>\n</li>\n<li><p>目标导向思维的限制：“目标导向的思维，会阻碍许多具有重大意义的社会事业的成功。”——这一观点指出，当人们过度强调目标时，可能会忽视过程中的创新和探索，从而限制了社会事业和个人成长的可能性。</p>\n</li>\n<li><p>非目标导向探索的价值：“通过考虑全新的、开放的、不以目标为重点的探索方法，我们在从教育领域到个性化汽车设计等一系列探索活动中，提出了全新的思路。”——这表明，在各种领域中采用非目标导向的探索方式，可以带来新的思路和创新。</p>\n</li>\n<li><p>摆脱目标的束缚：“彻底放弃目标，不意味着放任自流地生活，而是赋予生活新的意义。”——这强调了摆脱目标束缚后，人们可以更自由地探索和创新，从而给生活带来新的意义和方向。</p>\n</li>\n<li><p>目标与自我限制的关系：“高大上的目标可能更有可能成为骗人的工具，将我们的探索带进死胡同。”——这一观点指出，过于宏伟的目标反而可能限制人们的思维，阻碍真正的创新和发现。</p>\n</li>\n<li><p>寻宝者原则：“成为寻宝者，遵循趣味性和新奇性的线索，可以引导我们走向新的发现和创新。”——这一观点鼓励人们像寻宝者一样探索，跟随个人的兴趣和直觉，而非固守既定的目标。</p>\n</li>\n<li><p>目标思维的局限性：“目标驱动的思维限制了我们实现革命性成果的可能性。在探索根治疾病的方法、经久不衰的理论、令人炫目的结构等领域，我们需要跳出传统的目标思维。”——这指出，传统的目标导向思维在某些领域，尤其是需要创新和突破性成就的领域，可能会成为探索的障碍。跳出这种思维模式，可以促进新的发现和创新。</p>\n</li>\n<li><p>目标的欺骗性：“目标的欺骗性在于，它们似乎提供了对最终结果的控制，但实际上这种控制是虚幻的。”——这一观点强调，尽管目标看似提供了对结果的控制，但实际上这种控制是不实的。过于追求目标可能导致错过更多的机会和可能性。</p>\n</li>\n<li><p>寻宝者的方法论：“成为寻宝者，遵循新奇性和趣味性的线索，可以引导我们走向新的发现和创新。”——这一理念鼓励我们像寻宝者一样，遵循新奇性和趣味性的线索，而非固守既定目标，从而开辟新的发现和创新路径。</p>\n</li>\n<li><p>趣味性与新奇性的价值：“趣味性和新奇性是寻宝过程中的重要线索，它们可以引导我们探索未知，并带来新的发现。”——这强调了趣味性和新奇性在探索过程中的价值。遵循这些线索可以带来新的想法和发现。</p>\n</li>\n<li><p>目标思维的误导性：“目标思维可能误导我们，使我们错过真正的机会和创新。”——这一观点指出目标思维可能导致人们忽视真正的机会和创新路径，因为它限制了我们的思考范围和探索可能性。</p>\n</li>\n<li><p>避免目标的趋同性：“避免目标的趋同性，释放出多路出击的寻宝者。”——这提倡在探索和创新过程中避免单一目标的趋同性，鼓励多元化和多方位的探索，从而增加发现新事物的可能性。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"10-案例研究1：重新诠释自然进化\"><a href=\"#10-案例研究1：重新诠释自然进化\" class=\"headerlink\" title=\"10. 案例研究1：重新诠释自然进化\"></a>10. 案例研究1：重新诠释自然进化</h1><ol>\n<li><p>人类和细胞：“人类由五十万亿个细胞组成，每个细胞都像迷你城市一样复杂精致。这种复杂结构的形成得益于自然进化。”——这段描述强调了人类体内细胞的复杂性及其在自然进化过程中的重要性。细胞不仅是生命的基本单位，还通过协同工作维持生命活动，这一点在生物学上极为关键。</p>\n</li>\n<li><p>自然进化的广泛影响：“自然进化设计了地球上的每一种有机生物。”——这句话概述了自然进化对地球生命多样性的全面影响。从海岸红杉到射水鱼，所有生物都是经过数亿年的自然选择和变异形成的，彼此间存在着基因上的远亲关系。</p>\n</li>\n<li><p>进化与创造性：“生物进化是一种独特的、不断创新的过程，不同于物理世界中的死物。”——这个观点强调了生物进化的创造性和不可预测性，与非生物过程形成鲜明对比。生物进化能够产生复杂的生命形式，如人类大脑，这在物理世界中是无法实现的。</p>\n</li>\n<li><p>智能设计与自然进化：“智能设计运动认为复杂生命体必有创造者，但达尔文的发现表明，自然进化过程足以解释这种复杂性。”——这段话提出了智能设计与自然进化两种相反的观点，后者通过自然选择和遗传变异来解释生物多样性和复杂性的形成。</p>\n</li>\n<li><p>自我复制的机器比喻：“不完美的自我复制产生了生物多样性。”——这个比喻用来解释自然进化的过程，其中不精确的遗传复制导致了生物多样性的产生，而这些变异又受到自然选择的影响。</p>\n</li>\n<li><p>进化论的支持与质疑：“尽管有分歧，但自然选择在进化中的重要性被广泛认可。”——这句话说明了虽然生物学家对进化的具体机制有不同看法，但自然选择在进化中扮演重要角色的观点得到了广泛的支持。</p>\n</li>\n<li><p>进化的目标性质：“自然选择导致的适者生存可能被错误地理解为进化的目标。”——这个观点对进化的常见解释提出质疑，指出将进化看作有目标的过程可能是误解。进化可能不是朝着某个特定目标前进，而是一个不断的、无目的的过程。</p>\n</li>\n<li><p>生命的多样性与进化：“生命的多样性不仅仅包括细菌等简单生命形式，还涵盖了复杂多变的生物种类。进化的过程类似于收集不同的‘踏脚石’，并不是有明确目标的直线发展。”——这段描述强调了生命多样性的丰富性和进化过程的非目标性质。进化不是朝着一个特定目标前进，而是类似于收集各种不同可能性的过程。</p>\n</li>\n<li><p>进化的非目标性探索：“将生存和繁衍等同于目标是误解。进化是一个开放式的探索过程，更像是寻找新奇性和多样性的尝试，而非单纯的生存竞争。”——这个观点挑战了传统将生存和繁衍视为生物进化的终极目标的看法，强调了进化的开放性和非目标性质。</p>\n</li>\n<li><p>进化的特点：“进化类似于寻宝过程，不仅仅是积累‘踏脚石’，偶然性也扮演了重要角色。”——这部分强调了进化过程中偶然性的作用，如基因突变，并非仅仅是生物间的竞争或自然选择的结果。</p>\n</li>\n<li><p>扩展适应在进化中的作用：“扩展适应指的是生物的某些特征在新环境中被用于不同的功能，这是非目标性探索的一个关键属性。”——这部分说明了进化过程中特征和功能的转换，强调了进化不是单一目标驱动的。</p>\n</li>\n<li><p>创造性与竞争在进化中的关系：“进化的创造性是逃避竞争的产物，而非竞争本身。自然进化倾向于探索和积累新的可能性。”——这段话说明了竞争在进化过程中的角色相对于创造性的次要性，强调了进化的多样性和探索性。</p>\n</li>\n<li><p>生物多样性的增长：“形成新生态位以逃避竞争是生物多样性增长的方式，这显示了进化趋向于多元化而非趋同化。”——这部分强调了进化过程中生态位的形成和变化对于生物多样性的重要性。</p>\n</li>\n<li><p>化石记录与进化理论：“化石记录揭示了生物进化的历史，但并不直接指向某些‘高级物种’，强调了进化的非目标性和机械性。”——这部分通过化石记录来支持进化作为一个无目标、无意识过程的观点。</p>\n</li>\n</ol>\n<hr>\n<h1 id=\"11-案例研究2：目标和人工智能领域的探索\"><a href=\"#11-案例研究2：目标和人工智能领域的探索\" class=\"headerlink\" title=\"11. 案例研究2：目标和人工智能领域的探索\"></a>11. 案例研究2：目标和人工智能领域的探索</h1><ol>\n<li><p>科学的本质与进步：“科学是对知识的探索，科学不断地拓展了人类可能性的边界，使人们能够更深入地了解这个世界。”——这强调了科学作为知识探索的过程，是人类理解和影响世界的关键途径。科学不仅是一系列知识和理论的集合，而且是一个持续进步和探索的动态过程。</p>\n</li>\n<li><p>科学家的人性与科学进步：“科学家也是人，跟所有其他人一样，并非完人。”——这表明即使在科学进步的背后，仍然存在人类的局限性和主观性。科学家作为人，他们的行为、信念和相互作用对科学的发展有重要影响。</p>\n</li>\n<li><p>科学社区的多样性与学科文化：“不同的科学家群体构成了各种学科，每个学科都有专属的惯例和文化。”——这揭示了科学社区的多样性和复杂性。不同学科之间存在文化差异，这些差异影响着学科的发展和科学家的交流方式。</p>\n</li>\n<li><p>科学成果的传播与同行评审：“科学家在期刊或会议中发表自己的想法，有助于进一步验证其研究，并能将科研的想法或成果传播到更大的社区。”——这强调了科学传播的重要性，以及同行评审在维护科学质量和促进知识传播中的作用。</p>\n</li>\n<li><p>目标在科学发展中的影响：“目标是具体的，并且允许人们衡量和鼓励科学的进展。”——这指出目标在科学探索中的双重作用：一方面，它们提供了明确的方向和动力，另一方面，过分依赖具体目标可能导致短视和创新的限制。</p>\n</li>\n<li><p>人工智能领域的案例研究：“人工智能领域的研究核心是创造高度智能化的机器或程序。”——这指出了人工智能领域的主要研究目标和挑战，展示了目标导向思维在科学领域的具体应用，并暗示了它对研究方向和方法的深远影响。</p>\n</li>\n<li><p>新算法与传统算法的比较：“‘超自然’算法尽管在性能上略逊于传统的‘老靠谱’算法，但它提出了全新的研究方向。”——这指出新算法可能在性能上暂时不及传统算法，但其创新性和潜在的未来价值不应被忽视。实验派启发式方法可能会导致这种新算法被过早排除，忽视了它们可能开启的新研究路径。</p>\n</li>\n<li><p>启发式方法对科学研究的限制：“严格依赖实验结果和定理验证可能导致科学研究的视野狭隘。”——这说明过分依赖传统的科学方法，如实验结果和理论验证，可能会限制科学探索的广度和深度，忽略了那些在现有评价体系下表现不佳但具有创新潜力的想法。</p>\n</li>\n<li><p>人工智能领域的搜索策略：“在人工智能领域，不同的搜索策略如实验派和定理派方法，影响着研究的方向和进展。”——这强调了在人工智能研究中，不同的方法和策略会导致不同的研究成果和方向。方法的选择可能会推动或限制某些类型的创新。</p>\n</li>\n<li><p>研究领域的创新与发展：“探索新想法的自由和开放的科学环境对于推动研究领域的长远发展至关重要。”——这强调了为了促进科学和技术的发展，需要一个更开放和包容的研究环境，其中新想法可以自由发展，而不受现有假设和限制的束缚。</p>\n</li>\n</ol>\n"},{"title":"理想","date":"2023-04-06T12:19:44.000Z","auto_excerpt":"true","_content":"我愿意欺骗自己\n\n阳光是暖的 空气是香的\n\n烦恼是一只揉皱的纸飞机\n\n让我们把它用力 扔掉\n\n\n<br/>\n\n\n在真实之海定锚\n\n我是一只志于虚幻的独木舟\n\n海水也不会施舍半分真实的怜悯\n\n我只信 我的眼泪 比真实更真实\n\n\n<br/>\n\n\n我为眼泪而活 我的树根\n\n闭眼就能看见 金色的岛屿\n\n2019.8.28\n","source":"_posts/诗/理想.md","raw":"---\ntitle: 理想\ndate: 2023-04-06 20:19:44\ntags: \ncategories:\n  - - 诗\nauto_excerpt: \"true\"\n---\n我愿意欺骗自己\n\n阳光是暖的 空气是香的\n\n烦恼是一只揉皱的纸飞机\n\n让我们把它用力 扔掉\n\n\n<br/>\n\n\n在真实之海定锚\n\n我是一只志于虚幻的独木舟\n\n海水也不会施舍半分真实的怜悯\n\n我只信 我的眼泪 比真实更真实\n\n\n<br/>\n\n\n我为眼泪而活 我的树根\n\n闭眼就能看见 金色的岛屿\n\n2019.8.28\n","slug":"诗/理想","published":1,"updated":"2024-04-14T15:32:59.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnrd0017hk8z90rr3mx1","content":"<p>我愿意欺骗自己</p>\n<p>阳光是暖的 空气是香的</p>\n<p>烦恼是一只揉皱的纸飞机</p>\n<p>让我们把它用力 扔掉</p>\n<br/>\n\n\n<p>在真实之海定锚</p>\n<p>我是一只志于虚幻的独木舟</p>\n<p>海水也不会施舍半分真实的怜悯</p>\n<p>我只信 我的眼泪 比真实更真实</p>\n<br/>\n\n\n<p>我为眼泪而活 我的树根</p>\n<p>闭眼就能看见 金色的岛屿</p>\n<p>2019.8.28</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我愿意欺骗自己</p>\n<p>阳光是暖的 空气是香的</p>\n<p>烦恼是一只揉皱的纸飞机</p>\n<p>让我们把它用力 扔掉</p>\n<br/>\n\n\n<p>在真实之海定锚</p>\n<p>我是一只志于虚幻的独木舟</p>\n<p>海水也不会施舍半分真实的怜悯</p>\n<p>我只信 我的眼泪 比真实更真实</p>\n<br/>\n\n\n<p>我为眼泪而活 我的树根</p>\n<p>闭眼就能看见 金色的岛屿</p>\n<p>2019.8.28</p>\n"},{"title":"我这辈子见过最好的学习方法 | CLT认知负荷理论 | 汤质看本质","date":"2023-04-15T16:53:46.000Z","auto_excerpt":"true","_content":"\n  ## 前言和概述\n\n 本文是b站up主“汤质看本质”（其实我心里一直读“汤姆看本质”而且改不回来是怎么回事）视频《# 我这辈子见过最好的学习方法 | CLT认知负荷理论 | 汤质看本质》\n \n https://www.bilibili.com/video/BV1rH4y1J7EK/\n \n 的笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n评：挺不错一个视频虽然作者就是想卖课所以放出来一个饵……\n\n虽然博主的说法其实爱学习和有方法论的人基本都模模糊糊知道，不过好在是一个理论化，所以学习起来是不亏的，基于这个理论框架也能泛化出其他的方法论，不过现在有什么作用能具体对个人指导什么还不知道。\n\n另外说一点就是很烦交替实例，交替实例本身会造成大量的认知冗余以及消耗个人的学习力（学习上的耐心和精力之类的），而且你在慢慢交替实例，能够自主抓住和解决更核心问题（自己想办法用自己的方法快速完成了组块化，形成了更大的组块）的人已经超过去了，学习比拼到最后是个效率问题这一点相信有学习经验的人都会比较同意，交替实例效率太低只对宝宝👶有效。  \n\n去除冗余自不必说，大多数学习家其实都会手动去除冗余或者颅内去除冗余（毕竟看电视剧都快进的时代，信息冗余真心多，每个人都练到这个技能，学习方面问题则是毫无冗余，中文教材风格实属没几句废话纯干货），分割复杂也是常识了，学习就像搭积木。  \n总之基于降低认知负荷这个“损失函数”的方向，个人应该设计出更个性化的学习方法，而不是去除冗余，分割复杂，交替实例，三板斧，这三板斧一个造成大量认知冗余，两个废话。\n\n  ---\n\n1. 意义就是理解比记忆多出来的部分：博主说的记忆其实应该是指知识的原料，比如语料之类的，意思就是我们对知识语料进行更为复杂的加工，然后得到意义，这部分意义就是所谓的记忆比理解多出来的部分\n\n2. 博主认为面对复杂的对象我们没有办法理解它，一大原因是个人的“工作记忆”没有办法应对更为复杂的加工\n\n3. 赫伯特西蒙对知识的定义：\n\n1. 知识的使命，就是从所有的逻辑可能性总类中选出一个其经验可能性较为有限的子类，从而在描述可能性的各变量之间建立一定的功能联系。【意思就是，知识的用途（也就是所谓使命）是事物的所有的有可能的逻辑中，从经验出发，选出一个逻辑。我们通过在所有需要进行上述过程的节点上，反复上述过程（自回归？），把这些节点建立一个功能联系。这个意思大概是，知识是一种逻辑筛选器？】\n\n2. 知识的最终目的是确定过去和现在已知事实与将来的事实之间的关系，从而由当前状况产生的唯一一种可能性。【之前讨论过知识是一种逻辑筛选器，这句话是说，运用这个逻辑筛选器索要达到的目的是，找到“过去+现在”与将来之间的关系】\n\n4. 赫伯特西蒙对知识的定义可以解释工作记忆不足导致对理解的困难\n\n5. 博主解释我们为什么会“懵掉”：我们通过对知识语料进行加工得到意义，在这个加工过程中我们把所有的相关要素放进“工作记忆”中，但是工作记忆有限，有一种说法是我们只能同时处理7个左右认知上的元素，后来研究发现可能只有4个，如果元素过多或元素之间存在复杂关系，则会超过记忆容量，我们就会懵掉。\n\n6. 大脑能理解复杂记忆靠的是“长时记忆”\n\n7. 背诵一样东西，本质上是在构建长时记忆\n\n8. 做到产生理解，需要考虑到工作记忆和长时记忆之间协同：需要被处理的知识语料，与长时记忆中所记住的内容相关联时，会激活一个更大的认知元素，这个更大指的是该认知元素内具有更多的信息，与此同时所占用的工作记忆的负荷，也就是“我们只能同时处理7个左右认知上的元素”，却与小认知元素类似。\n\n9. 组块化：上述把小认知元素打包成大认知元素的过程称为组块化。博主的比方是沐字对小朋友来说是三个点加横竖撇捺，但随着上述组块化过程，三个点会被组块化成三点水，横竖撇捺打包成木字，最后这样的更大的认知元素被存储进长时记忆\n\n10. 成年人通过组块化的过程，可以极大降低认知上的负担\n\n11. 安德斯埃里克森认为刻意练习的目标是把与完成记忆有关的心理表征存储在长时记忆中，而所谓表征是指信息预先存在的模式，所谓信息预先存在的模式是指事实、图片、规则、关系等\n\n12. 构建了大量的大组块之后，在应对具体问题时，可以轻松调用大量组块降低工作记忆负担，以在具体问题中，识别出更复杂的模式和规律。\n\n    博主以象棋为例子，象棋高手和新手都只能记住随意摆放的两三个棋子的位置，但在下棋时，也就是处理具体棋局的时候，象棋高手可以记住三分之二的棋子位置，因为其通过长期训练，在长时记忆中存储了大量组块化的大元素，在处理具体棋局被调入工作记忆中进行处理，于是识别出了更多更复杂的模式和规律\n\n13. 奥苏贝尔名言：假如让我把全部教育心理学仅仅归结为一条原理的话,那么我将一言蔽之：影响学习的唯一最重要的因素，就是学习者已经知道了什么。要探明这一点，并应据此进行教学。\n\n14. 奥苏贝尔名言反映了长时记忆中的组块，是新手和高手之间的区别\n\n15. 在我们通过对知识语料进行加工得到意义的过程中，博主假设外部信息是无限的，长时记忆容量是无限的，所以整个过程中唯一的IO瓶颈是工作记忆容量\n\n16. 工作记忆容量的限制导致了理解的困难，学者们为了解决问题创造了认知负荷理论\n\n17. John Sweller名言1：**教学的主要功能就是改变长期记忆的内容。**一旦改变了,这些信息就可以转移到工作记忆中从而改变学习者在特定环境中的功能。他们可以从印刷品中获得意义，而其他人只看到表面上随机的曲线;他们可以立即轻松地解决其他人认为极其复杂的数学问题。\n\n    总的来说，原本毫无意义和难以理解的东西可以变得明显、常规和自动化……促进这个过程是认知负荷理论的主要功能。【他的意思就是说我们进行教学这个动作，其实主要就是为了改变一个人的长期记忆内容，然后拥有了长期记忆内容，就能轻松分析其他人觉得毫无意义和难以理解的事物，解决别人解决不了的问题，最后，认知负荷理论就是用来解释如何促进这个构建长期记忆过程的】\n\n18. 元素交互性：元素交互性是指学习任务中存在各个信息元素，而信息元素之间存在相互关联性。意思就是某学习任务中有很多信息的元素，而学习任务的信息元素之间存在一种关联程度的属性值\n\n19. 某学习任务的元素交互性低，例如两个毫无关联的单词，则可以互相独立地被记忆\n\n20. 某学习任务的元素交互性高，则处理信息造成的认知负荷会增加，例如复杂小说之间的人物关系甚至需要画图表示\n\n21. 一般认为元素交互性低的学习任务可以被机械记忆处理完成，元素交互性高的学习任务需要进行理解完成，但在认知负荷理论中，元素交互性高的学习任务依旧可以通过机械记忆完成，方法就是在长时记忆中构建大组快以应对高元素交互性带来的复杂性\n\n22. 认知负荷：认知负荷分为外部认知负荷和内在认知负荷\n\n23. 外部认知负荷：学习任务的信息的组织格式、学习任务时所处的环境，等外部因素（非学习任务本身的因素）导致的认知上的负荷\n\n24. 内在认知负荷：学习任务的信息本身具有复杂性，因此导致的认知上的负荷\n\n25. John Sweller名言2：学习例子和解决问题的最有效方法是先呈现一个解答示例然后立即要求学习者解决一个类似的问题。\n\n26. 三个具有代表性的优化认知负荷的方法：\n\n1. 去除冗余：去除学习任务中的多余元素交互性。比如折纸任务，能给纯图示意图就不要给图文并茂版本，多余的信息会让人降低任务完成率。一个极高的去除冗余达到零元素交互性的方案可以让学习任务完成率提高一倍之多\n\n2. 分割复杂：外部认知负荷可以通过设计，尽可能减少或者消除，而内在认知负荷只能通过分割降低，即把复杂的学习任务进行分割，分割为元素交互性弱的子任务和元素交互性高的子任务，然后先完成元素交互性弱的子任务，后完成元素交互性高的子任务\n\n   分割复杂的难点在于怎样分割。\n\n    其实就是对具体任务设计和构建一个流程，以像写作文或者小说一样，从一个简单的句子 或者大纲，扩写出作文或者长篇小说，其中的每一步都是可以轻松完成的，但直接写一篇作文或者长篇小说是难以完成的。\n\n3. 交替实例：举例子，然后练习一个高度与例子相似的问题。例如数学当中的例题学习，先学一个例题的解法，然后解一个练习题，然后不断重复上述举例子和相似问题过程\n\n27. 交替实例过程可以通过AI构建，具体而言，就是给AI一个实例，编写相似的问题。\n\n  \n\n---\n\n  \n\n最后我想说，我的记笔记方法和文字思考法其实就是一个用外部存储代替或者扩容工作记忆的方法","source":"_posts/杂集/我这辈子见过最好的学习方法  CLT认知负荷理论  汤质看本质.md","raw":"---\ntitle: 我这辈子见过最好的学习方法 | CLT认知负荷理论 | 汤质看本质\ndate: 2023-04-16 00:53:46\ntags: \ncategories:\n  - - 杂集\nauto_excerpt: \"true\"\n---\n\n  ## 前言和概述\n\n 本文是b站up主“汤质看本质”（其实我心里一直读“汤姆看本质”而且改不回来是怎么回事）视频《# 我这辈子见过最好的学习方法 | CLT认知负荷理论 | 汤质看本质》\n \n https://www.bilibili.com/video/BV1rH4y1J7EK/\n \n 的笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n评：挺不错一个视频虽然作者就是想卖课所以放出来一个饵……\n\n虽然博主的说法其实爱学习和有方法论的人基本都模模糊糊知道，不过好在是一个理论化，所以学习起来是不亏的，基于这个理论框架也能泛化出其他的方法论，不过现在有什么作用能具体对个人指导什么还不知道。\n\n另外说一点就是很烦交替实例，交替实例本身会造成大量的认知冗余以及消耗个人的学习力（学习上的耐心和精力之类的），而且你在慢慢交替实例，能够自主抓住和解决更核心问题（自己想办法用自己的方法快速完成了组块化，形成了更大的组块）的人已经超过去了，学习比拼到最后是个效率问题这一点相信有学习经验的人都会比较同意，交替实例效率太低只对宝宝👶有效。  \n\n去除冗余自不必说，大多数学习家其实都会手动去除冗余或者颅内去除冗余（毕竟看电视剧都快进的时代，信息冗余真心多，每个人都练到这个技能，学习方面问题则是毫无冗余，中文教材风格实属没几句废话纯干货），分割复杂也是常识了，学习就像搭积木。  \n总之基于降低认知负荷这个“损失函数”的方向，个人应该设计出更个性化的学习方法，而不是去除冗余，分割复杂，交替实例，三板斧，这三板斧一个造成大量认知冗余，两个废话。\n\n  ---\n\n1. 意义就是理解比记忆多出来的部分：博主说的记忆其实应该是指知识的原料，比如语料之类的，意思就是我们对知识语料进行更为复杂的加工，然后得到意义，这部分意义就是所谓的记忆比理解多出来的部分\n\n2. 博主认为面对复杂的对象我们没有办法理解它，一大原因是个人的“工作记忆”没有办法应对更为复杂的加工\n\n3. 赫伯特西蒙对知识的定义：\n\n1. 知识的使命，就是从所有的逻辑可能性总类中选出一个其经验可能性较为有限的子类，从而在描述可能性的各变量之间建立一定的功能联系。【意思就是，知识的用途（也就是所谓使命）是事物的所有的有可能的逻辑中，从经验出发，选出一个逻辑。我们通过在所有需要进行上述过程的节点上，反复上述过程（自回归？），把这些节点建立一个功能联系。这个意思大概是，知识是一种逻辑筛选器？】\n\n2. 知识的最终目的是确定过去和现在已知事实与将来的事实之间的关系，从而由当前状况产生的唯一一种可能性。【之前讨论过知识是一种逻辑筛选器，这句话是说，运用这个逻辑筛选器索要达到的目的是，找到“过去+现在”与将来之间的关系】\n\n4. 赫伯特西蒙对知识的定义可以解释工作记忆不足导致对理解的困难\n\n5. 博主解释我们为什么会“懵掉”：我们通过对知识语料进行加工得到意义，在这个加工过程中我们把所有的相关要素放进“工作记忆”中，但是工作记忆有限，有一种说法是我们只能同时处理7个左右认知上的元素，后来研究发现可能只有4个，如果元素过多或元素之间存在复杂关系，则会超过记忆容量，我们就会懵掉。\n\n6. 大脑能理解复杂记忆靠的是“长时记忆”\n\n7. 背诵一样东西，本质上是在构建长时记忆\n\n8. 做到产生理解，需要考虑到工作记忆和长时记忆之间协同：需要被处理的知识语料，与长时记忆中所记住的内容相关联时，会激活一个更大的认知元素，这个更大指的是该认知元素内具有更多的信息，与此同时所占用的工作记忆的负荷，也就是“我们只能同时处理7个左右认知上的元素”，却与小认知元素类似。\n\n9. 组块化：上述把小认知元素打包成大认知元素的过程称为组块化。博主的比方是沐字对小朋友来说是三个点加横竖撇捺，但随着上述组块化过程，三个点会被组块化成三点水，横竖撇捺打包成木字，最后这样的更大的认知元素被存储进长时记忆\n\n10. 成年人通过组块化的过程，可以极大降低认知上的负担\n\n11. 安德斯埃里克森认为刻意练习的目标是把与完成记忆有关的心理表征存储在长时记忆中，而所谓表征是指信息预先存在的模式，所谓信息预先存在的模式是指事实、图片、规则、关系等\n\n12. 构建了大量的大组块之后，在应对具体问题时，可以轻松调用大量组块降低工作记忆负担，以在具体问题中，识别出更复杂的模式和规律。\n\n    博主以象棋为例子，象棋高手和新手都只能记住随意摆放的两三个棋子的位置，但在下棋时，也就是处理具体棋局的时候，象棋高手可以记住三分之二的棋子位置，因为其通过长期训练，在长时记忆中存储了大量组块化的大元素，在处理具体棋局被调入工作记忆中进行处理，于是识别出了更多更复杂的模式和规律\n\n13. 奥苏贝尔名言：假如让我把全部教育心理学仅仅归结为一条原理的话,那么我将一言蔽之：影响学习的唯一最重要的因素，就是学习者已经知道了什么。要探明这一点，并应据此进行教学。\n\n14. 奥苏贝尔名言反映了长时记忆中的组块，是新手和高手之间的区别\n\n15. 在我们通过对知识语料进行加工得到意义的过程中，博主假设外部信息是无限的，长时记忆容量是无限的，所以整个过程中唯一的IO瓶颈是工作记忆容量\n\n16. 工作记忆容量的限制导致了理解的困难，学者们为了解决问题创造了认知负荷理论\n\n17. John Sweller名言1：**教学的主要功能就是改变长期记忆的内容。**一旦改变了,这些信息就可以转移到工作记忆中从而改变学习者在特定环境中的功能。他们可以从印刷品中获得意义，而其他人只看到表面上随机的曲线;他们可以立即轻松地解决其他人认为极其复杂的数学问题。\n\n    总的来说，原本毫无意义和难以理解的东西可以变得明显、常规和自动化……促进这个过程是认知负荷理论的主要功能。【他的意思就是说我们进行教学这个动作，其实主要就是为了改变一个人的长期记忆内容，然后拥有了长期记忆内容，就能轻松分析其他人觉得毫无意义和难以理解的事物，解决别人解决不了的问题，最后，认知负荷理论就是用来解释如何促进这个构建长期记忆过程的】\n\n18. 元素交互性：元素交互性是指学习任务中存在各个信息元素，而信息元素之间存在相互关联性。意思就是某学习任务中有很多信息的元素，而学习任务的信息元素之间存在一种关联程度的属性值\n\n19. 某学习任务的元素交互性低，例如两个毫无关联的单词，则可以互相独立地被记忆\n\n20. 某学习任务的元素交互性高，则处理信息造成的认知负荷会增加，例如复杂小说之间的人物关系甚至需要画图表示\n\n21. 一般认为元素交互性低的学习任务可以被机械记忆处理完成，元素交互性高的学习任务需要进行理解完成，但在认知负荷理论中，元素交互性高的学习任务依旧可以通过机械记忆完成，方法就是在长时记忆中构建大组快以应对高元素交互性带来的复杂性\n\n22. 认知负荷：认知负荷分为外部认知负荷和内在认知负荷\n\n23. 外部认知负荷：学习任务的信息的组织格式、学习任务时所处的环境，等外部因素（非学习任务本身的因素）导致的认知上的负荷\n\n24. 内在认知负荷：学习任务的信息本身具有复杂性，因此导致的认知上的负荷\n\n25. John Sweller名言2：学习例子和解决问题的最有效方法是先呈现一个解答示例然后立即要求学习者解决一个类似的问题。\n\n26. 三个具有代表性的优化认知负荷的方法：\n\n1. 去除冗余：去除学习任务中的多余元素交互性。比如折纸任务，能给纯图示意图就不要给图文并茂版本，多余的信息会让人降低任务完成率。一个极高的去除冗余达到零元素交互性的方案可以让学习任务完成率提高一倍之多\n\n2. 分割复杂：外部认知负荷可以通过设计，尽可能减少或者消除，而内在认知负荷只能通过分割降低，即把复杂的学习任务进行分割，分割为元素交互性弱的子任务和元素交互性高的子任务，然后先完成元素交互性弱的子任务，后完成元素交互性高的子任务\n\n   分割复杂的难点在于怎样分割。\n\n    其实就是对具体任务设计和构建一个流程，以像写作文或者小说一样，从一个简单的句子 或者大纲，扩写出作文或者长篇小说，其中的每一步都是可以轻松完成的，但直接写一篇作文或者长篇小说是难以完成的。\n\n3. 交替实例：举例子，然后练习一个高度与例子相似的问题。例如数学当中的例题学习，先学一个例题的解法，然后解一个练习题，然后不断重复上述举例子和相似问题过程\n\n27. 交替实例过程可以通过AI构建，具体而言，就是给AI一个实例，编写相似的问题。\n\n  \n\n---\n\n  \n\n最后我想说，我的记笔记方法和文字思考法其实就是一个用外部存储代替或者扩容工作记忆的方法","slug":"杂集/我这辈子见过最好的学习方法  CLT认知负荷理论  汤质看本质","published":1,"updated":"2024-04-15T18:45:52.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnre0019hk8za58b7c7g","content":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是b站up主“汤质看本质”（其实我心里一直读“汤姆看本质”而且改不回来是怎么回事）视频《# 我这辈子见过最好的学习方法 | CLT认知负荷理论 | 汤质看本质》<br> <br> <a href=\"https://www.bilibili.com/video/BV1rH4y1J7EK/\">https://www.bilibili.com/video/BV1rH4y1J7EK/</a><br> <br> 的笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>评：挺不错一个视频虽然作者就是想卖课所以放出来一个饵……</p>\n<p>虽然博主的说法其实爱学习和有方法论的人基本都模模糊糊知道，不过好在是一个理论化，所以学习起来是不亏的，基于这个理论框架也能泛化出其他的方法论，不过现在有什么作用能具体对个人指导什么还不知道。</p>\n<p>另外说一点就是很烦交替实例，交替实例本身会造成大量的认知冗余以及消耗个人的学习力（学习上的耐心和精力之类的），而且你在慢慢交替实例，能够自主抓住和解决更核心问题（自己想办法用自己的方法快速完成了组块化，形成了更大的组块）的人已经超过去了，学习比拼到最后是个效率问题这一点相信有学习经验的人都会比较同意，交替实例效率太低只对宝宝👶有效。  </p>\n<p>去除冗余自不必说，大多数学习家其实都会手动去除冗余或者颅内去除冗余（毕竟看电视剧都快进的时代，信息冗余真心多，每个人都练到这个技能，学习方面问题则是毫无冗余，中文教材风格实属没几句废话纯干货），分割复杂也是常识了，学习就像搭积木。<br>总之基于降低认知负荷这个“损失函数”的方向，个人应该设计出更个性化的学习方法，而不是去除冗余，分割复杂，交替实例，三板斧，这三板斧一个造成大量认知冗余，两个废话。</p>\n<hr>\n<ol>\n<li><p>意义就是理解比记忆多出来的部分：博主说的记忆其实应该是指知识的原料，比如语料之类的，意思就是我们对知识语料进行更为复杂的加工，然后得到意义，这部分意义就是所谓的记忆比理解多出来的部分</p>\n</li>\n<li><p>博主认为面对复杂的对象我们没有办法理解它，一大原因是个人的“工作记忆”没有办法应对更为复杂的加工</p>\n</li>\n<li><p>赫伯特西蒙对知识的定义：</p>\n</li>\n<li><p>知识的使命，就是从所有的逻辑可能性总类中选出一个其经验可能性较为有限的子类，从而在描述可能性的各变量之间建立一定的功能联系。【意思就是，知识的用途（也就是所谓使命）是事物的所有的有可能的逻辑中，从经验出发，选出一个逻辑。我们通过在所有需要进行上述过程的节点上，反复上述过程（自回归？），把这些节点建立一个功能联系。这个意思大概是，知识是一种逻辑筛选器？】</p>\n</li>\n<li><p>知识的最终目的是确定过去和现在已知事实与将来的事实之间的关系，从而由当前状况产生的唯一一种可能性。【之前讨论过知识是一种逻辑筛选器，这句话是说，运用这个逻辑筛选器索要达到的目的是，找到“过去+现在”与将来之间的关系】</p>\n</li>\n<li><p>赫伯特西蒙对知识的定义可以解释工作记忆不足导致对理解的困难</p>\n</li>\n<li><p>博主解释我们为什么会“懵掉”：我们通过对知识语料进行加工得到意义，在这个加工过程中我们把所有的相关要素放进“工作记忆”中，但是工作记忆有限，有一种说法是我们只能同时处理7个左右认知上的元素，后来研究发现可能只有4个，如果元素过多或元素之间存在复杂关系，则会超过记忆容量，我们就会懵掉。</p>\n</li>\n<li><p>大脑能理解复杂记忆靠的是“长时记忆”</p>\n</li>\n<li><p>背诵一样东西，本质上是在构建长时记忆</p>\n</li>\n<li><p>做到产生理解，需要考虑到工作记忆和长时记忆之间协同：需要被处理的知识语料，与长时记忆中所记住的内容相关联时，会激活一个更大的认知元素，这个更大指的是该认知元素内具有更多的信息，与此同时所占用的工作记忆的负荷，也就是“我们只能同时处理7个左右认知上的元素”，却与小认知元素类似。</p>\n</li>\n<li><p>组块化：上述把小认知元素打包成大认知元素的过程称为组块化。博主的比方是沐字对小朋友来说是三个点加横竖撇捺，但随着上述组块化过程，三个点会被组块化成三点水，横竖撇捺打包成木字，最后这样的更大的认知元素被存储进长时记忆</p>\n</li>\n<li><p>成年人通过组块化的过程，可以极大降低认知上的负担</p>\n</li>\n<li><p>安德斯埃里克森认为刻意练习的目标是把与完成记忆有关的心理表征存储在长时记忆中，而所谓表征是指信息预先存在的模式，所谓信息预先存在的模式是指事实、图片、规则、关系等</p>\n</li>\n<li><p>构建了大量的大组块之后，在应对具体问题时，可以轻松调用大量组块降低工作记忆负担，以在具体问题中，识别出更复杂的模式和规律。</p>\n<p>博主以象棋为例子，象棋高手和新手都只能记住随意摆放的两三个棋子的位置，但在下棋时，也就是处理具体棋局的时候，象棋高手可以记住三分之二的棋子位置，因为其通过长期训练，在长时记忆中存储了大量组块化的大元素，在处理具体棋局被调入工作记忆中进行处理，于是识别出了更多更复杂的模式和规律</p>\n</li>\n<li><p>奥苏贝尔名言：假如让我把全部教育心理学仅仅归结为一条原理的话,那么我将一言蔽之：影响学习的唯一最重要的因素，就是学习者已经知道了什么。要探明这一点，并应据此进行教学。</p>\n</li>\n<li><p>奥苏贝尔名言反映了长时记忆中的组块，是新手和高手之间的区别</p>\n</li>\n<li><p>在我们通过对知识语料进行加工得到意义的过程中，博主假设外部信息是无限的，长时记忆容量是无限的，所以整个过程中唯一的IO瓶颈是工作记忆容量</p>\n</li>\n<li><p>工作记忆容量的限制导致了理解的困难，学者们为了解决问题创造了认知负荷理论</p>\n</li>\n<li><p>John Sweller名言1：<strong>教学的主要功能就是改变长期记忆的内容。</strong>一旦改变了,这些信息就可以转移到工作记忆中从而改变学习者在特定环境中的功能。他们可以从印刷品中获得意义，而其他人只看到表面上随机的曲线;他们可以立即轻松地解决其他人认为极其复杂的数学问题。</p>\n<p>总的来说，原本毫无意义和难以理解的东西可以变得明显、常规和自动化……促进这个过程是认知负荷理论的主要功能。【他的意思就是说我们进行教学这个动作，其实主要就是为了改变一个人的长期记忆内容，然后拥有了长期记忆内容，就能轻松分析其他人觉得毫无意义和难以理解的事物，解决别人解决不了的问题，最后，认知负荷理论就是用来解释如何促进这个构建长期记忆过程的】</p>\n</li>\n<li><p>元素交互性：元素交互性是指学习任务中存在各个信息元素，而信息元素之间存在相互关联性。意思就是某学习任务中有很多信息的元素，而学习任务的信息元素之间存在一种关联程度的属性值</p>\n</li>\n<li><p>某学习任务的元素交互性低，例如两个毫无关联的单词，则可以互相独立地被记忆</p>\n</li>\n<li><p>某学习任务的元素交互性高，则处理信息造成的认知负荷会增加，例如复杂小说之间的人物关系甚至需要画图表示</p>\n</li>\n<li><p>一般认为元素交互性低的学习任务可以被机械记忆处理完成，元素交互性高的学习任务需要进行理解完成，但在认知负荷理论中，元素交互性高的学习任务依旧可以通过机械记忆完成，方法就是在长时记忆中构建大组快以应对高元素交互性带来的复杂性</p>\n</li>\n<li><p>认知负荷：认知负荷分为外部认知负荷和内在认知负荷</p>\n</li>\n<li><p>外部认知负荷：学习任务的信息的组织格式、学习任务时所处的环境，等外部因素（非学习任务本身的因素）导致的认知上的负荷</p>\n</li>\n<li><p>内在认知负荷：学习任务的信息本身具有复杂性，因此导致的认知上的负荷</p>\n</li>\n<li><p>John Sweller名言2：学习例子和解决问题的最有效方法是先呈现一个解答示例然后立即要求学习者解决一个类似的问题。</p>\n</li>\n<li><p>三个具有代表性的优化认知负荷的方法：</p>\n</li>\n<li><p>去除冗余：去除学习任务中的多余元素交互性。比如折纸任务，能给纯图示意图就不要给图文并茂版本，多余的信息会让人降低任务完成率。一个极高的去除冗余达到零元素交互性的方案可以让学习任务完成率提高一倍之多</p>\n</li>\n<li><p>分割复杂：外部认知负荷可以通过设计，尽可能减少或者消除，而内在认知负荷只能通过分割降低，即把复杂的学习任务进行分割，分割为元素交互性弱的子任务和元素交互性高的子任务，然后先完成元素交互性弱的子任务，后完成元素交互性高的子任务</p>\n<p>分割复杂的难点在于怎样分割。</p>\n<p> 其实就是对具体任务设计和构建一个流程，以像写作文或者小说一样，从一个简单的句子 或者大纲，扩写出作文或者长篇小说，其中的每一步都是可以轻松完成的，但直接写一篇作文或者长篇小说是难以完成的。</p>\n</li>\n<li><p>交替实例：举例子，然后练习一个高度与例子相似的问题。例如数学当中的例题学习，先学一个例题的解法，然后解一个练习题，然后不断重复上述举例子和相似问题过程</p>\n</li>\n<li><p>交替实例过程可以通过AI构建，具体而言，就是给AI一个实例，编写相似的问题。</p>\n</li>\n</ol>\n<hr>\n<p>最后我想说，我的记笔记方法和文字思考法其实就是一个用外部存储代替或者扩容工作记忆的方法</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是b站up主“汤质看本质”（其实我心里一直读“汤姆看本质”而且改不回来是怎么回事）视频《# 我这辈子见过最好的学习方法 | CLT认知负荷理论 | 汤质看本质》<br> <br> <a href=\"https://www.bilibili.com/video/BV1rH4y1J7EK/\">https://www.bilibili.com/video/BV1rH4y1J7EK/</a><br> <br> 的笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>评：挺不错一个视频虽然作者就是想卖课所以放出来一个饵……</p>\n<p>虽然博主的说法其实爱学习和有方法论的人基本都模模糊糊知道，不过好在是一个理论化，所以学习起来是不亏的，基于这个理论框架也能泛化出其他的方法论，不过现在有什么作用能具体对个人指导什么还不知道。</p>\n<p>另外说一点就是很烦交替实例，交替实例本身会造成大量的认知冗余以及消耗个人的学习力（学习上的耐心和精力之类的），而且你在慢慢交替实例，能够自主抓住和解决更核心问题（自己想办法用自己的方法快速完成了组块化，形成了更大的组块）的人已经超过去了，学习比拼到最后是个效率问题这一点相信有学习经验的人都会比较同意，交替实例效率太低只对宝宝👶有效。  </p>\n<p>去除冗余自不必说，大多数学习家其实都会手动去除冗余或者颅内去除冗余（毕竟看电视剧都快进的时代，信息冗余真心多，每个人都练到这个技能，学习方面问题则是毫无冗余，中文教材风格实属没几句废话纯干货），分割复杂也是常识了，学习就像搭积木。<br>总之基于降低认知负荷这个“损失函数”的方向，个人应该设计出更个性化的学习方法，而不是去除冗余，分割复杂，交替实例，三板斧，这三板斧一个造成大量认知冗余，两个废话。</p>\n<hr>\n<ol>\n<li><p>意义就是理解比记忆多出来的部分：博主说的记忆其实应该是指知识的原料，比如语料之类的，意思就是我们对知识语料进行更为复杂的加工，然后得到意义，这部分意义就是所谓的记忆比理解多出来的部分</p>\n</li>\n<li><p>博主认为面对复杂的对象我们没有办法理解它，一大原因是个人的“工作记忆”没有办法应对更为复杂的加工</p>\n</li>\n<li><p>赫伯特西蒙对知识的定义：</p>\n</li>\n<li><p>知识的使命，就是从所有的逻辑可能性总类中选出一个其经验可能性较为有限的子类，从而在描述可能性的各变量之间建立一定的功能联系。【意思就是，知识的用途（也就是所谓使命）是事物的所有的有可能的逻辑中，从经验出发，选出一个逻辑。我们通过在所有需要进行上述过程的节点上，反复上述过程（自回归？），把这些节点建立一个功能联系。这个意思大概是，知识是一种逻辑筛选器？】</p>\n</li>\n<li><p>知识的最终目的是确定过去和现在已知事实与将来的事实之间的关系，从而由当前状况产生的唯一一种可能性。【之前讨论过知识是一种逻辑筛选器，这句话是说，运用这个逻辑筛选器索要达到的目的是，找到“过去+现在”与将来之间的关系】</p>\n</li>\n<li><p>赫伯特西蒙对知识的定义可以解释工作记忆不足导致对理解的困难</p>\n</li>\n<li><p>博主解释我们为什么会“懵掉”：我们通过对知识语料进行加工得到意义，在这个加工过程中我们把所有的相关要素放进“工作记忆”中，但是工作记忆有限，有一种说法是我们只能同时处理7个左右认知上的元素，后来研究发现可能只有4个，如果元素过多或元素之间存在复杂关系，则会超过记忆容量，我们就会懵掉。</p>\n</li>\n<li><p>大脑能理解复杂记忆靠的是“长时记忆”</p>\n</li>\n<li><p>背诵一样东西，本质上是在构建长时记忆</p>\n</li>\n<li><p>做到产生理解，需要考虑到工作记忆和长时记忆之间协同：需要被处理的知识语料，与长时记忆中所记住的内容相关联时，会激活一个更大的认知元素，这个更大指的是该认知元素内具有更多的信息，与此同时所占用的工作记忆的负荷，也就是“我们只能同时处理7个左右认知上的元素”，却与小认知元素类似。</p>\n</li>\n<li><p>组块化：上述把小认知元素打包成大认知元素的过程称为组块化。博主的比方是沐字对小朋友来说是三个点加横竖撇捺，但随着上述组块化过程，三个点会被组块化成三点水，横竖撇捺打包成木字，最后这样的更大的认知元素被存储进长时记忆</p>\n</li>\n<li><p>成年人通过组块化的过程，可以极大降低认知上的负担</p>\n</li>\n<li><p>安德斯埃里克森认为刻意练习的目标是把与完成记忆有关的心理表征存储在长时记忆中，而所谓表征是指信息预先存在的模式，所谓信息预先存在的模式是指事实、图片、规则、关系等</p>\n</li>\n<li><p>构建了大量的大组块之后，在应对具体问题时，可以轻松调用大量组块降低工作记忆负担，以在具体问题中，识别出更复杂的模式和规律。</p>\n<p>博主以象棋为例子，象棋高手和新手都只能记住随意摆放的两三个棋子的位置，但在下棋时，也就是处理具体棋局的时候，象棋高手可以记住三分之二的棋子位置，因为其通过长期训练，在长时记忆中存储了大量组块化的大元素，在处理具体棋局被调入工作记忆中进行处理，于是识别出了更多更复杂的模式和规律</p>\n</li>\n<li><p>奥苏贝尔名言：假如让我把全部教育心理学仅仅归结为一条原理的话,那么我将一言蔽之：影响学习的唯一最重要的因素，就是学习者已经知道了什么。要探明这一点，并应据此进行教学。</p>\n</li>\n<li><p>奥苏贝尔名言反映了长时记忆中的组块，是新手和高手之间的区别</p>\n</li>\n<li><p>在我们通过对知识语料进行加工得到意义的过程中，博主假设外部信息是无限的，长时记忆容量是无限的，所以整个过程中唯一的IO瓶颈是工作记忆容量</p>\n</li>\n<li><p>工作记忆容量的限制导致了理解的困难，学者们为了解决问题创造了认知负荷理论</p>\n</li>\n<li><p>John Sweller名言1：<strong>教学的主要功能就是改变长期记忆的内容。</strong>一旦改变了,这些信息就可以转移到工作记忆中从而改变学习者在特定环境中的功能。他们可以从印刷品中获得意义，而其他人只看到表面上随机的曲线;他们可以立即轻松地解决其他人认为极其复杂的数学问题。</p>\n<p>总的来说，原本毫无意义和难以理解的东西可以变得明显、常规和自动化……促进这个过程是认知负荷理论的主要功能。【他的意思就是说我们进行教学这个动作，其实主要就是为了改变一个人的长期记忆内容，然后拥有了长期记忆内容，就能轻松分析其他人觉得毫无意义和难以理解的事物，解决别人解决不了的问题，最后，认知负荷理论就是用来解释如何促进这个构建长期记忆过程的】</p>\n</li>\n<li><p>元素交互性：元素交互性是指学习任务中存在各个信息元素，而信息元素之间存在相互关联性。意思就是某学习任务中有很多信息的元素，而学习任务的信息元素之间存在一种关联程度的属性值</p>\n</li>\n<li><p>某学习任务的元素交互性低，例如两个毫无关联的单词，则可以互相独立地被记忆</p>\n</li>\n<li><p>某学习任务的元素交互性高，则处理信息造成的认知负荷会增加，例如复杂小说之间的人物关系甚至需要画图表示</p>\n</li>\n<li><p>一般认为元素交互性低的学习任务可以被机械记忆处理完成，元素交互性高的学习任务需要进行理解完成，但在认知负荷理论中，元素交互性高的学习任务依旧可以通过机械记忆完成，方法就是在长时记忆中构建大组快以应对高元素交互性带来的复杂性</p>\n</li>\n<li><p>认知负荷：认知负荷分为外部认知负荷和内在认知负荷</p>\n</li>\n<li><p>外部认知负荷：学习任务的信息的组织格式、学习任务时所处的环境，等外部因素（非学习任务本身的因素）导致的认知上的负荷</p>\n</li>\n<li><p>内在认知负荷：学习任务的信息本身具有复杂性，因此导致的认知上的负荷</p>\n</li>\n<li><p>John Sweller名言2：学习例子和解决问题的最有效方法是先呈现一个解答示例然后立即要求学习者解决一个类似的问题。</p>\n</li>\n<li><p>三个具有代表性的优化认知负荷的方法：</p>\n</li>\n<li><p>去除冗余：去除学习任务中的多余元素交互性。比如折纸任务，能给纯图示意图就不要给图文并茂版本，多余的信息会让人降低任务完成率。一个极高的去除冗余达到零元素交互性的方案可以让学习任务完成率提高一倍之多</p>\n</li>\n<li><p>分割复杂：外部认知负荷可以通过设计，尽可能减少或者消除，而内在认知负荷只能通过分割降低，即把复杂的学习任务进行分割，分割为元素交互性弱的子任务和元素交互性高的子任务，然后先完成元素交互性弱的子任务，后完成元素交互性高的子任务</p>\n<p>分割复杂的难点在于怎样分割。</p>\n<p> 其实就是对具体任务设计和构建一个流程，以像写作文或者小说一样，从一个简单的句子 或者大纲，扩写出作文或者长篇小说，其中的每一步都是可以轻松完成的，但直接写一篇作文或者长篇小说是难以完成的。</p>\n</li>\n<li><p>交替实例：举例子，然后练习一个高度与例子相似的问题。例如数学当中的例题学习，先学一个例题的解法，然后解一个练习题，然后不断重复上述举例子和相似问题过程</p>\n</li>\n<li><p>交替实例过程可以通过AI构建，具体而言，就是给AI一个实例，编写相似的问题。</p>\n</li>\n</ol>\n<hr>\n<p>最后我想说，我的记笔记方法和文字思考法其实就是一个用外部存储代替或者扩容工作记忆的方法</p>\n"},{"title":"创意写作","date":"2023-04-15T19:15:46.000Z","auto_excerpt":"true","_content":"\n  ## 前言和概述\n\n 本文是《创意写作》的读书笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n书评：本文也是早期笔记了，大约五到七年前？所以很凌乱，不过我觉得值得贴出来的价值，因为创意写作其实就那么回事儿，所以重新整理了一下，幸好篇幅也不长。\n\n---\n\n\n# 创意写作\n\n## 导论\n\n1. 欣赏类阅读文本：欣赏类阅读文本指传统的纯文学\n2. 生产类创意文本：生产类创意文本指生产中用到的文本，如策划书\n3. 工具类功能文本：工具类功能文本指信息传达工具，如公文\n4. 创新的两个视野：1. 上述三种文本都要从创意的视角去重新认识；2. 把写作从市场接受的角度去认识。\n5. 自我发掘论：把创意写作视为发现，反思，开发，形成，超越自我的活动。除此之外还可站在国家，地方，种族，性别，阶级的角度去发掘，也就是不同叙事。\n6. 创意写作研究写作方面的“成规”。\n\n## 前驱\n\n1. 纽约哥谭作家工坊是一个培训机构，不是大学，没有学位，有很受欢迎的网课，特色是关于写作的心理课程，比如如何克服障碍。\n\n## 实施\n\n1. 工坊是一种写作工厂，有专属流程。\n2. 研讨会是开圆桌会讨论创意写作的某专题，很专业，比工坊学术性质强。\n3. 以上两种活动的组织者应该是writter。\n4. 过程写作法：预写，草稿，修改，校订，发表。其中，预写是通过头脑风暴来解决共同话题，创作目的，文类形式，接受对象等等创作意图问题，同时激活思路。打草稿时只要快速把想法写下来，修改时把创意口头或者书面写下来并修改，校订时要完善句法，最后发表。\n5. 创意产生方法：\n\t1. 头脑风暴。\n\t2. 思维导图。在白纸上写下一个事件的人物，环境，时间，事件等等要素，围绕主题用铅笔串起要素，设置人物关系，矛盾冲突，情节发展和转折，场景和环境等等，直到画下一个大概的故事整体框架。\n\t3. 曼陀罗思考法。九宫格的中间放上主题，再把相关的想法和联想填在其它八个空里，一般这种联想是6w。\n\t4. 逆向思考。\n\t5. 综摄法。对日常事物进行异质同化和同质异化以产生创意。还有人格，直接，想象，象征等技巧。\n\t6. 属性列举法。把问题或事物的属性或特性列出来，然后针对性提出改良或改变构想。\n\t7. 强制关联法。考虑创意的时候，边查资料边搜集一些信息，再强制性关联起信息。比如随便写十个词性不完全一样的词，再强制性关联起来扩展成一个故事。\n\t8. 希望点列举法。不断对事物提出希望，拷问怎样会更好。\n\t9. 检查单法。先写出问题的细分属性，然后写下来一个一个考虑。有点像ADT。\n\t10. 七何检讨法。5w2h，多了两个how如何和how much何价。\n6. 写作思维：对写作，思维上要去掉事物标签，要认为现世世界永远不完美要笔下构造一个新世界，建立世界的时候要把自己当造物主理解每个事物元素它自身对这个世界的看法角度。\n7. 一般所谓写作训练课程的流程：课程会命令你去感受听觉视觉嗅觉味觉触觉运动觉平衡觉空间觉时间觉纠错觉，然后开始写，然后做写作技巧专项训练。","source":"_posts/杂集/创意写作.md","raw":"---\ntitle: 创意写作\ndate: 2023-04-16 03:15:46\ntags: \ncategories:\n  - - 杂集\nauto_excerpt: \"true\"\n---\n\n  ## 前言和概述\n\n 本文是《创意写作》的读书笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n书评：本文也是早期笔记了，大约五到七年前？所以很凌乱，不过我觉得值得贴出来的价值，因为创意写作其实就那么回事儿，所以重新整理了一下，幸好篇幅也不长。\n\n---\n\n\n# 创意写作\n\n## 导论\n\n1. 欣赏类阅读文本：欣赏类阅读文本指传统的纯文学\n2. 生产类创意文本：生产类创意文本指生产中用到的文本，如策划书\n3. 工具类功能文本：工具类功能文本指信息传达工具，如公文\n4. 创新的两个视野：1. 上述三种文本都要从创意的视角去重新认识；2. 把写作从市场接受的角度去认识。\n5. 自我发掘论：把创意写作视为发现，反思，开发，形成，超越自我的活动。除此之外还可站在国家，地方，种族，性别，阶级的角度去发掘，也就是不同叙事。\n6. 创意写作研究写作方面的“成规”。\n\n## 前驱\n\n1. 纽约哥谭作家工坊是一个培训机构，不是大学，没有学位，有很受欢迎的网课，特色是关于写作的心理课程，比如如何克服障碍。\n\n## 实施\n\n1. 工坊是一种写作工厂，有专属流程。\n2. 研讨会是开圆桌会讨论创意写作的某专题，很专业，比工坊学术性质强。\n3. 以上两种活动的组织者应该是writter。\n4. 过程写作法：预写，草稿，修改，校订，发表。其中，预写是通过头脑风暴来解决共同话题，创作目的，文类形式，接受对象等等创作意图问题，同时激活思路。打草稿时只要快速把想法写下来，修改时把创意口头或者书面写下来并修改，校订时要完善句法，最后发表。\n5. 创意产生方法：\n\t1. 头脑风暴。\n\t2. 思维导图。在白纸上写下一个事件的人物，环境，时间，事件等等要素，围绕主题用铅笔串起要素，设置人物关系，矛盾冲突，情节发展和转折，场景和环境等等，直到画下一个大概的故事整体框架。\n\t3. 曼陀罗思考法。九宫格的中间放上主题，再把相关的想法和联想填在其它八个空里，一般这种联想是6w。\n\t4. 逆向思考。\n\t5. 综摄法。对日常事物进行异质同化和同质异化以产生创意。还有人格，直接，想象，象征等技巧。\n\t6. 属性列举法。把问题或事物的属性或特性列出来，然后针对性提出改良或改变构想。\n\t7. 强制关联法。考虑创意的时候，边查资料边搜集一些信息，再强制性关联起信息。比如随便写十个词性不完全一样的词，再强制性关联起来扩展成一个故事。\n\t8. 希望点列举法。不断对事物提出希望，拷问怎样会更好。\n\t9. 检查单法。先写出问题的细分属性，然后写下来一个一个考虑。有点像ADT。\n\t10. 七何检讨法。5w2h，多了两个how如何和how much何价。\n6. 写作思维：对写作，思维上要去掉事物标签，要认为现世世界永远不完美要笔下构造一个新世界，建立世界的时候要把自己当造物主理解每个事物元素它自身对这个世界的看法角度。\n7. 一般所谓写作训练课程的流程：课程会命令你去感受听觉视觉嗅觉味觉触觉运动觉平衡觉空间觉时间觉纠错觉，然后开始写，然后做写作技巧专项训练。","slug":"杂集/创意写作","published":1,"updated":"2024-04-15T19:21:45.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnre001bhk8zb01p2mbx","content":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是《创意写作》的读书笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>书评：本文也是早期笔记了，大约五到七年前？所以很凌乱，不过我觉得值得贴出来的价值，因为创意写作其实就那么回事儿，所以重新整理了一下，幸好篇幅也不长。</p>\n<hr>\n<h1 id=\"创意写作\"><a href=\"#创意写作\" class=\"headerlink\" title=\"创意写作\"></a>创意写作</h1><h2 id=\"导论\"><a href=\"#导论\" class=\"headerlink\" title=\"导论\"></a>导论</h2><ol>\n<li>欣赏类阅读文本：欣赏类阅读文本指传统的纯文学</li>\n<li>生产类创意文本：生产类创意文本指生产中用到的文本，如策划书</li>\n<li>工具类功能文本：工具类功能文本指信息传达工具，如公文</li>\n<li>创新的两个视野：1. 上述三种文本都要从创意的视角去重新认识；2. 把写作从市场接受的角度去认识。</li>\n<li>自我发掘论：把创意写作视为发现，反思，开发，形成，超越自我的活动。除此之外还可站在国家，地方，种族，性别，阶级的角度去发掘，也就是不同叙事。</li>\n<li>创意写作研究写作方面的“成规”。</li>\n</ol>\n<h2 id=\"前驱\"><a href=\"#前驱\" class=\"headerlink\" title=\"前驱\"></a>前驱</h2><ol>\n<li>纽约哥谭作家工坊是一个培训机构，不是大学，没有学位，有很受欢迎的网课，特色是关于写作的心理课程，比如如何克服障碍。</li>\n</ol>\n<h2 id=\"实施\"><a href=\"#实施\" class=\"headerlink\" title=\"实施\"></a>实施</h2><ol>\n<li>工坊是一种写作工厂，有专属流程。</li>\n<li>研讨会是开圆桌会讨论创意写作的某专题，很专业，比工坊学术性质强。</li>\n<li>以上两种活动的组织者应该是writter。</li>\n<li>过程写作法：预写，草稿，修改，校订，发表。其中，预写是通过头脑风暴来解决共同话题，创作目的，文类形式，接受对象等等创作意图问题，同时激活思路。打草稿时只要快速把想法写下来，修改时把创意口头或者书面写下来并修改，校订时要完善句法，最后发表。</li>\n<li>创意产生方法：<ol>\n<li>头脑风暴。</li>\n<li>思维导图。在白纸上写下一个事件的人物，环境，时间，事件等等要素，围绕主题用铅笔串起要素，设置人物关系，矛盾冲突，情节发展和转折，场景和环境等等，直到画下一个大概的故事整体框架。</li>\n<li>曼陀罗思考法。九宫格的中间放上主题，再把相关的想法和联想填在其它八个空里，一般这种联想是6w。</li>\n<li>逆向思考。</li>\n<li>综摄法。对日常事物进行异质同化和同质异化以产生创意。还有人格，直接，想象，象征等技巧。</li>\n<li>属性列举法。把问题或事物的属性或特性列出来，然后针对性提出改良或改变构想。</li>\n<li>强制关联法。考虑创意的时候，边查资料边搜集一些信息，再强制性关联起信息。比如随便写十个词性不完全一样的词，再强制性关联起来扩展成一个故事。</li>\n<li>希望点列举法。不断对事物提出希望，拷问怎样会更好。</li>\n<li>检查单法。先写出问题的细分属性，然后写下来一个一个考虑。有点像ADT。</li>\n<li>七何检讨法。5w2h，多了两个how如何和how much何价。</li>\n</ol>\n</li>\n<li>写作思维：对写作，思维上要去掉事物标签，要认为现世世界永远不完美要笔下构造一个新世界，建立世界的时候要把自己当造物主理解每个事物元素它自身对这个世界的看法角度。</li>\n<li>一般所谓写作训练课程的流程：课程会命令你去感受听觉视觉嗅觉味觉触觉运动觉平衡觉空间觉时间觉纠错觉，然后开始写，然后做写作技巧专项训练。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是《创意写作》的读书笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>书评：本文也是早期笔记了，大约五到七年前？所以很凌乱，不过我觉得值得贴出来的价值，因为创意写作其实就那么回事儿，所以重新整理了一下，幸好篇幅也不长。</p>\n<hr>\n<h1 id=\"创意写作\"><a href=\"#创意写作\" class=\"headerlink\" title=\"创意写作\"></a>创意写作</h1><h2 id=\"导论\"><a href=\"#导论\" class=\"headerlink\" title=\"导论\"></a>导论</h2><ol>\n<li>欣赏类阅读文本：欣赏类阅读文本指传统的纯文学</li>\n<li>生产类创意文本：生产类创意文本指生产中用到的文本，如策划书</li>\n<li>工具类功能文本：工具类功能文本指信息传达工具，如公文</li>\n<li>创新的两个视野：1. 上述三种文本都要从创意的视角去重新认识；2. 把写作从市场接受的角度去认识。</li>\n<li>自我发掘论：把创意写作视为发现，反思，开发，形成，超越自我的活动。除此之外还可站在国家，地方，种族，性别，阶级的角度去发掘，也就是不同叙事。</li>\n<li>创意写作研究写作方面的“成规”。</li>\n</ol>\n<h2 id=\"前驱\"><a href=\"#前驱\" class=\"headerlink\" title=\"前驱\"></a>前驱</h2><ol>\n<li>纽约哥谭作家工坊是一个培训机构，不是大学，没有学位，有很受欢迎的网课，特色是关于写作的心理课程，比如如何克服障碍。</li>\n</ol>\n<h2 id=\"实施\"><a href=\"#实施\" class=\"headerlink\" title=\"实施\"></a>实施</h2><ol>\n<li>工坊是一种写作工厂，有专属流程。</li>\n<li>研讨会是开圆桌会讨论创意写作的某专题，很专业，比工坊学术性质强。</li>\n<li>以上两种活动的组织者应该是writter。</li>\n<li>过程写作法：预写，草稿，修改，校订，发表。其中，预写是通过头脑风暴来解决共同话题，创作目的，文类形式，接受对象等等创作意图问题，同时激活思路。打草稿时只要快速把想法写下来，修改时把创意口头或者书面写下来并修改，校订时要完善句法，最后发表。</li>\n<li>创意产生方法：<ol>\n<li>头脑风暴。</li>\n<li>思维导图。在白纸上写下一个事件的人物，环境，时间，事件等等要素，围绕主题用铅笔串起要素，设置人物关系，矛盾冲突，情节发展和转折，场景和环境等等，直到画下一个大概的故事整体框架。</li>\n<li>曼陀罗思考法。九宫格的中间放上主题，再把相关的想法和联想填在其它八个空里，一般这种联想是6w。</li>\n<li>逆向思考。</li>\n<li>综摄法。对日常事物进行异质同化和同质异化以产生创意。还有人格，直接，想象，象征等技巧。</li>\n<li>属性列举法。把问题或事物的属性或特性列出来，然后针对性提出改良或改变构想。</li>\n<li>强制关联法。考虑创意的时候，边查资料边搜集一些信息，再强制性关联起信息。比如随便写十个词性不完全一样的词，再强制性关联起来扩展成一个故事。</li>\n<li>希望点列举法。不断对事物提出希望，拷问怎样会更好。</li>\n<li>检查单法。先写出问题的细分属性，然后写下来一个一个考虑。有点像ADT。</li>\n<li>七何检讨法。5w2h，多了两个how如何和how much何价。</li>\n</ol>\n</li>\n<li>写作思维：对写作，思维上要去掉事物标签，要认为现世世界永远不完美要笔下构造一个新世界，建立世界的时候要把自己当造物主理解每个事物元素它自身对这个世界的看法角度。</li>\n<li>一般所谓写作训练课程的流程：课程会命令你去感受听觉视觉嗅觉味觉触觉运动觉平衡觉空间觉时间觉纠错觉，然后开始写，然后做写作技巧专项训练。</li>\n</ol>\n"},{"title":"特价机票研究","date":"2023-04-15T19:16:46.000Z","auto_excerpt":"true","_content":"\n  ## 前言和概述\n\n 本文是关于特价机票的研究笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n评：\n\nQ：我们为什么要去费劲专门研究特价机票？\n\nA：这是穷游的一种方式，而穷游是生活方式，你不能质疑生活，所以从数学上证明你不能质疑特价机票，因此更不能质疑对特价机票的研究，证毕。\n\nQ：研究特价机票有用吗？\n\nA：大学期间，我已经把国内景点看得差不多了，尤其是非常便宜的北京机票一战至今令人回味无穷……\n\n---\n\n\n**普通便宜的机票**\n\n<u>规律原理：</u>\n\n1. 3和9月航班换季，调整冷热地区的航班数量，因此会大促\n\n2. 假日的头尾两天、周末，是涨价的\n\n3. 国内大城市比小城市价格便宜航线丰富，国际香港澳门这类出境城市会相对便宜\n\n4. 中转有可能会比直飞便宜一半\n\n<u>廉价原则：</u>\n\n1. 根据原理，错峰出行\n\n2. 国内提前5-8天买，国际提前1-2月买最便宜\n\n3. 从重庆、西安、兰州、伤害、广州飞或中转都有可能较便宜\n\n4. 飞猪和去哪儿对比机票价格即可，携程一般都较贵【服务费高的原因】\n\n***\n\n**航司活动特价票**\n\n<u>规律原理：</u>\n\n1. 国内主要廉航规律\n\n1. 西部航空：主营西南和西北航线，譬如川渝新疆西藏，出发点重庆为主\n\n2. 春秋航空：中东部航线，如河南河北，日本，出发点上海为主\n\n3. 九元航空：航线较少，广州出发为主\n\n4. 虎航、捷星、亚航、香港快运：主营东南亚，出发点香港为主\n\n1. 航司会有会员日，会放出一大波在订票APP上无法查询的特价机票，不难抢但日期都在1-6个月之后，注册会员是免费的\n\n1. 南航每月28日\n\n2. 国行每月复数日\n\n3. 东航每月18日\n\n4. 海航每月8日\n\n5. 深圳航空每月12日\n\n6. 厦门航空每月9日\n\n7. 四川航空每月19日\n\n8. 吉祥航空每月25日\n\n2. 航司里程和信用卡积累可以换机票，其中航司里程方面，要注意机票所积累的里程并不简单是距离数字\n\n<u>廉价原则：</u>\n\n1. 直接去廉航的航空公司官网看看特价机票","source":"_posts/杂集/特价机票研究.md","raw":"---\ntitle: 特价机票研究\ndate: 2023-04-16 03:16:46\ntags: \ncategories:\n  - - 杂集\nauto_excerpt: \"true\"\n---\n\n  ## 前言和概述\n\n 本文是关于特价机票的研究笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n评：\n\nQ：我们为什么要去费劲专门研究特价机票？\n\nA：这是穷游的一种方式，而穷游是生活方式，你不能质疑生活，所以从数学上证明你不能质疑特价机票，因此更不能质疑对特价机票的研究，证毕。\n\nQ：研究特价机票有用吗？\n\nA：大学期间，我已经把国内景点看得差不多了，尤其是非常便宜的北京机票一战至今令人回味无穷……\n\n---\n\n\n**普通便宜的机票**\n\n<u>规律原理：</u>\n\n1. 3和9月航班换季，调整冷热地区的航班数量，因此会大促\n\n2. 假日的头尾两天、周末，是涨价的\n\n3. 国内大城市比小城市价格便宜航线丰富，国际香港澳门这类出境城市会相对便宜\n\n4. 中转有可能会比直飞便宜一半\n\n<u>廉价原则：</u>\n\n1. 根据原理，错峰出行\n\n2. 国内提前5-8天买，国际提前1-2月买最便宜\n\n3. 从重庆、西安、兰州、伤害、广州飞或中转都有可能较便宜\n\n4. 飞猪和去哪儿对比机票价格即可，携程一般都较贵【服务费高的原因】\n\n***\n\n**航司活动特价票**\n\n<u>规律原理：</u>\n\n1. 国内主要廉航规律\n\n1. 西部航空：主营西南和西北航线，譬如川渝新疆西藏，出发点重庆为主\n\n2. 春秋航空：中东部航线，如河南河北，日本，出发点上海为主\n\n3. 九元航空：航线较少，广州出发为主\n\n4. 虎航、捷星、亚航、香港快运：主营东南亚，出发点香港为主\n\n1. 航司会有会员日，会放出一大波在订票APP上无法查询的特价机票，不难抢但日期都在1-6个月之后，注册会员是免费的\n\n1. 南航每月28日\n\n2. 国行每月复数日\n\n3. 东航每月18日\n\n4. 海航每月8日\n\n5. 深圳航空每月12日\n\n6. 厦门航空每月9日\n\n7. 四川航空每月19日\n\n8. 吉祥航空每月25日\n\n2. 航司里程和信用卡积累可以换机票，其中航司里程方面，要注意机票所积累的里程并不简单是距离数字\n\n<u>廉价原则：</u>\n\n1. 直接去廉航的航空公司官网看看特价机票","slug":"杂集/特价机票研究","published":1,"updated":"2024-04-15T19:55:13.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnre001ehk8z64ijgsfe","content":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是关于特价机票的研究笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>评：</p>\n<p>Q：我们为什么要去费劲专门研究特价机票？</p>\n<p>A：这是穷游的一种方式，而穷游是生活方式，你不能质疑生活，所以从数学上证明你不能质疑特价机票，因此更不能质疑对特价机票的研究，证毕。</p>\n<p>Q：研究特价机票有用吗？</p>\n<p>A：大学期间，我已经把国内景点看得差不多了，尤其是非常便宜的北京机票一战至今令人回味无穷……</p>\n<hr>\n<p><strong>普通便宜的机票</strong></p>\n<p><u>规律原理：</u></p>\n<ol>\n<li><p>3和9月航班换季，调整冷热地区的航班数量，因此会大促</p>\n</li>\n<li><p>假日的头尾两天、周末，是涨价的</p>\n</li>\n<li><p>国内大城市比小城市价格便宜航线丰富，国际香港澳门这类出境城市会相对便宜</p>\n</li>\n<li><p>中转有可能会比直飞便宜一半</p>\n</li>\n</ol>\n<p><u>廉价原则：</u></p>\n<ol>\n<li><p>根据原理，错峰出行</p>\n</li>\n<li><p>国内提前5-8天买，国际提前1-2月买最便宜</p>\n</li>\n<li><p>从重庆、西安、兰州、伤害、广州飞或中转都有可能较便宜</p>\n</li>\n<li><p>飞猪和去哪儿对比机票价格即可，携程一般都较贵【服务费高的原因】</p>\n</li>\n</ol>\n<hr>\n<p><strong>航司活动特价票</strong></p>\n<p><u>规律原理：</u></p>\n<ol>\n<li><p>国内主要廉航规律</p>\n</li>\n<li><p>西部航空：主营西南和西北航线，譬如川渝新疆西藏，出发点重庆为主</p>\n</li>\n<li><p>春秋航空：中东部航线，如河南河北，日本，出发点上海为主</p>\n</li>\n<li><p>九元航空：航线较少，广州出发为主</p>\n</li>\n<li><p>虎航、捷星、亚航、香港快运：主营东南亚，出发点香港为主</p>\n</li>\n<li><p>航司会有会员日，会放出一大波在订票APP上无法查询的特价机票，不难抢但日期都在1-6个月之后，注册会员是免费的</p>\n</li>\n<li><p>南航每月28日</p>\n</li>\n<li><p>国行每月复数日</p>\n</li>\n<li><p>东航每月18日</p>\n</li>\n<li><p>海航每月8日</p>\n</li>\n<li><p>深圳航空每月12日</p>\n</li>\n<li><p>厦门航空每月9日</p>\n</li>\n<li><p>四川航空每月19日</p>\n</li>\n<li><p>吉祥航空每月25日</p>\n</li>\n<li><p>航司里程和信用卡积累可以换机票，其中航司里程方面，要注意机票所积累的里程并不简单是距离数字</p>\n</li>\n</ol>\n<p><u>廉价原则：</u></p>\n<ol>\n<li>直接去廉航的航空公司官网看看特价机票</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是关于特价机票的研究笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>评：</p>\n<p>Q：我们为什么要去费劲专门研究特价机票？</p>\n<p>A：这是穷游的一种方式，而穷游是生活方式，你不能质疑生活，所以从数学上证明你不能质疑特价机票，因此更不能质疑对特价机票的研究，证毕。</p>\n<p>Q：研究特价机票有用吗？</p>\n<p>A：大学期间，我已经把国内景点看得差不多了，尤其是非常便宜的北京机票一战至今令人回味无穷……</p>\n<hr>\n<p><strong>普通便宜的机票</strong></p>\n<p><u>规律原理：</u></p>\n<ol>\n<li><p>3和9月航班换季，调整冷热地区的航班数量，因此会大促</p>\n</li>\n<li><p>假日的头尾两天、周末，是涨价的</p>\n</li>\n<li><p>国内大城市比小城市价格便宜航线丰富，国际香港澳门这类出境城市会相对便宜</p>\n</li>\n<li><p>中转有可能会比直飞便宜一半</p>\n</li>\n</ol>\n<p><u>廉价原则：</u></p>\n<ol>\n<li><p>根据原理，错峰出行</p>\n</li>\n<li><p>国内提前5-8天买，国际提前1-2月买最便宜</p>\n</li>\n<li><p>从重庆、西安、兰州、伤害、广州飞或中转都有可能较便宜</p>\n</li>\n<li><p>飞猪和去哪儿对比机票价格即可，携程一般都较贵【服务费高的原因】</p>\n</li>\n</ol>\n<hr>\n<p><strong>航司活动特价票</strong></p>\n<p><u>规律原理：</u></p>\n<ol>\n<li><p>国内主要廉航规律</p>\n</li>\n<li><p>西部航空：主营西南和西北航线，譬如川渝新疆西藏，出发点重庆为主</p>\n</li>\n<li><p>春秋航空：中东部航线，如河南河北，日本，出发点上海为主</p>\n</li>\n<li><p>九元航空：航线较少，广州出发为主</p>\n</li>\n<li><p>虎航、捷星、亚航、香港快运：主营东南亚，出发点香港为主</p>\n</li>\n<li><p>航司会有会员日，会放出一大波在订票APP上无法查询的特价机票，不难抢但日期都在1-6个月之后，注册会员是免费的</p>\n</li>\n<li><p>南航每月28日</p>\n</li>\n<li><p>国行每月复数日</p>\n</li>\n<li><p>东航每月18日</p>\n</li>\n<li><p>海航每月8日</p>\n</li>\n<li><p>深圳航空每月12日</p>\n</li>\n<li><p>厦门航空每月9日</p>\n</li>\n<li><p>四川航空每月19日</p>\n</li>\n<li><p>吉祥航空每月25日</p>\n</li>\n<li><p>航司里程和信用卡积累可以换机票，其中航司里程方面，要注意机票所积累的里程并不简单是距离数字</p>\n</li>\n</ol>\n<p><u>廉价原则：</u></p>\n<ol>\n<li>直接去廉航的航空公司官网看看特价机票</li>\n</ol>\n"},{"title":"观赏植物学","date":"2023-04-15T19:15:46.000Z","auto_excerpt":"true","_content":"\n  ## 前言和概述\n\n 本文是选修课观赏植物学的课堂笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n评：本文是可爱的蒋春苗老师的观赏植物学选修课的课堂笔记，我可能是学习得最认真的一个，可是我都没有选这门课，所以老师也不会知道我是谁，不过这重要吗？这不重要吗？这重要吗？大抵是不重要的。毕竟我有脑子里的知识不对吗？还有这份笔记可以回味，而且我还不用期末测验，把一件真正的“美”事用考试弄成“苦”事。\n\n作为课堂笔记，结构比较凌乱，概括总结大概其中内容，分为两种，首先列举了你如果想学习观赏植物学的话必须认识的植物还有其美在哪，以及一些观赏植物学小知识，这两类知识也是老师的课的主要内容（除去大量的小电影和纪录片^-^）\n\n---\n\n\n**绪论**\n\n1. 中国特有的观赏植物：\n\t1. 雀云草：这是地被植物，藤蔓，蓝绿色光芒 \n\t2. 鹅掌楸：又中国郁金香，恐龙同时代植物，北美鹅掌楸和中国鹅掌楸是两回事，叶片马褂状，秋天叶片变黄像变黄马卦，花朵黄绿色 花瓣厚实 濒危，因为中国人拿来做家具，花朵开放异花授粉，柱头可以独自发育但是难成活，现在靠扦插\n2. 雪松 防尘减噪 雪松油可追溯到圣经时代，埃及艳后也用过，能杀菌 走过路过能闻到松子味道\n3. 麻栗坡兜兰 高观赏价值，三十多个品种，麻栗坡兜兰为佳，特点超长寿命，静止和运动，植物间有竞争和合作，色彩众多\n5. 观赏植物的分类：观赏植物首先按木本和草本分类，然后按观赏器官具体分类\n6. 观赏植物是观赏什么：形色香声韵\n7. 花的色彩会对人有生理和心理影响\n8. 植物的绿色至少可分三十种\n9. 植物的枝干也有不同色彩可以欣赏\n10. 观赏植物的作用：观赏植物有杀菌，保持水土，制造氧气，吸收有毒气体，降低温度等等作用，观赏植物的种植不仅考虑美，还会考虑上述实际作用\n11. 观赏植物还有各种旅游方面的价值，科普启迪方面的价值\n12. 板根现象：板根现象出现在热带雨林，经常下雨土壤浅薄导致根部不能深入而横向生长许多继生根\n13. 中国由于跨热带亚热带温带幅员辽阔，世界植物最丰富的国家之一，观赏植物种类世界之最\n14. 含羞草是因为躲避亚热带雨林大雨，细胞表面有受体感受压力，细胞核收到信息调动dna表达运动蛋白质完成动作，对含羞草来说很痛苦\n15. 捕蝇草夹子里的腺体分泌蛋白粘液，感应到有动物就夹起来捕获动物，然后分泌消化液\n16. 藤蔓攀爬属于主动运动\n17. 水稻杆子有感应器，水太高了就基因表达几分钟内长高几厘米，永远比水面高\n18. 植物是有感情的，天天夸的会长得好，不理不睬的就默默快速开花结果结束生命\n19. 苦苣属本身不成长，别人的生长因子到位才能刺激它生长\n20. 植物知道旁边有同类或者异类\n21. 没有自然黑色花，但是有人工培育的\n22. 嘴唇花其实是苞叶\n23. 芭蕉叶是听声音欣赏的\n24. 一品红的红色也是变态叶，除此之外还有一品白一品黄一品粉同理\n25. 薰衣草可提取精油，普罗旺斯薰衣草最有名，新疆伊犁也有薰衣草田\n26. 薰衣草最普遍的颜色是蓝色，另外还有白色品种\n27. 羽衣甘蓝的营养比甘蓝高\n28. 银杏是国树，因为中国独有，外形美丽，极度抗病，药用价值\n29. 银杏种雄树，防止结果实\n30. 钓鱼台银杏林大道，广西桂林海洋乡中国银杏第一乡，银杏百万株1.7万过百年，云南腾冲银杏村，浙江长兴十里古银杏长廊，西安罗汉洞村观音禅寺千年银杏树\n31. 紫叶小聂和红花继木很难区别，前者叶片菱状卵形两面无毛，后者叶片卵形两面长粗毛，然后开花的时候前者黄色后者粉色\n32. 佛肚竹可以做乐器\n33. 紫竹很像甘蔗\n34. 红瑞木秋天落叶之后红色的茎杆配北方白雪很好看\n35. 文竹的叶子已经退化成鳞片，貌似的叶子只是枝干的重叠\n36. 珙桐也是中国专有，又中国鸽子树因为变态叶像鸽子\n37. 鹤望兰又天堂鸟\n38. 荷包牡丹长得像荷包\n39. 米老鼠花长得像米老鼠，眼睛是果实成熟掉下来之后产生的黑残根\n40. 猴面小龙兰长得像猴子\n41. 旅人蕉叶片有大量水分\n42. 王莲叶脉里有大量空气，承重40到70公斤，德国科学家从亚马逊带过来的，所以在中国种需要大棚以过冬，英国女王给它了一个和自己同名的属名，花开三天第一天白色，第二天白色，第三天粉紫色，然后闭拢沉水底\n43. 酒椰的叶片世界最大，可以二十多米\n44. 五指茄又两面针\n45. 接骨木在西方和巫术有关\n46. 火龙果花像昙花，火龙果的一种蛋白质可以和重金属结合，所以可以排毒\n47. 云南大树杜鹃20米高粗4米，世界杜鹃之王\n48. 北京北海公园白皮松。\n49. 六大器官植物体：营养器官根茎叶，生殖器官花果种，它们的类型和作用各不同\n50. 1665年列文虎克发现细胞，施莱登和施旺细胞学说【一切生物都是由细胞组成的】\n\n***\n\n**观赏茎**\n\n1. 茎的作用：疏导，支持，储藏【根状茎莲藕，块茎马铃薯，球茎，鳞茎】，繁殖，光合作用\n2. 叶子会退化变态成各种奇怪的形态。\n\n***\n\n**观赏叶**\n\n1. 秋海棠\n2. 肾形草，上帝打翻了调色盘，颜色是环境温度调整的，红黄橙绿紫色五种，一般作为地被植物造景，可以吸灰尘，富集土壤重金属\n3. 叶子有光合作用，蒸腾作用，气体交换，吸收分泌，繁殖，储藏这些作用\n4. 叶片叶柄和托叶，三个都有的是完全叶，少了部分的是不完全叶\n5. 一个叶柄多个叶子叫，复叶，反之叫单叶\n6. 复叶也分为羽状，掌状，单身复叶，三出叶\n7. 单身复叶是三出叶的变形\n8. 叶基是叶子的基部\n9. 叶缘是叶子的边缘\n10. 叶脉分平行脉，网状脉，三出脉，叉状脉\n11. 叶有六类变态，苞片和总苞\n\n***\n\n**观赏花**\n\n1. 自然界最多的是白色花\n2. 繁殖有营养繁殖，有性繁殖，无性繁殖三种方式\n3. 营养繁殖是用茎，根，扦插之类的方法\n4. 无性繁殖是孢子脱离母体发育成独立的个体，藻类菌类地衣苔藓蕨类常见\n5. 花柄就是花梗，花连接枝干的部分，支持和营养作用\n6. 花托是花柄末端的加粗加大部分\n7. 草莓吃的是花托\n8. 花被保护雌蕊和雄蕊\n9. 花冠由花瓣组成\n2. 梅花桃花杏花梨花李花樱花海棠\n3. 刚开花的杏花是带粉色，快败了才变白\n4. 杏花独特之处是花萼向后翘，开花的时候没有叶\n5. 桃花粉白色，花和叶一起开，叶子像燕子尾巴，花药也就是花蕊的顶端是绯红色的\n6. 梨花惨白惨白白到极致，花药要么是红色要么是紫色要么是紫红色不同的颜色，和花药发育时间先后有关\n7. 李花小，成簇开，附满整个枝像烤串，花瓣白色但花蕊浅黄色\n8. 海棠有苹果属和木瓜属两种\n9. 樱花花瓣尖端有个小缺口\n10. 梅花和腊梅是两回事","source":"_posts/杂集/观赏植物学.md","raw":"---\ntitle: 观赏植物学\ndate: 2023-04-16 03:15:46\ntags: \ncategories:\n  - - 杂集\nauto_excerpt: \"true\"\n---\n\n  ## 前言和概述\n\n 本文是选修课观赏植物学的课堂笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n评：本文是可爱的蒋春苗老师的观赏植物学选修课的课堂笔记，我可能是学习得最认真的一个，可是我都没有选这门课，所以老师也不会知道我是谁，不过这重要吗？这不重要吗？这重要吗？大抵是不重要的。毕竟我有脑子里的知识不对吗？还有这份笔记可以回味，而且我还不用期末测验，把一件真正的“美”事用考试弄成“苦”事。\n\n作为课堂笔记，结构比较凌乱，概括总结大概其中内容，分为两种，首先列举了你如果想学习观赏植物学的话必须认识的植物还有其美在哪，以及一些观赏植物学小知识，这两类知识也是老师的课的主要内容（除去大量的小电影和纪录片^-^）\n\n---\n\n\n**绪论**\n\n1. 中国特有的观赏植物：\n\t1. 雀云草：这是地被植物，藤蔓，蓝绿色光芒 \n\t2. 鹅掌楸：又中国郁金香，恐龙同时代植物，北美鹅掌楸和中国鹅掌楸是两回事，叶片马褂状，秋天叶片变黄像变黄马卦，花朵黄绿色 花瓣厚实 濒危，因为中国人拿来做家具，花朵开放异花授粉，柱头可以独自发育但是难成活，现在靠扦插\n2. 雪松 防尘减噪 雪松油可追溯到圣经时代，埃及艳后也用过，能杀菌 走过路过能闻到松子味道\n3. 麻栗坡兜兰 高观赏价值，三十多个品种，麻栗坡兜兰为佳，特点超长寿命，静止和运动，植物间有竞争和合作，色彩众多\n5. 观赏植物的分类：观赏植物首先按木本和草本分类，然后按观赏器官具体分类\n6. 观赏植物是观赏什么：形色香声韵\n7. 花的色彩会对人有生理和心理影响\n8. 植物的绿色至少可分三十种\n9. 植物的枝干也有不同色彩可以欣赏\n10. 观赏植物的作用：观赏植物有杀菌，保持水土，制造氧气，吸收有毒气体，降低温度等等作用，观赏植物的种植不仅考虑美，还会考虑上述实际作用\n11. 观赏植物还有各种旅游方面的价值，科普启迪方面的价值\n12. 板根现象：板根现象出现在热带雨林，经常下雨土壤浅薄导致根部不能深入而横向生长许多继生根\n13. 中国由于跨热带亚热带温带幅员辽阔，世界植物最丰富的国家之一，观赏植物种类世界之最\n14. 含羞草是因为躲避亚热带雨林大雨，细胞表面有受体感受压力，细胞核收到信息调动dna表达运动蛋白质完成动作，对含羞草来说很痛苦\n15. 捕蝇草夹子里的腺体分泌蛋白粘液，感应到有动物就夹起来捕获动物，然后分泌消化液\n16. 藤蔓攀爬属于主动运动\n17. 水稻杆子有感应器，水太高了就基因表达几分钟内长高几厘米，永远比水面高\n18. 植物是有感情的，天天夸的会长得好，不理不睬的就默默快速开花结果结束生命\n19. 苦苣属本身不成长，别人的生长因子到位才能刺激它生长\n20. 植物知道旁边有同类或者异类\n21. 没有自然黑色花，但是有人工培育的\n22. 嘴唇花其实是苞叶\n23. 芭蕉叶是听声音欣赏的\n24. 一品红的红色也是变态叶，除此之外还有一品白一品黄一品粉同理\n25. 薰衣草可提取精油，普罗旺斯薰衣草最有名，新疆伊犁也有薰衣草田\n26. 薰衣草最普遍的颜色是蓝色，另外还有白色品种\n27. 羽衣甘蓝的营养比甘蓝高\n28. 银杏是国树，因为中国独有，外形美丽，极度抗病，药用价值\n29. 银杏种雄树，防止结果实\n30. 钓鱼台银杏林大道，广西桂林海洋乡中国银杏第一乡，银杏百万株1.7万过百年，云南腾冲银杏村，浙江长兴十里古银杏长廊，西安罗汉洞村观音禅寺千年银杏树\n31. 紫叶小聂和红花继木很难区别，前者叶片菱状卵形两面无毛，后者叶片卵形两面长粗毛，然后开花的时候前者黄色后者粉色\n32. 佛肚竹可以做乐器\n33. 紫竹很像甘蔗\n34. 红瑞木秋天落叶之后红色的茎杆配北方白雪很好看\n35. 文竹的叶子已经退化成鳞片，貌似的叶子只是枝干的重叠\n36. 珙桐也是中国专有，又中国鸽子树因为变态叶像鸽子\n37. 鹤望兰又天堂鸟\n38. 荷包牡丹长得像荷包\n39. 米老鼠花长得像米老鼠，眼睛是果实成熟掉下来之后产生的黑残根\n40. 猴面小龙兰长得像猴子\n41. 旅人蕉叶片有大量水分\n42. 王莲叶脉里有大量空气，承重40到70公斤，德国科学家从亚马逊带过来的，所以在中国种需要大棚以过冬，英国女王给它了一个和自己同名的属名，花开三天第一天白色，第二天白色，第三天粉紫色，然后闭拢沉水底\n43. 酒椰的叶片世界最大，可以二十多米\n44. 五指茄又两面针\n45. 接骨木在西方和巫术有关\n46. 火龙果花像昙花，火龙果的一种蛋白质可以和重金属结合，所以可以排毒\n47. 云南大树杜鹃20米高粗4米，世界杜鹃之王\n48. 北京北海公园白皮松。\n49. 六大器官植物体：营养器官根茎叶，生殖器官花果种，它们的类型和作用各不同\n50. 1665年列文虎克发现细胞，施莱登和施旺细胞学说【一切生物都是由细胞组成的】\n\n***\n\n**观赏茎**\n\n1. 茎的作用：疏导，支持，储藏【根状茎莲藕，块茎马铃薯，球茎，鳞茎】，繁殖，光合作用\n2. 叶子会退化变态成各种奇怪的形态。\n\n***\n\n**观赏叶**\n\n1. 秋海棠\n2. 肾形草，上帝打翻了调色盘，颜色是环境温度调整的，红黄橙绿紫色五种，一般作为地被植物造景，可以吸灰尘，富集土壤重金属\n3. 叶子有光合作用，蒸腾作用，气体交换，吸收分泌，繁殖，储藏这些作用\n4. 叶片叶柄和托叶，三个都有的是完全叶，少了部分的是不完全叶\n5. 一个叶柄多个叶子叫，复叶，反之叫单叶\n6. 复叶也分为羽状，掌状，单身复叶，三出叶\n7. 单身复叶是三出叶的变形\n8. 叶基是叶子的基部\n9. 叶缘是叶子的边缘\n10. 叶脉分平行脉，网状脉，三出脉，叉状脉\n11. 叶有六类变态，苞片和总苞\n\n***\n\n**观赏花**\n\n1. 自然界最多的是白色花\n2. 繁殖有营养繁殖，有性繁殖，无性繁殖三种方式\n3. 营养繁殖是用茎，根，扦插之类的方法\n4. 无性繁殖是孢子脱离母体发育成独立的个体，藻类菌类地衣苔藓蕨类常见\n5. 花柄就是花梗，花连接枝干的部分，支持和营养作用\n6. 花托是花柄末端的加粗加大部分\n7. 草莓吃的是花托\n8. 花被保护雌蕊和雄蕊\n9. 花冠由花瓣组成\n2. 梅花桃花杏花梨花李花樱花海棠\n3. 刚开花的杏花是带粉色，快败了才变白\n4. 杏花独特之处是花萼向后翘，开花的时候没有叶\n5. 桃花粉白色，花和叶一起开，叶子像燕子尾巴，花药也就是花蕊的顶端是绯红色的\n6. 梨花惨白惨白白到极致，花药要么是红色要么是紫色要么是紫红色不同的颜色，和花药发育时间先后有关\n7. 李花小，成簇开，附满整个枝像烤串，花瓣白色但花蕊浅黄色\n8. 海棠有苹果属和木瓜属两种\n9. 樱花花瓣尖端有个小缺口\n10. 梅花和腊梅是两回事","slug":"杂集/观赏植物学","published":1,"updated":"2024-04-15T19:34:23.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnrg0023hk8z1qod50x5","content":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是选修课观赏植物学的课堂笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>评：本文是可爱的蒋春苗老师的观赏植物学选修课的课堂笔记，我可能是学习得最认真的一个，可是我都没有选这门课，所以老师也不会知道我是谁，不过这重要吗？这不重要吗？这重要吗？大抵是不重要的。毕竟我有脑子里的知识不对吗？还有这份笔记可以回味，而且我还不用期末测验，把一件真正的“美”事用考试弄成“苦”事。</p>\n<p>作为课堂笔记，结构比较凌乱，概括总结大概其中内容，分为两种，首先列举了你如果想学习观赏植物学的话必须认识的植物还有其美在哪，以及一些观赏植物学小知识，这两类知识也是老师的课的主要内容（除去大量的小电影和纪录片^-^）</p>\n<hr>\n<p><strong>绪论</strong></p>\n<ol>\n<li>中国特有的观赏植物：<ol>\n<li>雀云草：这是地被植物，藤蔓，蓝绿色光芒 </li>\n<li>鹅掌楸：又中国郁金香，恐龙同时代植物，北美鹅掌楸和中国鹅掌楸是两回事，叶片马褂状，秋天叶片变黄像变黄马卦，花朵黄绿色 花瓣厚实 濒危，因为中国人拿来做家具，花朵开放异花授粉，柱头可以独自发育但是难成活，现在靠扦插</li>\n</ol>\n</li>\n<li>雪松 防尘减噪 雪松油可追溯到圣经时代，埃及艳后也用过，能杀菌 走过路过能闻到松子味道</li>\n<li>麻栗坡兜兰 高观赏价值，三十多个品种，麻栗坡兜兰为佳，特点超长寿命，静止和运动，植物间有竞争和合作，色彩众多</li>\n<li>观赏植物的分类：观赏植物首先按木本和草本分类，然后按观赏器官具体分类</li>\n<li>观赏植物是观赏什么：形色香声韵</li>\n<li>花的色彩会对人有生理和心理影响</li>\n<li>植物的绿色至少可分三十种</li>\n<li>植物的枝干也有不同色彩可以欣赏</li>\n<li>观赏植物的作用：观赏植物有杀菌，保持水土，制造氧气，吸收有毒气体，降低温度等等作用，观赏植物的种植不仅考虑美，还会考虑上述实际作用</li>\n<li>观赏植物还有各种旅游方面的价值，科普启迪方面的价值</li>\n<li>板根现象：板根现象出现在热带雨林，经常下雨土壤浅薄导致根部不能深入而横向生长许多继生根</li>\n<li>中国由于跨热带亚热带温带幅员辽阔，世界植物最丰富的国家之一，观赏植物种类世界之最</li>\n<li>含羞草是因为躲避亚热带雨林大雨，细胞表面有受体感受压力，细胞核收到信息调动dna表达运动蛋白质完成动作，对含羞草来说很痛苦</li>\n<li>捕蝇草夹子里的腺体分泌蛋白粘液，感应到有动物就夹起来捕获动物，然后分泌消化液</li>\n<li>藤蔓攀爬属于主动运动</li>\n<li>水稻杆子有感应器，水太高了就基因表达几分钟内长高几厘米，永远比水面高</li>\n<li>植物是有感情的，天天夸的会长得好，不理不睬的就默默快速开花结果结束生命</li>\n<li>苦苣属本身不成长，别人的生长因子到位才能刺激它生长</li>\n<li>植物知道旁边有同类或者异类</li>\n<li>没有自然黑色花，但是有人工培育的</li>\n<li>嘴唇花其实是苞叶</li>\n<li>芭蕉叶是听声音欣赏的</li>\n<li>一品红的红色也是变态叶，除此之外还有一品白一品黄一品粉同理</li>\n<li>薰衣草可提取精油，普罗旺斯薰衣草最有名，新疆伊犁也有薰衣草田</li>\n<li>薰衣草最普遍的颜色是蓝色，另外还有白色品种</li>\n<li>羽衣甘蓝的营养比甘蓝高</li>\n<li>银杏是国树，因为中国独有，外形美丽，极度抗病，药用价值</li>\n<li>银杏种雄树，防止结果实</li>\n<li>钓鱼台银杏林大道，广西桂林海洋乡中国银杏第一乡，银杏百万株1.7万过百年，云南腾冲银杏村，浙江长兴十里古银杏长廊，西安罗汉洞村观音禅寺千年银杏树</li>\n<li>紫叶小聂和红花继木很难区别，前者叶片菱状卵形两面无毛，后者叶片卵形两面长粗毛，然后开花的时候前者黄色后者粉色</li>\n<li>佛肚竹可以做乐器</li>\n<li>紫竹很像甘蔗</li>\n<li>红瑞木秋天落叶之后红色的茎杆配北方白雪很好看</li>\n<li>文竹的叶子已经退化成鳞片，貌似的叶子只是枝干的重叠</li>\n<li>珙桐也是中国专有，又中国鸽子树因为变态叶像鸽子</li>\n<li>鹤望兰又天堂鸟</li>\n<li>荷包牡丹长得像荷包</li>\n<li>米老鼠花长得像米老鼠，眼睛是果实成熟掉下来之后产生的黑残根</li>\n<li>猴面小龙兰长得像猴子</li>\n<li>旅人蕉叶片有大量水分</li>\n<li>王莲叶脉里有大量空气，承重40到70公斤，德国科学家从亚马逊带过来的，所以在中国种需要大棚以过冬，英国女王给它了一个和自己同名的属名，花开三天第一天白色，第二天白色，第三天粉紫色，然后闭拢沉水底</li>\n<li>酒椰的叶片世界最大，可以二十多米</li>\n<li>五指茄又两面针</li>\n<li>接骨木在西方和巫术有关</li>\n<li>火龙果花像昙花，火龙果的一种蛋白质可以和重金属结合，所以可以排毒</li>\n<li>云南大树杜鹃20米高粗4米，世界杜鹃之王</li>\n<li>北京北海公园白皮松。</li>\n<li>六大器官植物体：营养器官根茎叶，生殖器官花果种，它们的类型和作用各不同</li>\n<li>1665年列文虎克发现细胞，施莱登和施旺细胞学说【一切生物都是由细胞组成的】</li>\n</ol>\n<hr>\n<p><strong>观赏茎</strong></p>\n<ol>\n<li>茎的作用：疏导，支持，储藏【根状茎莲藕，块茎马铃薯，球茎，鳞茎】，繁殖，光合作用</li>\n<li>叶子会退化变态成各种奇怪的形态。</li>\n</ol>\n<hr>\n<p><strong>观赏叶</strong></p>\n<ol>\n<li>秋海棠</li>\n<li>肾形草，上帝打翻了调色盘，颜色是环境温度调整的，红黄橙绿紫色五种，一般作为地被植物造景，可以吸灰尘，富集土壤重金属</li>\n<li>叶子有光合作用，蒸腾作用，气体交换，吸收分泌，繁殖，储藏这些作用</li>\n<li>叶片叶柄和托叶，三个都有的是完全叶，少了部分的是不完全叶</li>\n<li>一个叶柄多个叶子叫，复叶，反之叫单叶</li>\n<li>复叶也分为羽状，掌状，单身复叶，三出叶</li>\n<li>单身复叶是三出叶的变形</li>\n<li>叶基是叶子的基部</li>\n<li>叶缘是叶子的边缘</li>\n<li>叶脉分平行脉，网状脉，三出脉，叉状脉</li>\n<li>叶有六类变态，苞片和总苞</li>\n</ol>\n<hr>\n<p><strong>观赏花</strong></p>\n<ol>\n<li>自然界最多的是白色花</li>\n<li>繁殖有营养繁殖，有性繁殖，无性繁殖三种方式</li>\n<li>营养繁殖是用茎，根，扦插之类的方法</li>\n<li>无性繁殖是孢子脱离母体发育成独立的个体，藻类菌类地衣苔藓蕨类常见</li>\n<li>花柄就是花梗，花连接枝干的部分，支持和营养作用</li>\n<li>花托是花柄末端的加粗加大部分</li>\n<li>草莓吃的是花托</li>\n<li>花被保护雌蕊和雄蕊</li>\n<li>花冠由花瓣组成</li>\n<li>梅花桃花杏花梨花李花樱花海棠</li>\n<li>刚开花的杏花是带粉色，快败了才变白</li>\n<li>杏花独特之处是花萼向后翘，开花的时候没有叶</li>\n<li>桃花粉白色，花和叶一起开，叶子像燕子尾巴，花药也就是花蕊的顶端是绯红色的</li>\n<li>梨花惨白惨白白到极致，花药要么是红色要么是紫色要么是紫红色不同的颜色，和花药发育时间先后有关</li>\n<li>李花小，成簇开，附满整个枝像烤串，花瓣白色但花蕊浅黄色</li>\n<li>海棠有苹果属和木瓜属两种</li>\n<li>樱花花瓣尖端有个小缺口</li>\n<li>梅花和腊梅是两回事</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是选修课观赏植物学的课堂笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>评：本文是可爱的蒋春苗老师的观赏植物学选修课的课堂笔记，我可能是学习得最认真的一个，可是我都没有选这门课，所以老师也不会知道我是谁，不过这重要吗？这不重要吗？这重要吗？大抵是不重要的。毕竟我有脑子里的知识不对吗？还有这份笔记可以回味，而且我还不用期末测验，把一件真正的“美”事用考试弄成“苦”事。</p>\n<p>作为课堂笔记，结构比较凌乱，概括总结大概其中内容，分为两种，首先列举了你如果想学习观赏植物学的话必须认识的植物还有其美在哪，以及一些观赏植物学小知识，这两类知识也是老师的课的主要内容（除去大量的小电影和纪录片^-^）</p>\n<hr>\n<p><strong>绪论</strong></p>\n<ol>\n<li>中国特有的观赏植物：<ol>\n<li>雀云草：这是地被植物，藤蔓，蓝绿色光芒 </li>\n<li>鹅掌楸：又中国郁金香，恐龙同时代植物，北美鹅掌楸和中国鹅掌楸是两回事，叶片马褂状，秋天叶片变黄像变黄马卦，花朵黄绿色 花瓣厚实 濒危，因为中国人拿来做家具，花朵开放异花授粉，柱头可以独自发育但是难成活，现在靠扦插</li>\n</ol>\n</li>\n<li>雪松 防尘减噪 雪松油可追溯到圣经时代，埃及艳后也用过，能杀菌 走过路过能闻到松子味道</li>\n<li>麻栗坡兜兰 高观赏价值，三十多个品种，麻栗坡兜兰为佳，特点超长寿命，静止和运动，植物间有竞争和合作，色彩众多</li>\n<li>观赏植物的分类：观赏植物首先按木本和草本分类，然后按观赏器官具体分类</li>\n<li>观赏植物是观赏什么：形色香声韵</li>\n<li>花的色彩会对人有生理和心理影响</li>\n<li>植物的绿色至少可分三十种</li>\n<li>植物的枝干也有不同色彩可以欣赏</li>\n<li>观赏植物的作用：观赏植物有杀菌，保持水土，制造氧气，吸收有毒气体，降低温度等等作用，观赏植物的种植不仅考虑美，还会考虑上述实际作用</li>\n<li>观赏植物还有各种旅游方面的价值，科普启迪方面的价值</li>\n<li>板根现象：板根现象出现在热带雨林，经常下雨土壤浅薄导致根部不能深入而横向生长许多继生根</li>\n<li>中国由于跨热带亚热带温带幅员辽阔，世界植物最丰富的国家之一，观赏植物种类世界之最</li>\n<li>含羞草是因为躲避亚热带雨林大雨，细胞表面有受体感受压力，细胞核收到信息调动dna表达运动蛋白质完成动作，对含羞草来说很痛苦</li>\n<li>捕蝇草夹子里的腺体分泌蛋白粘液，感应到有动物就夹起来捕获动物，然后分泌消化液</li>\n<li>藤蔓攀爬属于主动运动</li>\n<li>水稻杆子有感应器，水太高了就基因表达几分钟内长高几厘米，永远比水面高</li>\n<li>植物是有感情的，天天夸的会长得好，不理不睬的就默默快速开花结果结束生命</li>\n<li>苦苣属本身不成长，别人的生长因子到位才能刺激它生长</li>\n<li>植物知道旁边有同类或者异类</li>\n<li>没有自然黑色花，但是有人工培育的</li>\n<li>嘴唇花其实是苞叶</li>\n<li>芭蕉叶是听声音欣赏的</li>\n<li>一品红的红色也是变态叶，除此之外还有一品白一品黄一品粉同理</li>\n<li>薰衣草可提取精油，普罗旺斯薰衣草最有名，新疆伊犁也有薰衣草田</li>\n<li>薰衣草最普遍的颜色是蓝色，另外还有白色品种</li>\n<li>羽衣甘蓝的营养比甘蓝高</li>\n<li>银杏是国树，因为中国独有，外形美丽，极度抗病，药用价值</li>\n<li>银杏种雄树，防止结果实</li>\n<li>钓鱼台银杏林大道，广西桂林海洋乡中国银杏第一乡，银杏百万株1.7万过百年，云南腾冲银杏村，浙江长兴十里古银杏长廊，西安罗汉洞村观音禅寺千年银杏树</li>\n<li>紫叶小聂和红花继木很难区别，前者叶片菱状卵形两面无毛，后者叶片卵形两面长粗毛，然后开花的时候前者黄色后者粉色</li>\n<li>佛肚竹可以做乐器</li>\n<li>紫竹很像甘蔗</li>\n<li>红瑞木秋天落叶之后红色的茎杆配北方白雪很好看</li>\n<li>文竹的叶子已经退化成鳞片，貌似的叶子只是枝干的重叠</li>\n<li>珙桐也是中国专有，又中国鸽子树因为变态叶像鸽子</li>\n<li>鹤望兰又天堂鸟</li>\n<li>荷包牡丹长得像荷包</li>\n<li>米老鼠花长得像米老鼠，眼睛是果实成熟掉下来之后产生的黑残根</li>\n<li>猴面小龙兰长得像猴子</li>\n<li>旅人蕉叶片有大量水分</li>\n<li>王莲叶脉里有大量空气，承重40到70公斤，德国科学家从亚马逊带过来的，所以在中国种需要大棚以过冬，英国女王给它了一个和自己同名的属名，花开三天第一天白色，第二天白色，第三天粉紫色，然后闭拢沉水底</li>\n<li>酒椰的叶片世界最大，可以二十多米</li>\n<li>五指茄又两面针</li>\n<li>接骨木在西方和巫术有关</li>\n<li>火龙果花像昙花，火龙果的一种蛋白质可以和重金属结合，所以可以排毒</li>\n<li>云南大树杜鹃20米高粗4米，世界杜鹃之王</li>\n<li>北京北海公园白皮松。</li>\n<li>六大器官植物体：营养器官根茎叶，生殖器官花果种，它们的类型和作用各不同</li>\n<li>1665年列文虎克发现细胞，施莱登和施旺细胞学说【一切生物都是由细胞组成的】</li>\n</ol>\n<hr>\n<p><strong>观赏茎</strong></p>\n<ol>\n<li>茎的作用：疏导，支持，储藏【根状茎莲藕，块茎马铃薯，球茎，鳞茎】，繁殖，光合作用</li>\n<li>叶子会退化变态成各种奇怪的形态。</li>\n</ol>\n<hr>\n<p><strong>观赏叶</strong></p>\n<ol>\n<li>秋海棠</li>\n<li>肾形草，上帝打翻了调色盘，颜色是环境温度调整的，红黄橙绿紫色五种，一般作为地被植物造景，可以吸灰尘，富集土壤重金属</li>\n<li>叶子有光合作用，蒸腾作用，气体交换，吸收分泌，繁殖，储藏这些作用</li>\n<li>叶片叶柄和托叶，三个都有的是完全叶，少了部分的是不完全叶</li>\n<li>一个叶柄多个叶子叫，复叶，反之叫单叶</li>\n<li>复叶也分为羽状，掌状，单身复叶，三出叶</li>\n<li>单身复叶是三出叶的变形</li>\n<li>叶基是叶子的基部</li>\n<li>叶缘是叶子的边缘</li>\n<li>叶脉分平行脉，网状脉，三出脉，叉状脉</li>\n<li>叶有六类变态，苞片和总苞</li>\n</ol>\n<hr>\n<p><strong>观赏花</strong></p>\n<ol>\n<li>自然界最多的是白色花</li>\n<li>繁殖有营养繁殖，有性繁殖，无性繁殖三种方式</li>\n<li>营养繁殖是用茎，根，扦插之类的方法</li>\n<li>无性繁殖是孢子脱离母体发育成独立的个体，藻类菌类地衣苔藓蕨类常见</li>\n<li>花柄就是花梗，花连接枝干的部分，支持和营养作用</li>\n<li>花托是花柄末端的加粗加大部分</li>\n<li>草莓吃的是花托</li>\n<li>花被保护雌蕊和雄蕊</li>\n<li>花冠由花瓣组成</li>\n<li>梅花桃花杏花梨花李花樱花海棠</li>\n<li>刚开花的杏花是带粉色，快败了才变白</li>\n<li>杏花独特之处是花萼向后翘，开花的时候没有叶</li>\n<li>桃花粉白色，花和叶一起开，叶子像燕子尾巴，花药也就是花蕊的顶端是绯红色的</li>\n<li>梨花惨白惨白白到极致，花药要么是红色要么是紫色要么是紫红色不同的颜色，和花药发育时间先后有关</li>\n<li>李花小，成簇开，附满整个枝像烤串，花瓣白色但花蕊浅黄色</li>\n<li>海棠有苹果属和木瓜属两种</li>\n<li>樱花花瓣尖端有个小缺口</li>\n<li>梅花和腊梅是两回事</li>\n</ol>\n"},{"title":"新诗研究","date":"2023-04-15T19:57:46.000Z","auto_excerpt":"true","_content":"\n  ## 前言和概述\n\n 本文是关于新诗的研究笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n评：\n\n早期的笔记，没什么条理，但有知识点，所以贴上来了。\n\n研究了新诗之后你会发现，这就是一坨s。无数文人在s上试图雕花，所有探索都终遭失败。可是神奇的是就像人离不开拉s，当你想因情感想写点什么的时候，除了诗你没有什么体裁更适合抒情了（也许散文算半个），所以你不得不写诗，你会发现诗歌还是文学之王。\n\n要怪就怪新文化运动吧。\n\n最后，从文艺座谈会开始，政治对当代中国文学的影响外界几乎无人知晓，之前很长时间我也一直觉得是当代文人纯菜。也许可能新诗其实不是s，也许能雕出花，也许……因为没有如果，所以什么都是也许。\n\n\n---\n\n\n## 新诗历史\n\n  \n\n1. 20世纪初：胡适主导的白话文运动（新文学，文学革命）起，浅露的初期新诗\n2. 1925年：新月派格律诗探索崛起\n3. 1940年：格律诗式微，意象派、象征派崛起\n4. 49年建国后：长叙事诗崛起\n5. 1956~1957年：百花时代改革崛起\n6. 反右运动：百花时代式微\n7. 文化大革命：地下诗歌崛起\n8. 文革结束：朦胧诗崛起\n\n  \n\n## 新诗形式\n\n  \n\n1. 分行诗，就是“散文式分行”，又分自由诗和格律诗\n2. 自由诗，是灵活结构、灵活的韵，但诵读也讲求音乐感，总之所有的形都牺牲配合于内容。一行为一个诗意的基本片段，需要强调部分可单独一行，而整体上，又合乎自然口语。缺点是缺少剪裁变为分行的散文\n3. 格律诗，有一套自己的行数段数音尺韵脚规则，以满足视觉和听觉美感\n4. 分段诗，分段而不分行，和散文诗几乎等义\n5. 图象诗，用诗句画图，邪门\n\n  \n\n## 新诗风格\n\n  \n\n1. 现实主义，对自然和生活做出准确细致的描绘，摒弃想象\n2. 唯美主义，专注于传递感官愉悦，摒弃道德或情感信息，求美而不求其它任何东西\n3. 象征主义，认为现世虚幻而痛苦，通过象征和暗示，用晦涩的语言形成某种神秘联想，即某种象征\n4. 新浪漫主义，空虚想象，脱离现实\n5. 意象主义，全靠意象表现情感，而不抒情\n6. 未来主义，抨击国家，否定一切，无政府主义，虚无主义，要求变革，寄希望于未来\n7. 表现主义，重点地赤裸呈现主观世界的精神、情绪、思想\n8. 超现实主义，解构现实令其怪诞，以摆脱一切束缚呈现所谓“真正真实”\n9. 现代主义，从人的心理和感受出发，表现生活对人的压抑和扭曲\n10. 后现代主义，我真的不知道怎么解释\n11. 具体主义，就是图像诗歌，但是后期又偏离了","source":"_posts/杂集/新诗研究.md","raw":"---\ntitle: 新诗研究\ndate: 2023-04-16 03:57:46\ntags: \ncategories:\n  - - 杂集\nauto_excerpt: \"true\"\n---\n\n  ## 前言和概述\n\n 本文是关于新诗的研究笔记\n \n \n 笔记本身遵循个人的笔记习惯，具体而言：\n 2. 章节遵照原书排序\n 3. 章标题用markdowns的2号标题\n 4. 每两大章之间用横线分隔\n 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：\n 6. 知识点依附在具体的节之下，用序号标记顺序\n 7. 知识点基本遵循先后出现的顺序\n 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话\n 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字\n\n---\n\n\n评：\n\n早期的笔记，没什么条理，但有知识点，所以贴上来了。\n\n研究了新诗之后你会发现，这就是一坨s。无数文人在s上试图雕花，所有探索都终遭失败。可是神奇的是就像人离不开拉s，当你想因情感想写点什么的时候，除了诗你没有什么体裁更适合抒情了（也许散文算半个），所以你不得不写诗，你会发现诗歌还是文学之王。\n\n要怪就怪新文化运动吧。\n\n最后，从文艺座谈会开始，政治对当代中国文学的影响外界几乎无人知晓，之前很长时间我也一直觉得是当代文人纯菜。也许可能新诗其实不是s，也许能雕出花，也许……因为没有如果，所以什么都是也许。\n\n\n---\n\n\n## 新诗历史\n\n  \n\n1. 20世纪初：胡适主导的白话文运动（新文学，文学革命）起，浅露的初期新诗\n2. 1925年：新月派格律诗探索崛起\n3. 1940年：格律诗式微，意象派、象征派崛起\n4. 49年建国后：长叙事诗崛起\n5. 1956~1957年：百花时代改革崛起\n6. 反右运动：百花时代式微\n7. 文化大革命：地下诗歌崛起\n8. 文革结束：朦胧诗崛起\n\n  \n\n## 新诗形式\n\n  \n\n1. 分行诗，就是“散文式分行”，又分自由诗和格律诗\n2. 自由诗，是灵活结构、灵活的韵，但诵读也讲求音乐感，总之所有的形都牺牲配合于内容。一行为一个诗意的基本片段，需要强调部分可单独一行，而整体上，又合乎自然口语。缺点是缺少剪裁变为分行的散文\n3. 格律诗，有一套自己的行数段数音尺韵脚规则，以满足视觉和听觉美感\n4. 分段诗，分段而不分行，和散文诗几乎等义\n5. 图象诗，用诗句画图，邪门\n\n  \n\n## 新诗风格\n\n  \n\n1. 现实主义，对自然和生活做出准确细致的描绘，摒弃想象\n2. 唯美主义，专注于传递感官愉悦，摒弃道德或情感信息，求美而不求其它任何东西\n3. 象征主义，认为现世虚幻而痛苦，通过象征和暗示，用晦涩的语言形成某种神秘联想，即某种象征\n4. 新浪漫主义，空虚想象，脱离现实\n5. 意象主义，全靠意象表现情感，而不抒情\n6. 未来主义，抨击国家，否定一切，无政府主义，虚无主义，要求变革，寄希望于未来\n7. 表现主义，重点地赤裸呈现主观世界的精神、情绪、思想\n8. 超现实主义，解构现实令其怪诞，以摆脱一切束缚呈现所谓“真正真实”\n9. 现代主义，从人的心理和感受出发，表现生活对人的压抑和扭曲\n10. 后现代主义，我真的不知道怎么解释\n11. 具体主义，就是图像诗歌，但是后期又偏离了","slug":"杂集/新诗研究","published":1,"updated":"2024-04-15T20:07:14.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv34nnrh0024hk8zhij98tya","content":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是关于新诗的研究笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>评：</p>\n<p>早期的笔记，没什么条理，但有知识点，所以贴上来了。</p>\n<p>研究了新诗之后你会发现，这就是一坨s。无数文人在s上试图雕花，所有探索都终遭失败。可是神奇的是就像人离不开拉s，当你想因情感想写点什么的时候，除了诗你没有什么体裁更适合抒情了（也许散文算半个），所以你不得不写诗，你会发现诗歌还是文学之王。</p>\n<p>要怪就怪新文化运动吧。</p>\n<p>最后，从文艺座谈会开始，政治对当代中国文学的影响外界几乎无人知晓，之前很长时间我也一直觉得是当代文人纯菜。也许可能新诗其实不是s，也许能雕出花，也许……因为没有如果，所以什么都是也许。</p>\n<hr>\n<h2 id=\"新诗历史\"><a href=\"#新诗历史\" class=\"headerlink\" title=\"新诗历史\"></a>新诗历史</h2><ol>\n<li>20世纪初：胡适主导的白话文运动（新文学，文学革命）起，浅露的初期新诗</li>\n<li>1925年：新月派格律诗探索崛起</li>\n<li>1940年：格律诗式微，意象派、象征派崛起</li>\n<li>49年建国后：长叙事诗崛起</li>\n<li>1956~1957年：百花时代改革崛起</li>\n<li>反右运动：百花时代式微</li>\n<li>文化大革命：地下诗歌崛起</li>\n<li>文革结束：朦胧诗崛起</li>\n</ol>\n<h2 id=\"新诗形式\"><a href=\"#新诗形式\" class=\"headerlink\" title=\"新诗形式\"></a>新诗形式</h2><ol>\n<li>分行诗，就是“散文式分行”，又分自由诗和格律诗</li>\n<li>自由诗，是灵活结构、灵活的韵，但诵读也讲求音乐感，总之所有的形都牺牲配合于内容。一行为一个诗意的基本片段，需要强调部分可单独一行，而整体上，又合乎自然口语。缺点是缺少剪裁变为分行的散文</li>\n<li>格律诗，有一套自己的行数段数音尺韵脚规则，以满足视觉和听觉美感</li>\n<li>分段诗，分段而不分行，和散文诗几乎等义</li>\n<li>图象诗，用诗句画图，邪门</li>\n</ol>\n<h2 id=\"新诗风格\"><a href=\"#新诗风格\" class=\"headerlink\" title=\"新诗风格\"></a>新诗风格</h2><ol>\n<li>现实主义，对自然和生活做出准确细致的描绘，摒弃想象</li>\n<li>唯美主义，专注于传递感官愉悦，摒弃道德或情感信息，求美而不求其它任何东西</li>\n<li>象征主义，认为现世虚幻而痛苦，通过象征和暗示，用晦涩的语言形成某种神秘联想，即某种象征</li>\n<li>新浪漫主义，空虚想象，脱离现实</li>\n<li>意象主义，全靠意象表现情感，而不抒情</li>\n<li>未来主义，抨击国家，否定一切，无政府主义，虚无主义，要求变革，寄希望于未来</li>\n<li>表现主义，重点地赤裸呈现主观世界的精神、情绪、思想</li>\n<li>超现实主义，解构现实令其怪诞，以摆脱一切束缚呈现所谓“真正真实”</li>\n<li>现代主义，从人的心理和感受出发，表现生活对人的压抑和扭曲</li>\n<li>后现代主义，我真的不知道怎么解释</li>\n<li>具体主义，就是图像诗歌，但是后期又偏离了</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言和概述\"><a href=\"#前言和概述\" class=\"headerlink\" title=\"前言和概述\"></a>前言和概述</h2><p> 本文是关于新诗的研究笔记<br> <br> <br> 笔记本身遵循个人的笔记习惯，具体而言：<br> 2. 章节遵照原书排序<br> 3. 章标题用markdowns的2号标题<br> 4. 每两大章之间用横线分隔<br> 5. 节标题使用和正文一样的字号，节标题末尾带一个冒号：<br> 6. 知识点依附在具体的节之下，用序号标记顺序<br> 7. 知识点基本遵循先后出现的顺序<br> 8. 中文方括号【】中的内容是自己的注释，一般是我本人的批注和想说的话<br> 9. 圆括号（）是一些对较抽象或复杂内容的提示性文字</p>\n<hr>\n<p>评：</p>\n<p>早期的笔记，没什么条理，但有知识点，所以贴上来了。</p>\n<p>研究了新诗之后你会发现，这就是一坨s。无数文人在s上试图雕花，所有探索都终遭失败。可是神奇的是就像人离不开拉s，当你想因情感想写点什么的时候，除了诗你没有什么体裁更适合抒情了（也许散文算半个），所以你不得不写诗，你会发现诗歌还是文学之王。</p>\n<p>要怪就怪新文化运动吧。</p>\n<p>最后，从文艺座谈会开始，政治对当代中国文学的影响外界几乎无人知晓，之前很长时间我也一直觉得是当代文人纯菜。也许可能新诗其实不是s，也许能雕出花，也许……因为没有如果，所以什么都是也许。</p>\n<hr>\n<h2 id=\"新诗历史\"><a href=\"#新诗历史\" class=\"headerlink\" title=\"新诗历史\"></a>新诗历史</h2><ol>\n<li>20世纪初：胡适主导的白话文运动（新文学，文学革命）起，浅露的初期新诗</li>\n<li>1925年：新月派格律诗探索崛起</li>\n<li>1940年：格律诗式微，意象派、象征派崛起</li>\n<li>49年建国后：长叙事诗崛起</li>\n<li>1956~1957年：百花时代改革崛起</li>\n<li>反右运动：百花时代式微</li>\n<li>文化大革命：地下诗歌崛起</li>\n<li>文革结束：朦胧诗崛起</li>\n</ol>\n<h2 id=\"新诗形式\"><a href=\"#新诗形式\" class=\"headerlink\" title=\"新诗形式\"></a>新诗形式</h2><ol>\n<li>分行诗，就是“散文式分行”，又分自由诗和格律诗</li>\n<li>自由诗，是灵活结构、灵活的韵，但诵读也讲求音乐感，总之所有的形都牺牲配合于内容。一行为一个诗意的基本片段，需要强调部分可单独一行，而整体上，又合乎自然口语。缺点是缺少剪裁变为分行的散文</li>\n<li>格律诗，有一套自己的行数段数音尺韵脚规则，以满足视觉和听觉美感</li>\n<li>分段诗，分段而不分行，和散文诗几乎等义</li>\n<li>图象诗，用诗句画图，邪门</li>\n</ol>\n<h2 id=\"新诗风格\"><a href=\"#新诗风格\" class=\"headerlink\" title=\"新诗风格\"></a>新诗风格</h2><ol>\n<li>现实主义，对自然和生活做出准确细致的描绘，摒弃想象</li>\n<li>唯美主义，专注于传递感官愉悦，摒弃道德或情感信息，求美而不求其它任何东西</li>\n<li>象征主义，认为现世虚幻而痛苦，通过象征和暗示，用晦涩的语言形成某种神秘联想，即某种象征</li>\n<li>新浪漫主义，空虚想象，脱离现实</li>\n<li>意象主义，全靠意象表现情感，而不抒情</li>\n<li>未来主义，抨击国家，否定一切，无政府主义，虚无主义，要求变革，寄希望于未来</li>\n<li>表现主义，重点地赤裸呈现主观世界的精神、情绪、思想</li>\n<li>超现实主义，解构现实令其怪诞，以摆脱一切束缚呈现所谓“真正真实”</li>\n<li>现代主义，从人的心理和感受出发，表现生活对人的压抑和扭曲</li>\n<li>后现代主义，我真的不知道怎么解释</li>\n<li>具体主义，就是图像诗歌，但是后期又偏离了</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clv34nnr40001hk8zd0qu281o","category_id":"clv34nnr70006hk8z71y38ryj","_id":"clv34nnra000fhk8za06dczhi"},{"post_id":"clv34nnr80009hk8z23ct39ed","category_id":"clv34nnr70006hk8z71y38ryj","_id":"clv34nnra000hhk8z47qu2q73"},{"post_id":"clv34nnr60003hk8z7nhba6c5","category_id":"clv34nnr8000ahk8zgf98fhib","_id":"clv34nnra000khk8z0icp017x"},{"post_id":"clv34nnr9000ehk8z40mf8y33","category_id":"clv34nnr70006hk8z71y38ryj","_id":"clv34nnrb000ohk8z27xi3338"},{"post_id":"clv34nnr70005hk8zgk8905e3","category_id":"clv34nnr70006hk8z71y38ryj","_id":"clv34nnrb000qhk8zd84ad11d"},{"post_id":"clv34nnr80008hk8zb2qwee7w","category_id":"clv34nnra000ihk8zfi9p1zji","_id":"clv34nnrc000thk8zd6sh8uaw"},{"post_id":"clv34nnr8000bhk8za9szgf39","category_id":"clv34nnrb000mhk8zfotieabl","_id":"clv34nnrc000xhk8z0ytj2jg7"},{"post_id":"clv34nnr9000chk8z25dygf88","category_id":"clv34nnrb000shk8zarsy4uxw","_id":"clv34nnrd0012hk8z52xm6yp7"},{"post_id":"clv34nnra000ghk8z4com8wjk","category_id":"clv34nnrc000whk8z2bt19rfr","_id":"clv34nnrd0016hk8z0uhd81ni"},{"post_id":"clv34nnra000jhk8zcu5s5nfz","category_id":"clv34nnrc000whk8z2bt19rfr","_id":"clv34nnre001ahk8zeifigpms"},{"post_id":"clv34nnrd0013hk8zfl4mhdt7","category_id":"clv34nnrc000whk8z2bt19rfr","_id":"clv34nnre001chk8z2hnxau4b"},{"post_id":"clv34nnrb000lhk8z1rqh97dh","category_id":"clv34nnrd0014hk8z0yg9bbrk","_id":"clv34nnre001fhk8zffcv4gjx"},{"post_id":"clv34nnrd0017hk8z90rr3mx1","category_id":"clv34nnrd0014hk8z0yg9bbrk","_id":"clv34nnre001ghk8zai331n0q"},{"post_id":"clv34nnrb000nhk8z3kgl6sa7","category_id":"clv34nnrd0014hk8z0yg9bbrk","_id":"clv34nnrf001ihk8zgw3aho6c"},{"post_id":"clv34nnrb000phk8z0er07q6u","category_id":"clv34nnrd0014hk8z0yg9bbrk","_id":"clv34nnrf001khk8zchxp0g9d"},{"post_id":"clv34nnrb000rhk8zcgxdg22e","category_id":"clv34nnrd0014hk8z0yg9bbrk","_id":"clv34nnrf001mhk8zciqn9ob5"},{"post_id":"clv34nnrc000uhk8z0sph1zox","category_id":"clv34nnrd0014hk8z0yg9bbrk","_id":"clv34nnrf001ohk8z2ovvea03"},{"post_id":"clv34nnrc000vhk8z9mwm6036","category_id":"clv34nnrf001lhk8z8u15bcqz","_id":"clv34nnrf001qhk8z3x1mhqkl"},{"post_id":"clv34nnrc000yhk8zaktu0cks","category_id":"clv34nnrd0014hk8z0yg9bbrk","_id":"clv34nnrf001shk8z4zcfga4b"},{"post_id":"clv34nnrc000zhk8z7bjy1k0i","category_id":"clv34nnrd0014hk8z0yg9bbrk","_id":"clv34nnrf001uhk8z511hdii5"},{"post_id":"clv34nnrd0011hk8z0501d42z","category_id":"clv34nnrf001rhk8z4xzq1tg4","_id":"clv34nnrf001whk8z5tfe0rz4"},{"post_id":"clv34nnrd0015hk8z14no2m1k","category_id":"clv34nnrf001thk8zhsw3gvtm","_id":"clv34nnrg001yhk8zctnn3p61"},{"post_id":"clv34nnre0019hk8za58b7c7g","category_id":"clv34nnrf001thk8zhsw3gvtm","_id":"clv34nnrg0020hk8z6dyeg7sd"},{"post_id":"clv34nnre001bhk8zb01p2mbx","category_id":"clv34nnrf001thk8zhsw3gvtm","_id":"clv34nnrg0021hk8z406h2s2c"},{"post_id":"clv34nnre001ehk8z64ijgsfe","category_id":"clv34nnrf001thk8zhsw3gvtm","_id":"clv34nnrg0022hk8zfrr282hy"},{"post_id":"clv34nnrg0023hk8z1qod50x5","category_id":"clv34nnrf001thk8zhsw3gvtm","_id":"clv34nnrh0025hk8z8x1u2b2k"},{"post_id":"clv34nnrh0024hk8zhij98tya","category_id":"clv34nnrf001thk8zhsw3gvtm","_id":"clv34nnrh0026hk8z30iogyhk"}],"PostTag":[],"Tag":[]}}